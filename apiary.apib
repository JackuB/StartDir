FORMAT: 1A
HOST : https://developers.rovicorp.com/api/v1/resolve/2

# Rovi Cloud API Documentation

Welcome to Rovi Cloud, _the_ source for global entertainment data!

Rovi Cloud offers API access to Rovi's world-class database of entertainment information, a database that powers data, images, and TV schedules in magazines, websites, and television program guides in over 70 countries.

Rovi Cloud currently offers the following APIs:

<table>
<tr><th>API</th><th>Description</th></tr>
<tr><td>Search</td><td><p>Satisfy consumers by enabling them to better navigate, sort, and select entertainment content. Powered by a staff of 300 entertainment content experts and our state-of-the-art Knowledge Graph.</p></td></tr>
<tr><td>Recommendations</td><td><p>Allow consumers to discover content and personalize their experiences by leveraging specific attributes, such as over 1,000 micro-genres. Powered by a staff of 300 entertainment content experts and our state-of-the-art Knowledge Graph.</p></td></tr>
<tr><td>TV Schedules</td><td><p>Deliver local TV schedules for over 35 countries from the database created by TV Guide, which now takes in 5 million program changes every 24 hours. Also provide local broadcast schedules for movies and programs a user is looking for. And include images of movies, programs, and people who work in movies and television.</p></td></tr>
<tr><td>Movie</td><td><p>Present in-depth data about movies, including editorial content and social media resources.</p></td></tr>
<tr><td>Series</td><td><p>Deliver in-depth data about TV series, including editorial content and social media resources.</p></td></tr>
<tr><td>Season</td><td><p>Provide TV series season synopsis and episode lists.</p></td></tr>
<tr><td>Episode</td><td><p>Present details about episodes in a series.</p></td></tr>
<tr><td>Other</td><td><p>Deliver in-depth data, including editorial content and social media resources, for programs that are not movies or TV series.</p></td></tr>
<tr><td>Release</td><td><p>Present information about the releases of movies, episodes, and other shows. Releases differ in language, content, or title.</p></td></tr>
<tr><td>Person</td><td><p>Provide details about a person in movies or televison.</p></td></tr>
<tr><td>Awards</td><td><p>Include awards and award nominations for a person, movie, TV series, or other program.</p></td></tr>
<tr><td>Return-Path Data</td><td><p>Send clickstream data about TV viewer behavior to the Rovi Content Data Warehouse. Then mine the Rovi Operator Insights portal for valuable business intelligence.</p></td></tr>
<tr><td>Remote Access</td><td><p>For cable companies, give cable subscribers remote access to their cable TV set-top boxes through an application on a tablet, smartphone, or website.</p></td></tr>
</table>

# About Our APIs
At 70 countries and counting, Rovi is the leading entertainment data provider in the world.

## TV Schedules
Rovi Cloud gives you access to the television database created by TV Guide, the popular weekly American television magazine. Today that database takes in 5 million program changes every 24 hours and powers data, images, and TV schedules in magazines, websites, and television program guides in dozens of countries.

Rovi is everything TV.  Take advantage of it. Create a compelling entertainment experience that draws consumers to your app, device, service, or website around any combination&nbsp;of&nbsp;â€”
* Program recommendations
* US national television schedules
* Program data, images, and upcoming schedule
* International cable, satellite, and broadcast television schedules

### Understanding Television Services and Sources
To design and present a television listings grid with Rovi data, you first need a good understanding of television services and sources. 

#### What Is a Source?
A source is the source of a broadcast schedule for a television channel. Well known sources include AMC, HBO, and CSPAN.

The Rovi database ID for a source is a `data_source` ID.

Some sources provide programming for multiple channels, each with a different schedule. An example is Lifetime Television East, West, and high-definition. These are different broadcast schedules, so Rovi assigns a unique `data_source` ID to each of these.

Most channels offer programming from just one source, but some channels may broadcast more than one source on the same channel. There are two ways this happens:

- One, a channel broadcasts sources at different times, on different schedules, say one source from 6:00AM to 2:00PM, and another from 2:00PM to 12:00AM. In this case, you may want to provide two rows in your schedule for the channel when the schedule overlaps both sources.

- And two, a channel broadcasts two sources, SD and HD, on the same channel number at the same time. Satellite television receivers can tune to each channel separately, so SD receivers pick up the SD source and HD the HD. For this channel, Rovi returns information about both sources. You can choose to present just one of them, since the schedule will be the same for both. Or you can choose to present a different row for each source.

Note also that some channels do not offer 24-hour programming. You need to decide what you want to display during times they are not broadcasting.

To get details about a source, use the `data_source` ID in a [data_source](/#reference/tv-schedule/datasource) request.

Use the same ID in all requests related to the source. For example, the same ID identifies the source in all of the requests in the following table:

| Request                      | Returns  |
| ---------------------------- | -------- |
| [data_source](/#reference/tv-schedule/datasource) | Details about the source. |
| [data_source_logos/best](/#reference/image/datasourcelogosbest) | Metadata about the primary logo for the source. |
| [data_source_logos/collection](/#reference/image/datasourcelogoscollection) | Metadata about all available logos for the source. |

#### What Is a Television Service?
A television service is a lineup of television channels. The Rovi database ID for a television service is a `data_service` ID.

Rovi identifies two types of television services: 

* A local lineup of television channels. For example:
  * Dish Network, US Eastern time zone (`data_service` ID 63879)
  * Local broadcast TV, Ontario, Canada (`data_service` ID 82905)
  * CanalSat, France Area Channels (Central Europe) (`data_service` ID 890504) 
* A Rovi-created lineup of US national television sources. This lineup isn't a real television service, rather it is a collection of the most popular national broadcast and cable sources, like CNBC, HBO, and CSPAN, and as such this lineup cannot provide local channel numbers. Programming from these sources occurs at the same time throughout a time zone, and people using these listings likely know which channels these sources are on. Examples of US national sources include:
  * United States national services, Eastern time zone (`data_service` ID 341759807)
  * United States national services, Central time zone (`data_service` ID 341759808)
  * United States national services, Pacific time zone (`data_service` ID 341759810)

Some satellite and IPTV services also omit channel numbers, but those services provide devices that users can use to configure their channel sequence.

Some television services present a single broadcast source, such as CNN, on more than one channel for the convenience of people using different sections of the channel lineup. 

To get details about a television service, use the `data_service` ID in a [data_service](/#reference/tv-schedule/dataservice) request.

Use the same ID in all requests related to the television service. For example, the same ID identifies the television service in all of the requests in the following table:

| Request                      | Returns  |
| ---------------------------- | -------- |
| [data_service](/#reference/tv-schedule/dataservice) | Details about the television service. |
| [data_service_channels/bulk](/#reference/tv-schedule/dataservicechannelsbulk) | Channel data at 50 channels per request. |
| [data_service_channels/single](/#reference/tv-schedule/dataservicechannelssingle) | Channel data at one channel per request.  |
| [data_service_channels/screen](/#reference/tv-schedule/dataservicechannelsscreen) | Channel data at 10 channels per request. |
| [data_service_schedules/bulk](/#reference/tv-schedule/dataserviceschedulesbulk) | Six hours of TV listings at 50 channels per request. |
| [data_service_schedules/single](/#reference/tv-schedule/dataserviceschedulessingle) | One day of TV listings at one channel per request. |
| [data_service_schedules/screen](/#reference/tv-schedule/dataserviceschedulesscreen) | Four hours of TV listings at 10 channels per request. |
| [data_series_appearances](/#reference/tv-schedule/dataseriesappearances) | TV series broadcast schedule on the television service. |
| [data_episode_appearances](/#reference/tv-schedule/dataepisodeappearances) | Episode broadcast schedule on the television service. |
| [data_movie_appearances](/#reference/tv-schedule/datamovieappearances) | Movie broadcast schedule on the television service. |
| [data_other_appearances](/#reference/tv-schedule/dataotherappearances) | Program broadcast schedule on the television service. |

#### Calculating Local Broadcast Times
Rovi returns program broadcast times in UTC time (Coordinated Universal Time), so you need to apply the local UTC offset to calculate the local time. We include the local offset in the information we return about a television service.
 
The format we use for broadcast times is YYYY-MO-DDTHH:MI:SS.000Z, where:

<table style="margin:0px 6px 0px 36px;">
<tr><td><ul>
<li>YYYY = year</li>
<li>MO&nbsp;&nbsp; = month&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
<li>DD&nbsp;&nbsp; = day</li>
</ul></td><td><ul>
<li>HH = hour (00 to 23)</li>
<li>MI = minute</li>
<li>SS = second</li>
</ul></td>
</table>

Note that the letter T precedes the time and that, to indicate UTC time, the date-time ends with the letter Z. (UTC time is also known as Zulu time.)

Here's an example: 2015-03-05T23:00:00Z. This is the broadcast time for the 6:00 pm news on March 5, 2015 in New York City. The UTC offset for that date in New York is minus 300 minutes (5 hours). Subtracting 300 minutes from the 23:00 time results in 18:00 (6:00 pm).

Because local offsets change with daylight savings time, offset information is returned with applicable start and end times like this: 

```json
    {
        "start": "2014-03-09T07:00:00.000Z",
        "end": "2014-11-02T06:00:00.000Z",
        "offset": -240
    },
    {
        "start": "2014-11-02T06:00:00.000Z",
        "end": "2015-03-08T07:00:00.000Z",
        "offset": -300
    }
```

Note that for the second daylight savings time change, your TV schedule would have two time periods from 1:00 am to 2:00 am local time, and that for the first change your schedule would have no 2:00 am to 3:00 am time period.

For locales that do not observe daylight savings time, the time period covers the calendar year and the offset does not change. For Regina, Saskatchewan, for example, time zone information looks like this: 

```json
    {
        "start": "2014-01-01T06:00:00.000Z",
        "end": "2015-01-01T06:00:00.000Z",
        "offset": -360
    },
    {
        "start": "2015-01-01T06:00:00.000Z",
        "end": "2016-01-01T06:00:00.000Z",
        "offset": -360
    }
```

Note also that time zone offsets occur on the half hour in some countries. 

### Present a Local TV Schedule
The Rovi Cloud API delivers TV listings data for a television service for the current UTC date or for any UTC date in the next two weeks. The API delivers TV listings in two steps: 1) one call for a list of channels and the data you may need for those channels, and 2) a second call for the corresponding program schedule for each of those channels.

The call for the program schedule always returns data in channel sequence. So channels are uniquely identified by their sequence in the list of channels. If you cache channel details, you can just update schedule data as needed.

Follow these steps to present a local TV schedule:
        
1. Call [data_browse_service](/#reference/tv-schedule/databrowseservice) to display the list of local television services, and allow the user to select a service.
2. If you need to display more detail about the service, grab the `data_service` ID and call [data_service](/#reference/tv-schedule/dataservice).
3. Grab and store the IDs you need:
  - `data_service`  
  - `data_service_channels`  
  - `data_service_schedule`  
4. Grab the time zone offset, used to calculate the local program time. (That offset changes when daylight saving time begins and ends.)
5. Decide on the response size that best meets your needs for delivering a broadcast schedule:
  -  Choose **/screen** for a block of 10 channels per request and 4 hours of data. Use this size to fill a grid schedule for immediate display.
  -  Choose **/single** for a block of 1 channel per request and 24 hours of data. Use this size to present information for a single channel in linear form, instead of a grid.
  -  Choose **/bulk** for a block of 50 channels per request and 6 hours of data. Use this size to fill a local store asynchronously in the background. This size returns a large amount of data and is not intended to be displayed all at once for a waiting user.
5. Request the first page of the channel lineup for the response block size you want:
  - [data_service_channels/bulk](/#reference/tv-schedule/dataservicechannelsbulk)  
  - [data_service_channels/screen](/#reference/tv-schedule/dataservicechannelsscreen) 
  - [data_service_channels/single](/#reference/tv-schedule/dataservicechannelssingle)
6. For each channel, grab the `media_logo` ID and call [media_logo](/#reference/image/medialogo) to return the primary channel logo. Note: Some channel sources do not have logos.
7. To offer other channel detail, grab the `data_source` ID for the channel.
  - Call [data_source](/#reference/tv-schedule/datasource) for all channel details.
  - Call [data_source_logos/best](/#reference/image/datasourcelogosbest) to find a different logo by specifying the logo characteristics you want.  
  - Call [data_source_logos/collection](/#reference/image/datasourcelogoscollection) to find a different logo by looking through information about all available logos for a channel.
8. Best Practice: Cache the channel and source information for the lineup. Typically an app won't need to request channel details more than once a day.
9. Request the first page of the TV listings that correspond to the response block size you selected for the channel lineup:
  - [data_service_schedules/bulk](/#reference/tv-schedule/dataserviceschedulesbulk)
  - [data_service_schedules/screen](/#reference/tv-schedule/dataserviceschedulesscreen)
  - [data_service_schedules/single](/#reference/tv-schedule/dataserviceschedulessingle)
10. Grab relevant data you want for each program:
  - Start and end time (add the time zone offset to calculate local time).  
  - Title or alternate title.  
  - Audio level.  
  - Caption type.
  - Exhibition (live, new, repeat, taped).
  - Type of program (such as movie or series).  
  - Category (News, Movie, Music, Sports, Lifestyle, Children's, Other).
11. To present images in the schedule:
  - If an airing includes a `media_image` ID, call [media_image/sized](/#reference/image/mediaimagesized) to select a sized version of the original image, or [media_image/master](/#reference/image/mediaimagemaster) to use the original image file.
  - If an airing includes a `data_content_images` ID, get the `media_image` ID of the image you want by calling [data_content_images/collection](/#reference/image/datacontentimagescollection) or [data_content_images/best](/#reference/image/datacontentimagesbest).   
12. Grab IDs to provide links or additional data for each program:
  - [data_airing_synopses/best](/#reference/tv-schedule/dataairingsynopses/best) for a synopsis.  
  - [data_airing](/#reference/tv-schedule/dataairing) for links to all information about the movie or program.  
13. Insert that page of TV listings (schedules data) into the corresponding rows (channels) you created from the channel response.
14. Paint that page.
15. Get the next page of channels and schedules data for the same response block size.
16. Repeat for all available channels.

### Present a Regional TV Schedule
Rovi Cloud can deliver TV schedule data for a broadcast source, such as HBO, CBS, and CNBC. These listings do not include channel data, but viewers in a region generally know which channels the major broadcast sources appear on.

Use Rovi Cloud source listings to present TV schedules for an entire time zone. Like local TV listings, source listings are available for the current UTC date and for any UTC date in the next two weeks.

Follow these steps to present TV listings for a time zone:

1. Collect the `data_source` IDs for the broadcast sources you want.
  - Get the `data_service` ID of a major television service in the region by calling [data_browse_service](/#reference/tv-schedule/databrowseservice).
  - Use that `data_service` ID in a [data_service_channels/bulk](/#reference/tv-schedule/dataservicechannelsbulk) request.
  - Collect `data_source` IDs and `media_logo` IDs from the channel list for the broadcast sources you want.
2. For each broadcast source you want, request the schedule and logo.
  - With the `data_source` ID, call [data_source_airings](/#reference/tv-schedule/datasourceairings) to get the schedule.
  - With the `media_logo` ID, call [media_logo](/#reference/image/medialogo) to return the primary logo.
3. Grab relevant data you want for each program in the schedule:
  - Start and end time (add the time zone offset to calculate local time).  
  - Title or alternate title.  
  - Audio level.  
  - Caption type.
  - Exhibition (live, new, repeat, taped).
  - Type of program (such as movie or series).  
  - Category (News, Movie, Music, Sports, Lifestyle, Children's, Other).  
4. Grab IDs to provide links or additional data for each program:
  - [data_airing](/#reference/tv-schedule/dataairing) for links to all information about the movie or program.
  - [data_airing_synopses/best](/#reference/tv-schedule/dataairingsynopsesbest) for a synopsis.
  - [data_airing_credits/cast](/#reference/tv-schedule/dataairingcreditscast) for cast credits.
  - [data_airing_credits/credits](/#reference/tv-schedule/dataairingcreditscast) for all credits.
5. Best Practice: Cache the information. Typically an app won't need to request schedule details more than once a day.
6. Insert the logos and schedule data into a grid or page.
7. Paint the page.

### Present Data About a Program in a Television Schedule
Rovi Cloud offers extensive data and images for programs listed in a television schedule. Add a link for each program in the schedule and provide the content within the schedule or in a popup window or page:

1. Grab the `data_airing` ID for each program in the schedule and provide a link to the [data_airing](/#reference/tv-schedule/dataairing) call for each program.
2. When a user executes a [data_airing](/#reference/tv-schedule/dataairing) link, grab data from the response, plus any IDs for data you want to return:
  - `data_movie`
  - `data_series`
  - `data_episode`
  - `data_other`
  - `data_airing_credits`
  - `data_airing_synopses`
  - `data_content_images`
3. Execute API calls for the additional content you want to display. *Note:* The response language of data_airing requests is determined by the broadcast source. For other requests, the response language can be specified by parameter.
  - [data_movie](/#reference/movie/datamovie)
  - [data_series](/#reference/series/dataseries)
  - [data_episode](/#reference/episode/dataepisode)
  - [data_other](/#reference/other/dataother)
  - [data_airing_credits/cast](/#reference/tv-schedule/dataairingcreditscast)
  - [data_airing_credits/crew](/#reference/tv-schedule/dataairingcreditscrew)
  - [data_airing_credits/credits](/#reference/tv-schedule/dataairingcreditscredits)
  - [data_airing_synopses/best](/#reference/tv-schedule/dataairingsynopsesbest)
  - [data_airing_synopses/collection](/#reference/tv-schedule/dataairingsynopsescollection)
  - [data_content_images/best](/#reference/image/datacontentimagesbest)
  - [data_content_images/collection](/#reference/image/datacontentimagescollection)
4. Paint the content.

## Search
Rovi Cloud Search offers the following capabilities:
- Search titles of movies and TV programs (or just movies, series, or sports shows).
- Browse titles of movies and TV programs in a genre (or just movies, series, or sports shows).
- Search titles of movies and TV programs related to phrases spoken to Rovi's conversational engine.
- Return related results that you can perform additional searches on, such as role, team, genre, award, group, decade, person, etc.

And with Rovi Cloud Search, you can return results that are limited to content appearing on the user's local TV lineup.

Rovi Cloud Search is currently limited to English language queries only, but support for other languages will be added soon.

### Deliver Information About a Movie or TV Program
Search titles of movies, episodes, TV series, sports shows, and other programs, and return information about the user's selection.

1. Present a search box for movies, series, sports shows, or all TV programs&mdash;or an interface to Rovi's conversational engine.
2. Search titles based on the user entry: 
  - To search titles of movies only, call [discover_all_video_by_search/movies](/#reference/search/discoverallvideobysearchmovies).
  - To search titles of TV series only, call [discover_all_video_by_search/series](/#reference/search/discoverallvideobysearchseries).
  - To search titles of sports shows only, call [discover_all_video_by_search/sports](/#reference/search/discoverallvideobysearchsports).
  - To search titles of all TV programs, call [discover_all_video_by_search/content](/#reference/search/discoverallvideobysearchcontent).
  - To search titles through Rovi's conversational engine, call [discover_all_video_by_conversation/content](/#reference/search/discoverallvideobyconversationcontent).
3. Grab the ID from a user selection:
  - `data_series`
  - `data_episode`
  - `data_movie`
  - `data_other`
4. Present information about a selection with one of these calls:
  - [data_series](/#reference/series/dataseries)
  - [data_episode](/#reference/episode/dataepisode)
  - [data_movie](/#reference/movie/datamovie)
  - [data_other](/#reference/other/dataother)

### Search in Upcoming Local TV Shows
Return only search results that are appearing soon on the user's local television lineup. These calls require the service ID of the user's television service, which is returned when you set up the user's television schedule.

1. Present a search box for movies, series, sports shows, or all TV programs&mdash;or an interface to Rovi's conversational engine.
2. Search titles based on the user entry:
  - To search titles of movies only, call [discover_available_video_by_search/movies](/#reference/search/discoveravailablevideobysearchmovies).
  - To search titles of TV series only, call [discover_available_video_by_search/series](/#reference/search/discoveravailablevideobysearchseries).
  - To search titles of sports shows only, call [discover_available_video_by_search/sports](/#reference/search/discoveravailablevideobysearchsports).
  - To search titles of all TV programs, call [discover_available_video_by_search/content](/#reference/search/discoveravailablevideobysearchcontent).
  - To search titles through Rovi's conversational engine, call [discover_available_video_by_conversation/content](/#reference/search/discoveravailablevideobyconversationcontent).
3. Present the results with the broadcast times.
4. To return an additional broadcast schedule for a show, start by grabbing the ID for the show from a user selection:
  - `data_series`
  - `data_episode`
  - `data_movie`
  - `data_other`
5. Consider presenting information about the show with the corresponding call:
  - [data_series](/#reference/series/dataseries)
  - [data_episode](/#reference/episode/dataepisode)
  - [data_movie](/#reference/movie/datamovie)
  - [data_other](/#reference/other/dataother)
6. Call the corresponding data_xxxxx_appearances request to get the local schedule for that show.
  - [data_series_appearances](/#reference/tv-schedule/dataseriesappearances)
  - [data_episode_appearances](/#reference/tv-schedule/dataepisodeappearances)
  - [data_movie_appearances](/#reference/tv-schedule/datamovieappearances)
  - [data_other_appearances](/#reference/tv-schedule/dataotherappearances)
7. Paint the content.

### Return Information About Movies and TV Programs in a Genre
Rovi Cloud can return a list of movies and TV shows within a genre, starting with most popular and representative of that genre. 

1. Make the appropriate API call:
  - [discover_all_video_by_genre/content](/#reference/search/discoverallvideobygenrecontent)
  - [discover_all_video_by_genre/movies](/#reference/search/discoverallvideobygenremovies)
  - [discover_all_video_by_genre/series](/#reference/search/discoverallvideobygenreseries)
  - [discover_all_video_by_genre/sports](/#reference/search/discoverallvideobygenresports)
2. Grab the ID you can use to return data about a program the user selects:
  - `data_series`
  - `data_episode`
  - `data_movie`
  - `data_other`
3. Collect information about the program with the corresponding call:
  - [data_series](/#reference/series/dataseries)
  - [data_episode](/#reference/episode/dataepisode)
  - [data_movie](/#reference/movie/datamovie)
  - [data_other](/#reference/other/dataother)
4. Paint the content.

### Return Upcoming Local TV Show Titles in a Genre
Rovi Cloud can return a list of programs within a genre that are appearing soon on a user's local TV lineup. These calls require the service ID of the user's television service, which is returned when you set up the user's television schedule.

1. Make the appropriate API call:
  - [discover_available_video_by_genre/content](/#reference/genre/discoveravailablevideobygenrecontent)
  - [discover_available_video_by_genre/movies](/#reference/genre/discoveravailablevideobygenremovies)
  - [discover_available_video_by_genre/series](/#reference/genre/discoveravailablevideobygenreseries)
  - [discover_available_video_by_genre/sports](/#reference/genre/discoveravailablevideobygenresports)
2. Present the results with the broadcast times.
3. To return an additional broadcast schedule for a show, start by grabbing the ID for the show from a user selection:
  - `data_series`
  - `data_episode`
  - `data_movie`
  - `data_other`
4. Consider collecting and present information about the program with the corresponding call:
  - [data_series](/#reference/series/dataseries)
  - [data_episode](/#reference/episode/dataepisode)
  - [data_movie](/#reference/movie/datamovie)
  - [data_other](/#reference/other/dataother)
5. Return a schedule for the program with the corresponding call: 
  - [data_series_appearances](/#reference/tv-schedule/dataseriesappearances)
  - [data_episode_appearances](/#reference/tv-schedule/dataepisodeappearances)
  - [data_movie_appearances](/#reference/tv-schedule/datamovieappearances)
  - [data_other_appearances](/#reference/tv-schedule/dataotherappearances)
6. Paint the content.

##  Recommendations
The Recommendations set of requests returns recommended titles of movies and TV shows based three different criteria:
-  Trending content
-  Recommended content
-  Similarity to a customer favorite

### Provide Titles of Trending Movies and TV Programs
Rovi Cloud can return titles of movies and TV programs that are trending now.

1. Make the appropriate API call:
  - [discover_all_trending_video/content](/#reference/recommendations/discoveralltrendingvideocontent)
  - [discover_all_trending_video/movies](/#reference/recommendations/discoveralltrendingvideomovies)
  - [discover_all_trending_video/series](/#reference/recommendations/discoveralltrendingvideoseries)
  - [discover_all_trending_video/sports](/#reference/recommendations/discoveralltrendingvideosports)
2. Grab the ID you can use to return data about a program the user selects:
  - `data_series`
  - `data_episode`
  - `data_movie`
  - `data_other`
3. Collect information about the program with the corresponding call:
  - [data_series](/#reference/series/dataseries)
  - [data_episode](/#reference/episode/dataepisode)
  - [data_movie](/#reference/movie/datamovie)
  - [data_other](/#reference/other/dataother)
4. Paint the content.

### Recommend Upcoming Local TV Shows
Rovi Cloud can recommend programs that are appearing soon on a user's local TV lineup. These calls require the service ID of the user's television service, which is returned when you set up the user's television schedule.

1. Make the appropriate API call:
  - [discover_available_watchable_video/content](/#reference/recommendations/discoveravailablewatchablevideocontent)
  - [discover_available_watchable_video/movies] (/#reference/recommendations/discoveravailablewatchablevideomovies)
  - [discover_available_watchable_video/series] (/#reference/recommendations/discoveravailablewatchablevideoseries)
  - [discover_available_watchable_video/sports] (/#reference/recommendations/discoveravailablewatchablevideosports)
2. Present the results with the broadcast times.
3. To return an additional broadcast schedule for a show, start by grabbing the ID for the show from a user selection:
  - `data_series`
  - `data_episode`
  - `data_movie`
  - `data_other`
4. Consider collecting and present information about the program with the corresponding call:
  - [data_series](/#reference/series/dataseries)
  - [data_episode](/#reference/episode/dataepisode)
  - [data_movie](/#reference/movie/datamovie)
  - [data_other](/#reference/other/dataother)
5. Return a schedule for the program with the corresponding call: 
  - [data_series_appearances](/#reference/tv-schedule/dataseriesappearances)
  - [data_episode_appearances](/#reference/tv-schedule/dataepisodeappearances)
  - [data_movie_appearances](/#reference/tv-schedule/datamovieappearances)
  - [data_other_appearances](/#reference/tv-schedule/dataotherappearances)
6. Paint the content.

### Recommend Movies and TV Programs Based on Similarity to a User Favorite
Rovi Cloud can provide movie and TV program recommendations based on similarity to a user favorite.

1. When a response returns an ID for a movie, TV series, episode, or other program, offer to find shows that are similar.
2. Call [discover_all_similar_video/content](/#reference/recommendations/discoverallsimilarvideocontent).
3. Grab the ID from a user selection:
  - `data_series`
  - `data_episode`
  - `data_movie`
  - `data_other`
4. Collect information about the movie or program with the corresponding call:
  - [data_series](/#reference/series/dataseries)
  - [data_episode](/#reference/episode/dataepisode)
  - [data_movie](/#reference/movie/datamovie)
  - [data_other](/#reference/other/dataother)
5. Paint the content.

### Recommend Upcoming Local TV Programs Based on Similarity to a User Favorite
Rovi Cloud can provide local TV program recommendations based on similarity to a user favorite. These calls require the service ID of the user's television service, which is returned when you set up the user's television schedule.

1. When a response returns an ID for a movie, TV series, episode, or other program, offer to find shows that are similar.
2. Call [discover_available_similar_video/content](/#reference/recommendations/discoveravailablesimilarvideocontent).
3. Present the results with the broadcast times.
4. To return an additional broadcast schedule for a show, start by grabbing the ID for the show from a user selection:
  - `data_series`
  - `data_episode`
  - `data_movie`
  - `data_other`
5. Consider presenting information about the show with the corresponding call:
  - [data_series](/#reference/series/dataseries)
  - [data_episode](/#reference/episode/dataepisode)
  - [data_movie](/#reference/movie/datamovie)
  - [data_other](/#reference/other/dataother)
6. To return a schedule for the program, call: 
  - [data_series_appearances](/#reference/tv-schedule/dataseriesappearances)
  - [data_episode_appearances](/#reference/tv-schedule/dataepisodeappearances)
  - [data_movie_appearances](/#reference/tv-schedule/datamovieappearances)
  - [data_other_appearances](/#reference/tv-schedule/dataotherappearances)
7. Paint the content.

## Movies
When an API call returns a `data_movie` ID, you can offer data and images for the movie.

1. Call [data_movie](/#reference/movie/datamovie).
2. Grab data you want to display:
  - title
  - genres
  - subgenres
  - runtime
  - movie type
  - release year
3. Use the `media_image` ID to present a recommended image for the movie:
  - To use the original image file, call [media_image/master](/#reference/image/mediaimagemaster).   
  - To select a sized version of the original image, call [media_image/sized](/#reference/image/mediaimagesized).
  - Or, to select other images, use the `data_content_images` ID and call [data_content_images/collection](/#reference/image/datacontentimagescollection) or [data_content_images/best](/#reference/image/datacontentimagesbest).
4. Using the `data_movie` ID, execute API calls for the data you want to return about the movie.
  - [data_movie_awards](/#reference/awards/datamovieawards)
  - [data_movie_aired](/#reference/movie/datamovieaired)
  - [data_movie_credits/cast](/#reference/movie/datamoviecreditscast)
  - [data_movie_credits/crew](/#reference/movie/datamoviecreditscrew)
  - [data_movie_credits/credits](/#reference/movie/datamoviecreditscredits)
  - [data_movie_ratings](/#reference/movie/datamovieratings)
  - [data_movie_related](/#reference/movie/datamovierelated)
  - [data_movie_releases](/#reference/movie/datamoviereleases)
  - [data_movie_review](/#reference/movie/datamoviereview)
  - [data_movie_synopses/best](/#reference/movie/datamoviesynopsesbest)
  - [data_movie_synopses/collection](/#reference/movie/datamoviesynopsescollection)
  - [data_movie_theatricals](/#reference/movie/datamovietheatricals)
  - [data_content_images/best](/#reference/image/datacontentimagesbest)
  - [data_content_images/collection](/#reference/image/datacontentimagescollection)
5. Paint the content.

If you cache movie data, update your cache every day or so with recent data changes. We currently return IDs for changed movie data for the following request:

| For&nbsp;Data Changes&nbsp;To&nbsp;.&nbsp;.&nbsp;.&nbsp;  | Call&nbsp;.&nbsp;.&nbsp;.  |
| --------------------- | --------------------------- |
| `data_movie`          | `data_delta_movie`          |

## TV Series
When an API call returns a `data_series` ID, you can offer data and images for the series.

1. Call [data_series](/#reference/series/dataseries).
2. Grab data you want to display:
  - title
  - synopsis
  - network
  - start and end years
  - if miniseries
  - if syndicated
3. Use the `media_image` ID to present a recommended image for the series:
  - To use the original image file, call [media_image/master](/#reference/image/mediaimagemaster).   
  - To select a sized version of the original image, call [media_image/sized](/#reference/image/mediaimagesized).
  - Or, to select other images, use the `data_content_images` ID and call [data_content_images/collection](/#reference/image/datacontentimagescollection) or [data_content_images/best](/#reference/image/datacontentimagesbest).
4. Using the `data_series` ID, execute API calls for the data you want to return about the series.
  - [data_series_awards](/#reference/awards/dataseriesawards)
  - [data_series_credits/cast](/#reference/series/dataseriescreditscast)
  - [data_series_credits/crew](/#reference/series/dataseriescreditscrew)
  - [data_series_credits/credits](/#reference/series/dataseriescreditscredits)
  - [data_series_history](/#reference/series/dataserieshistory)
  - [data_series_ratings](/#reference/series/dataseriesratings)
  - [data_series_specials](/#reference/series/dataseriesspecials)
  - [data_series_synopses/best](/#reference/series/dataseriessynopses/best)
  - [data_series_synopses/collection](/#reference/series/dataseriessynopsescollection)
  - [data_series_seasons](/#reference/series/dataseriesseasons)
  - [data_content_images/best](/#reference/image/datacontentimagesbest)
  - [data_content_images/collection](/#reference/image/datacontentimagescollection)
5. Paint the content.

If you cache TV series data, update your cache every day or so with recent data changes. We currently return IDs for changed TV series data for the following request:

| For&nbsp;Data Changes&nbsp;To&nbsp;.&nbsp;.&nbsp;.&nbsp;  | Call&nbsp;.&nbsp;.&nbsp;.  |
| ---------------------- | ---------------------------- |
| `data_series`          | `data_delta_series`          |

## Seasons
When an API call returns a `data_season` ID, you can offer data and images for the series season.

1. Call [data_season](/#reference/season/dataseason).
2. Grab data you want to display.
3. Using the `data_season` ID, execute API calls for the data you want to return about the season.
  - [data_season_episodes](/#reference/season/dataseasonepisodes)
  - [data_season_synopses/best](/#reference/season/dataseasonsynopsesbest)
  - [data_season_synopses/collection](/#reference/season/dataseasonsynopsescollection)
  - [data_content_images/best](/#reference/image/datacontentimagesbest)
  - [data_content_images/collection](/#reference/image/datacontentimagescollection)
4. Paint the content.

If you cache TV season data, update your cache every day or so with recent data changes. We currently return IDs for changed TV season data for the following request:

| For&nbsp;Data Changes&nbsp;To&nbsp;.&nbsp;.&nbsp;.&nbsp;  | Call&nbsp;.&nbsp;.&nbsp;.  |
| ---------------------- | ---------------------------- |
| `data_season`          | `data_delta_season`          |

## Episodes
When an API call returns a `data_episode` ID, you can offer data about the episode.

1. Call [data_episode](/#reference/episode/dataepisode).
2. Grab data you want to display.
3. Use the `media_image` ID to present a recommended image for the episode:
  - To use the original image file, call [media_image/master](/#reference/image/mediaimagemaster).   
  - To select a sized version of the original image, call [media_image/sized](/#reference/image/mediaimagesized).
  - Or, to select other images, use the `data_content_images` ID and call [data_content_images/collection](/#reference/image/datacontentimagescollection) or [data_content_images/best](/#reference/image/datacontentimagesbest).
4. Using the `data_episode` ID, execute API calls for the data you want to return about the episode:
  - [data_episode](/#reference/episode/dataepisode)
  - [data_episode_aired](/#reference/episode/dataepisodeaired)
  - [data_episode_credits/cast](/#reference/episode/dataepisodecreditscast)
  - [data_episode_credits/crew](/#reference/episode/dataepisodecreditscrew)
  - [data_episode_credits/credits](/#reference/episode/dataepisodecreditscredits)
  - [data_episode_ratings](/#reference/episode/dataepisoderatings)
  - [data_episode_releases](/#reference/episode/dataepisodereleases)
  - [data_episode_synopses/best](/#reference/episode/dataepisodesynopsesbest)
  - [data_episode_synopses/collection](/#reference/episode/dataepisodesynopsescollection)
  - [data_content_images/best](/#reference/image/datacontentimagesbest)
  - [data_content_images/collection](/#reference/image/datacontentimagescollection)
5. Paint the content.

If you cache episode data, update your cache every day or so with recent data changes. We currently return IDs for changed episode data for the following request:

| For&nbsp;Data Changes&nbsp;To&nbsp;.&nbsp;.&nbsp;.&nbsp;  | Call&nbsp;.&nbsp;.&nbsp;.  |
| ----------------------- | ----------------------------- |
| `data_episode`          | `data_delta_episode`          |

## Other
When an API call returns a `data_other` ID for a program that is not a movie or series, you can offer data and images for the program.

1. Call [data_other](/#reference/other/dataother).
2. Grab data you want to display:
  - title
  - genre
  - runtime
  - year released
  - audio properties
  - video properties
3. Use the `media_image` ID to present a recommended image for the program:
  - To use the original image file, call [media_image/master](/#reference/image/mediaimagemaster).   
  - To select a sized version of the original image, call [media_image/sized](/#reference/image/mediaimagesized).
  - Or, to select other images, use the `data_content_images` ID and call [data_content_images/collection](/#reference/image/datacontentimagescollection) or [data_content_images/best](/#reference/image/datacontentimagesbest).
4. Using the `data_other` ID, execute API calls for the data you want to return about the program:
  - [data_other_awards](/#reference/awards/dataotherawards)
  - [data_other_aired](/#reference/awards/dataotheraired)
  - [data_other_credits/cast](/#reference/other/dataothercreditscast)
  - [data_other_credits/crew](/#reference/other/dataothercreditscrew)
  - [data_other_credits/credits](/#reference/other/dataothercreditscredits)
  - [data_other_ratings](/#reference/other/dataotherratings)
  - [data_other_related](/#reference/other/dataotherrelated)
  - [data_other_releases](/#reference/other/dataotherreleases)
  - [data_other_synopses/best](/#reference/other/dataothersynopsesbest)
  - [data_other_synopses/collection](/#reference/other/dataothersynopsescollection)
  - [data_other_theatricals](/#reference/other/dataothertheatricals)
  - [data_content_images/best](/#reference/image/datacontentimagesbest)
  - [data_content_images/collection](/#reference/image/datacontentimagescollection)
5. Paint the content.

If you cache other program data, update your cache every day or so with recent data changes. We currently return IDs for changed other program data for the following request:

| For&nbsp;Data Changes&nbsp;To&nbsp;.&nbsp;.&nbsp;.&nbsp; | Call&nbsp;.&nbsp;.&nbsp;.  |
| --------------------- | --------------------------- |
| `data_other`          | `data_delta_other`          |

## Release
Movies, episodes, or other shows may be released in many versions, with each release differing in title, content, or language. Rovi Cloud provides information about releases.

To present information about a release, follow these steps:

1. Present the releases of the show by using the ID of the show in one of the following requests:
  - [data_movie_releases](/#reference/movie/datamoviereleases)
  - [data_episode_releases](/#reference/episode/dataepisodereleases)
  - [data_other_releases](/#reference/other/dataotherreleases)
2. Get the `data_release` ID for the release the user wants information about.
3. Using the `data_release` ID, execute API calls for the data you want to return about a release:
  - [data_release](/#reference/release/datarelease)
  - [data_release_aired](/#reference/release/datareleaseaired)
  - [data_release_credits/cast](/#reference/release/datareleasecreditscast)
  - [data_release_credits/crew](/#reference/release/datareleasecreditscrew)
  - [data_release_credits/credits](/#reference/release/datareleasecreditscredits)
  - [data_release_ratings](/#reference/release/datareleaseratings)
  - [data_release_synopses/best](/#reference/release/datareleasesynopsesbest)
  - [data_release_synopses/collection](/#reference/release/datareleasesynopsescollection)
  - [data_release_theatricals](/#reference/release/datareleasetheatricals)
4. Use the `media_image` IDs in the responses to present a recommended image:
  - To use the original image file, call [media_image/master](/#reference/image/mediaimagemaster).   
  - To select a sized version of the original image, call [media_image/sized](/#reference/image/mediaimagesized).
  - Or, to select other images, use the `data_release_images` ID and call [data_release_images/collection](/#reference/image/datareleaseimagescollection) or [data_release_images/best](/#reference/image/datareleaseimagesbest).
5. Grab data you want to display and paint the content.

## Person
When an API call returns a `data_person` ID, you can offer data and images about the person.

Images include premium celebrity images if your subscription allows access to those images.

1. Call [data_person](/#reference/person/dataperson).
2. Grab data you want to display.
3. Use the `media_image` ID to present a recommended image for the person:
  - To use the original image file, call [media_image/master](/#reference/image/mediaimagemaster).   
  - To select a sized version of the original image, call [media_image/sized](/#reference/image/mediaimagesized).
  - Or, to select other images, use the `data_name_images` ID and call [data_name_images/collection](/#reference/image/datanameimagescollection) or [data_name_images/best](/#reference/image/datanameimagesbest).
4. Using the `data_person` ID, execute API calls for the data you want to return about the person:
  - [data_person_awards](/#reference/awards/datapersonawards)
  - [data_person_bios](/#reference/person/datapersonbios)
  - [data_person_filmography](/#reference/person/datapersonfilmography)
  - [data_person_relatives](/#reference/person/datapersonrelatives)
  - [data_name_images/best](/#reference/image/datanameimagesbest) (in the Image section)
  - [data_name_images/collection](/#reference/image/datanameimagescollection) (in the Image section)
5. Paint the content.

If you cache person data, update your cache every day or so with recent data changes. We currently return IDs for changed person data for the following request:

| For&nbsp;Data Changes&nbsp;To&nbsp;.&nbsp;.&nbsp;.&nbsp; | Call&nbsp;.&nbsp;.&nbsp;.  |
| ------------------------- | ------------------------------- |
| `data_person`             | `data_delta_person`             |

## Return-Path Data
The Rovi Return-Path Data API lets you send clickstream data about TV viewer behavior to the Rovi Content Data Warehouse (CDW). The CDW is uniquely designed to handle clickstream events and TV viewership data and, as such, is designed to make available reliable, usable data through the Rovi Operator Insights portal.

The Return-Path Data API offers a single request that reports a variety of user actions.

## Remote Access
Rovi Remote Access enables cable companies to give subscribers remote access to their DVRs. Using an application on a tablet, computer, and smartphone, cable subscribers can discover shows, see their channel lineup, and program their i-Guideâ„¢ or PassportÂ® Guide DVRs.

With Rovi Remote Access, the home DVR is available anywhere.

Rovi Remote Access is small API that offers two different configurations, one for manual registration of subscriber set-top boxes and one for auto registration. A cable company can choose to implement one or the other.
- Manual Registration requires the user to register a set-top box from the set-top box menu.
- Auto Registration registers all set-top boxes in a household automatically and offers many benefits not otherwise available.

Implementation of a Remote Access application requires additional documentation beyond the scope of the API documentation provided here. Contact your Rovi sales representative.

# Terms of Use

By using our API you agree to our Terms of Use. You can read it [_here_](https://developers.rovicorp.com/termsofuse/).

# Try Out Our APIs
Want to see our API calls in action before you sign up? You can try out our calls here in the API Console, right from the Reference section.

1. Read the steps below and, at the last step, click the link and try it out yourself.
2. Select an API call from the Reference section.
3. On the description of the API, click **GET** as shown here:

    <img src="https://dev-widgetads.rovicorp.com/AdGraphics/Try1Get.png" alt="Click GET." width="600">
       
4. Then, on the right panel, scroll down (if necessary) and then click **Try**.

    <img src="https://dev-widgetads.rovicorp.com/AdGraphics/Try2Try.png" alt="Click Try." width="600">

5. Then, on the right panel, click **Call Resource**.

    <img src="https://dev-widgetads.rovicorp.com/AdGraphics/Try3CallResource.png" alt="Click Call Resource." width="600">

6. Then scroll down to see the API response.

7. Try other parameter values for additional results. 
  - Increment the page number to get the next page of 10 channels.
  - Try another 'data_service' ID, such as 539968338 (France Satellite).
8. Now [click here to jump to that API call and try it out yourself](/#reference/tv-schedule/dataservicechannelsscreen).

# Getting Started
Developing with Rovi Cloud is pretty simple, really, but you should already understand the following:

- The basic concepts of  HTTP, REST, and JSON.
- How to compose HTTP requests and parse JSON responses.
- The development environment and language you are using.

To receive data from Rovi Cloud, your website or application sends HTTP requests to the Rovi API server. The API server responds with the data in standard JSON format. 

For faster, easier application development, Rovi Cloud offers URI templates to specify API calls. A URI template is a simple specification of an API call that identifies parameters to be substituted before executing the call. The specification adheres to Internet standard [_URI Template_](http://tools.ietf.org/html/rfc6570).

Here is an example of a URI template; notice that the named variables in curly brackets are parameters to be replaced:

    http://cloud.rovicorp.com/data/2/2/movie/{id}/ratings;country={country}
    
To turn a URI template into an API request, your application replaces the named variables in the template with percent-encoded values or empty values, according to the specification for the API request. At that point, the URI template, which might look like this, is an API request:

    http://cloud.rovicorp.com/data/2/2/movie/914806985/ratings;country=US
    
More detail about developing with templates is described below in the section [Developing With URI Templates](http://docs.rovicloudapi.apiary.io/#introduction/getting-started/developing-with-uri-templates?console=1).

#### Your Templates File
The templates you are authorized to use are contained in your templates file, in JSON format. Your application downloads your templates file and uses the URI templates there to render API requests.

You should hard code the URL to your templates file and download it at application start, or once a day, depending on your implementation. If the file hasn't changed, the template server returns a status code 304.

The URL to your templates file is the only hard-coded URL in your Rovi Cloud application. All other requests to Rovi Cloud are rendered from the URI templates in the templates file.

The URL to your templates file is constructed like this:

    http://cloud.rovicorp.com/template/v1/(YourConsumerKey)/(YourFileVersion)/templates.json
    
That URL contains two important segments you should know about:

| Segment                 | Description  |
| ----------------------- | ------------ |
| Your Consumer&nbsp;Key  | When you register and log into your account, you can see your Consumer Key by clicking My Account -> Entitlements. Your Consumer Key, also known as your API key, is a public key that identifies your API requests. Provided with that key is a Consumer Secret Key, which you use to calculate authentication values. You should never transmit or reveal your Consumer Secret Key. |
| Your File&nbsp;Version number | Your templates file version is an integer, which is /1/ when you first sign up. This is the version number you pay attention to, not a Rovi Cloud version number. When an API upgrade changes the templates you are using, you are invited to upgrade your applications to your version /2/ templates file. You can upgrade at that time or, unless the update is critical, wait until a later version to upgrade. For more detail about version upgrades, see the section below titled "Templates File Version Upgrades." |

When you look at your templates file, you notice pairs and arrays of JSON name/value strings. For example, the following name/value pair shows the template name "data_movie_ratings" followed by the value, which is the URI template:

    "data_movie_ratings": "http://cloud.rovicorp.com/data/2/2/lookup/movie/{id}/ratings;country={country}"

So, to get the data_movie_ratings URI template, your application searches the file for the name "data_movie_ratings" and then grabs and uses the value, which is the URI template.

And here's a sample array of name/value strings you might find in the file:

    "media_image": {
        "master": "http://cloud.rovicorp.com/media/v1/source/{id}",
        "sized": "http://cloud.rovicorp.com/media/v1/image/{zoom}/{size}/{aspect}/{id}.jpg"
    }

Here your application searches for "media_image", then searches for either "master" or "sized", and then grabs the associated string value and uses that to render the API request.

The following is a sample of the first few lines of a templates file, if formatted for readability. Note that before the list of templates is a URL for a schema. Use that URL to access your custom documentation, as described in the next section.

    {
        "schema": "http://cloud.rovicorp.com/api/v1/137a4c38b79bc30fdea92589cf6ac35c4f041bc33bc801685175/1/api.raml",
        "templates": {
            "data_movie_ratings": "http://cloud.rovicorp.com/data/2/2/lookup/movie/{id}/ratings;country={country}",
            "media_image": {
                "master": "http://cloud.rovicorp.com/media/v1/source/{id}",
                "sized": "http://cloud.rovicorp.com/media/v1/image/{zoom}/{size}/{aspect}/{id}.jpg"
                }
            }
        }
    }

#### Your Custom Documentation
Rovi Cloud provides documentation tailored specifically to the templates in your templates file. Unlike the public Rovi Cloud documentation, your custom documentation covers only the API requests you are authorized to make.

Your custom documentation is provided in a RAML file &mdash; a human-readable text file that can also be displayed in a RAML viewer.

To view your custom documentation as a text file, download the file using the link in your templates file associated with "schema."

To view your custom documentation in a RAML viewer, grab the link in your templates file associated with "schema" and append it to this link:

    http://cloud.rovicorp.com/api/v1/apiconsole.html?raml=

Then execute that link in a Chrome or Firefox Web browser.

## Developing With URI Templates

As mentioned above, you should use your templates file as a component of your application. How do you do that? And why?

#### The Big Picture

Above, you learned that, to make API calls to Rovi Cloud, your application needs to do the following:
- Download your templates file at application start, or once a day, depending on implementation.
- Then, for each API request:
  - Search your templates file for the template name of that API request, or for the template array name and then the template name.
  - Grab the associated string value, which is the URI template.
  - Substitute percent-encoded values or empty values for the named variables.

Then what? And why not just hard-code the URI template?

To answer the first question, once you replace those named variables with percent-encoded values (or empty values), the URI template IS a URL. It becomes a ready-to-be-executed API call. You can then add an HTTP 1.1 Authorization header as described below in [Authorizing Your Requests](http://docs.rovicloudapi.apiary.io/#introduction/getting-started/authorizing-your-requests?console=1) and execute the request. 

Now, how about why? Why not just hard-code those URLs? Or why not hard-code those URI templates?

Think about what's involved in URL construction and all of the things that go wrong over time. First, there's the learning curve, learning the structure and syntax of each call. Then as the API evolves, it requires another learning curve and an update of every application that uses the API. And when the version is about to expire, well, your other priorities have to wait.

By always copying your templates from your templates file, you always have API calls that work. Just have your app download your templates file every day or during startup. You can forget about the fine points of URI construction.

There are other benefits, as well. We can dynamically generate a different route path pattern to avoid problems. Or to deliver a faster response. Or to deliver custom API calls. And we can add named variables to improve a request (which does not break your current API request). So, not only are URI templates easier on you, they give us the flexibility to deliver a better service.

We count on your application using the latest URI templates available for the version you are on.

#### The Step-By-Step Procedure to Using URI Templates

If you haven't signed up for a data subscription yet, check out the sample templates file in the Reference section titled [Templates File](http://docs.rovicloudapi.apiary.io/#reference/templates-file).

Here are some guidelines for developing with URI templates.

1. Get familiar with our APIs by looking through the documentation here in the API Console.
  - Look through the section [About Our APIs](http://docs.rovicloudapi.apiary.io/#introduction/about-our-apis) to learn what the APIs do and the sequence in which they should be called.
  - For each call you want to use, study the documentation for that call in the Reference section.
2. Download your templates file at application start or once a day, depending upon your implementation.  As described above, we may generate nonbreaking changes to templates (but not to template names) at any time. The previous syntax will no longer function after a grace period, typically 30 days.
  - The templates service sends a 304 if the templates file has not changed since the last download.
  - Save a copy of the templates file to use in case the template service becomes momentarily unavailable.
3. Parse the JSON and keep it as an internal map. Use it to look up template names.

    You can parse the templates file using any open source JSON parser. 

4. Search for the template you want. For example, to return information about a movie, search for the name of the template: `data_movie`.

    `"data_movie": "http://cloud.rovicorp.com/data/2/2/lookup/movie.(*,moods,tones,themes,keywords,aesthetics,audiences,periods,characters,importance,flags,rottenTomatoes,facebooks,twitters)/{id}?in={in},{in2},{in3}"`
    
5. Copy the template:

    `http://cloud.rovicorp.com/data/2/2/lookup/movie.(*,moods,tones,themes,keywords,aesthetics,audiences,periods,characters,importance,flags,rottenTomatoes,facebooks,twitters)/{id}?in={in},{in2},{in3}`

6. Use an open source library that performs URI Template Level 1 substitution (the minimum level). A good list of libraries can be found [_here_](https://code.google.com/p/uri-templates/wiki/Implementations).
7. Have the library (or your application) substitute values for the parameters, percent encoding each value before substitution.
  - For details about percent encoding parameter values, see the section [Percent Encoding Parameter Values](#introduction/getting-started/percent-encoding-parameter-values).
  - Do not percent encode values for test calls you make here in the API Console. The API Console does that for you.
  - If you omit a value of an optional parameter, replace it with an empty value. Do not delete commas or otherwise alter the structure of the template. For example, after filling in the ID and only one of the three optional values, the rendered URL for the data_movie template would be:
        `http://cloud.rovicorp.com/data/2/2/lookup/movie.(*,moods,tones,themes,keywords,aesthetics,audiences,periods,characters,importance,flags,rottenTomatoes,facebooks,twitters)/914806985?in=en-US,,`
  - Look for additional optional parameters in a loop and replace them with empty values. We may add optional parameters to templates in the current version of your templates file. Note these as resources for further application development.
8. Construct an Authorization header that provides OAuth 1.0a credentials. For details, including recommendations of open source libraries that support OAuth1.0a, see the section [Authorizing Your Requests](#introduction/getting-started/authorizing-your-requests).
9. Make the call. Here's the response for our sample call.

    ```json
        {
          "ref": {
            "id": 914806985,
            "me": "data_movie",
            "children": [
              "data_movie_aired",
              "data_movie_awards",
              "data_movie_credits",
              "data_movie_ratings",
              "data_movie_review",
              "data_movie_related",
              "data_movie_releases",
              "data_movie_synopses",
              "data_movie_theatricals",
              "data_content_images"
            ]
          },
          "market": [
            "AL",
            "AU",
            "HK",
            "IN",
            "MY",
            "PH",
            "SG",
            "TW"
          ],
          "in": "en",
          "title": "Kung Fu Panda",
          "alts": {
            "short15": "Kung Fu Panda",
            "short30": "Kung Fu Panda",
            "short8": "KF Panda",
            "short50": "Kung Fu Panda"
          },
          "image": {
            "ref": {
              "id": 172343928,
              "me": "media_image"
            },
            "zoom": "framed",
            "type": "poster"
          },
          "year": 2008,
          "runtime": 5520,
          "spoken": [
            "en"
          ],
          "countries": [
            "US"
          ],
          "category": "Movie",
          "genres": [
            "martial arts",
            "family",
            "animated",
            "comedy"
          ],
          "subGenres": [
            "Martial Arts",
            "Family-Oriented Comedy"
          ],
          "moods": [
            "Young and Old Alike",
            "Just for Fun"
          ],
          "tones": [
            "Whimsical",
            "Heartwarming",
            "Bright",
            "Warm"
          ],
          "themes": [
            "Chosen One",
            "Unlikely Heroes"
          ],
          "keywords": [
            "monkey",
            "laziness",
            "pandas",
            "Kung-Fu",
            "leopard"
          ],
          "flags": [
            "Violence"
          ],
          "rottenTomatoes": {
            "critic": {
              "score": 87,
              "count": 178,
              "freshness": "certified",
              "uri": "http://www.actual-url-concealed.com"
            },
            "fan": {
              "score": 82,
              "count": 88617,
              "uri": "http://www.actual-url-concealed.com"
            }
          },
          "facebooks": [
            {
              "facebookId": 880143254,
              "type": "additional",
              "uri": "http://www.actual-url-concealed.com"
            }
          ]
        }
    ```

10. Parse the response and grab the data you want to display. 

    Note that the __ref__ object presents names of templates that offer additional information.
    
11. Ignore unexpected fields in the response.

    We may add new fields to responses. Note these as resources for further application development.

12. Present links to information offered by the __ref__ object&mdash;or just make any of the calls and present the information.
  - If you want cast information, for example, you pick the call "data_movie_credits" and then pick which of the templates you want:
    - [cast](/#reference/movie/datamoviecreditscast)
    - [crew](/#reference/movie/datamoviecreditscrew)
    - [credits](/#reference/movie/datamoviecreditscredits)      
  - Then render the URL and make the call.

13. For each call you make, repeat the sequence:
  - Find the template by name.
  - Copy the template.
  - Fill in values for required and optional parameters, leaving empty values empty.
  - Construct an OAuth 1.0a Authorization header.
  - Make the call.
  - Parse the response and present the information.
  - From IDs in that response, present links to that information or pick a template by name and repeat the sequence.

#### Templates File Version Upgrades
One of the benefits of developing with templates is that the only Rovi Cloud version number you are concerned with is the version number of your templates file. That number is the integer in the next-to-last path segment in the file link, which is the /1/ in the link to your first templates file, like this:

    http://cloud.rovicorp.com/template/v1/(YourConsumerKey)/1/templates.json

Each upgrade to your templates file increases the version number by one, so the /1/ becomes /2/ and then /3/ and so on. A version upgrade just indicates a breaking change, not whether the improvement is small or large.

If an upgrade does not change features you are using, you may choose to wait until a later version to upgrade. We might, however, ask you to upgrade for a critical change, such as for a security issue. The length of time you have to upgrade in such circumstances is specified in your contract with Rovi.

Before you upgrade, you can check out the changes in the new version and test them in the API Console. Log into your account and download the new version of your template as follows:

1. Log into your account.
2. Select __My Account__ and then select __Templates__.
3. Select the version you want to download.
4. Click __Download__. 

After you upgrade and when no applications are calling a previous version, we may choose to end support for that version.

## Percent Encoding Parameter Values

Unlike the API requests you try out here in the API Console, your application must percent encode all parameter values it substitutes into API templates. That includes parameter values that are returned by a previous API request, such as value returned by a Search request that can now be used to return the next page of results.

The API Console takes care of percent encoding for you.

Failure to percent encode template arguments results in a 401 error, an authorization error, because that changes the semantics of the URL.

At the same time, your application must not modify characters in the template in any way. You just provide percent encoded or empty values for all of the bracketed parameters in the template.

The URL encoding function in your client library should work just fine for parameter values. But libraries vary somewhat, and offer optional settings, so the rules we follow are specified here.

The following characters in parameter values are never percent encoded:

- Alphanumeric characters: 0-9a-zA-Z
- Special characters: $ - _ . ! * ' ( )

The following characters in parameter values _must_ be percent encoded:

- Space
- URL-encoding markers: % +
- Unsafe characters: " < > # { } | \ ^ [ ] `
- Reserved characters (URI delimiters): & , / : ; = ? @
- Non-ASCII characters, the entire top half of the ISO-Latin set, 80-FF hex (128-255 decimal)
- ASCII Control characters, the ISO-8859-1 (ISO-Latin) character ranges 00-1F hex (0-31 decimal) and 7F (127 decimal)

A space character in a parameter _should_ be percent encoded as %20, but will be accepted as +. A tilde (~) character _should_ be percent encoded in parameter values, but will be accepted in raw form.

If you have control over character encoding, we recommend percent encoding both the space and tilde.

Note:  OAuth 1.0a authentication, which is required for each request, also requires percent-encoded parameter values, but percent encoding in OAuth 1.0a follows a slightly different standard than the percent encoding described here.

## Authorizing Your Requests

To authenticate your requests, Rovi Cloud requires an HTTP 1.1 Authorization header with each request that provides OAuth 1.0a credentials. OAuth 1.0a is an authentication protocol described by [IETF RFC 5849](http://tools.ietf.org/html/rfc5849).

OAuth 1.0a:
        
+   Uniquely identifies you from your security keys.
+   Guards against replay attacks by requiring a unique string in each call.
+   Does not require SSL/TLS, token state management, or certificate verification.
+   Ensures security through a hash function on a string concatenation that incorporates a secret key.
        
OAuth 1.0a is supported by multiple open source libraries. We recommend Jersey and Signpost OAuth. 

To test your calls, we recommend the following: 

+   [This version of Postman, a Chrome web browser extension](https://chrome.google.com/webstore/detail/postman-rest-client-short/mkhojklkhkdaghjjfdnphfphiaiohkef?hl=en). On the OAuth 1.0 tab, be sure to check the following boxes and refresh the request before sending each request:

    + Add params to header
    + Auto add parameters

+   [RESTClient, a Firefox web browser add-on](https://addons.mozilla.org/en-US/firefox/addon/restclient/). Be sure to check the following boxes on the Authentication OAuth setting tab:
        
    +   Realm Disabled
    +   oAuth Nonce Auto
    +   oAuth Timestamp Auto

### Overview
        
Specify the required OAuth parameters as follows:
        
+   `oauth_version`   
    Applicable version of the OAuth specification. For this parameter, specify: `1.0`.
    
+   `oauth_signature_method`   
    The method used to sign and verify requests. For this parameter, specify the case-sensitive value: `HMAC-SHA1`.                   
    
+   `oauth_nonce`   
    An alphanumeric string that is different in each request. The server checks the nonce to verify that a request has never been made before, which guards against replay attacks. Any method that generates a new alphanumeric string of characters for each request is acceptable.
    
+   `oauth_timestamp`    
    The UNIX time. Unix time is a timestamp supported in most development environments and is generally defined as the number of seconds since January 1, 1970 00:00:00 GMT.
    
    The time must be within 60 seconds of the server time, so generate this value at the time the request is executed.
    
+   `oauth_consumer_key`   
    Your Consumer Key, provided by Rovi when you signed up for the service. Also called an API key, this is the public key that authorizes your access to Rovi Cloud.
    
    __Note:__ &ensp; _The Consumer Secret, provided with your Consumer Key, should never be transmitted. You use the Consumer Secret in the generation of the oauth_signature._
    
+   `oauth_signature`
    A calculated authorization code. Because the calculation requires a unique percent encoding scheme and involves quite a few steps, the section following explains how to calculate the value, and then another section provides sample Java code that performs the calculation.
    
    For reference, however, the calculation the HMAC-SHA1 signature method is described in [section 3.4.2 of The OAuth 1.0 Protocol](http://tools.ietf.org/html/rfc5849#section-3.4.2).
    
    +  Do not specify a realm, oauth_token, or token shared-secret.
    +  For the client shared-secret, use the Consumer Secret that was provided with your Consumer Key.
    +  Perform the calculation at the time of each request to be sure it's within 60 seconds of the server time.
              
Here is a sample authorization header:
        
`Authorization: OAuth oauth_version="1.0",oauth_consumer_key="aza9g187u945e790805067eb37ec7de4bfda955v17cf898c16280bc532866af0",oauth_timestamp="1406676129",oauth_nonce="qfPkLmPw6T0",oauth_signature_method="HMAC-SHA1",oauth_signature="gWtfDzqloKwDkF911V48OrIo7fY%3D"`
                                
### Calculating the OAuth Signature
        
Calculating the oauth_signature is the most complicated part of the protocol, so this section provides an explanation to guide you through it. Let's use the following URI template to demonstrate the process. __Note:__ &ensp; _This template may be different from one provided in your templates file. The URI templates you are authorized to use are provided in your templates file._
    
    http://cloud.rovicorp.com/data/2/2.4/browse/service;country={country};postalCode={postalCode};msoId={msoId};offering=AU,BR,CA,CN,IN,EUR,LTA,RU,SEA,US,TR?idns=&page={page}&size=20
    
Building our request from the URI template above, here is our request.
    
    http://cloud.rovicorp.com/data/2/2.4/browse/service;country=CA;postalCode=K1N%206N5;msoId=;offering=AU,BR,CA,CN,IN,EUR,LTA,RU,SEA,US,TR?idns=&page=1&size=20
    
Parameter values must be percent-encoded, so note that the space in the path parameter `postalCode=K1N 6N5` is correctly encoded as %20 and not as +. We recommend percent encoding spaces as %20 in both path and query parameter values.

Now that we have the request, we can collect the strings we use to calculate the OAuth signature. We collect three string variables that consist of percent-encoded components of the request and the OAuth parameters.

#### Collect the Request Method String

First, assign the uppercase request method (GET, PUT, POST, or DELETE) to a string variable, say, httpMethod:

httpMethod: &emsp; `GET`

#### Collect the Base String

Now assign the base URL, which is the URL up to the question mark (or to the end of the URL if there is no question mark), to a string variable. Here we use the variable baseString:

baseString: &emsp; `http://cloud.rovicorp.com/data/2/2.4/browse/service;country=CA;postalCode=K1N%206N5;msoId=;offering=AU,BR,CA,CN,IN,EUR,LTA,RU,SEA,US,TR`

Now percent encode the value of baseString using the procedure described in the section below "Percent Encode the OAuth 1.0a Way." Note that we even percent encode the already percent-encoded space, so %20 becomes %2520.

baseString: &emsp; `http%3A%2F%2Fcloud.rovicorp.com%2Fdata%2F2%2F2.4%2Fbrowse%2Fservice%3Bcountry%3DCA%3BpostalCode%3DK1N%25206N5%3BmsoId%3D%3Boffering%3DAU%2CBR%2CCA%2CCN%2CIN%2CEUR%2CLTA%2CRU%2CSEA%2CUS%2CTR`

#### Collect the OAuth and Query Parameters String

Now let's collect, sort, and encode the OAuth and query parameters. Query parameters are the parameter=value pairs that come after the question mark in the request. We start with the raw parameter values, the values before they are percent encoded.

Collect the raw query parameters and the OAuth parameters and sort them alphabetically by name. For a PUT or POST request, do not include the request body. If a request has no query parameters, the only parameters in the list are the OAuth parameters.

Here is the list for our sample request:

| Parameter              |  Parameter Value                                                  |
| ---------------------- | ----------------------------------------------------------------- |
| idns                   |                                                                   |
| oauth_consumer_key     | aza9g187u945e790805067eb37ec7de4bfda955v17cf898c16280bc532866af0  |
| oauth_nonce            | qfPkLmPw6T0                                                       |
| oauth_signature_method | HMAC-SHA1                                                         |
| oauth_timestamp        | 1406676129                                                        |
| oauth_version          | 1.0                                                               |
| page                   | 1                                                                 |
| size                   | 20                                                                |

Percent encode every parameter and parameter value in the parameter list using the procedure described in the section below "Percent Encode the OAuth 1.0a Way." Parameter names are generally unchanged by that procedure.

| Parameter, Percent-Encoded |  Parameter Value, Percent-Encoded                             |
| ---------------------- | ----------------------------------------------------------------- |
| idns                   |                                                                   |
| oauth_consumer_key     | aza9g187u945e790805067eb37ec7de4bfda955v17cf898c16280bc532866af0  |
| oauth_nonce            | qfPkLmPw6T0                                                       |
| oauth_signature_method | HMAC-SHA1                                                         |
| oauth_timestamp        | 1406676129                                                        |
| oauth_version          | 1.0                                                               |
| page                   | 1                                                                 |
| size                   | 20                                                                |

The list for this particular request is unchanged.

We now collect these parameters and values in a string, as follows:
  
  1.  Assign the first parameter to a string variable. Here we use the variable parameterString:
  
      parameterString: &emsp; `idns`

  2.  Then append an equal sign and the encoded parameter value.
  
      parameterString: &emsp; `idns=`
  
  3.  Then append an ampersand (&), followed by the next encoded parameter, equal sign, and encoded parameter value.
  
      parameterString: &emsp; `idns=&oauth_consumer_key=aza9g187u945e790805067eb37ec7de4bfda955v17cf898c16280bc532866af0`
  
  4.  Repeat step 3 for each parameter in the list.

      parameterString: &emsp; `idns=&oauth_consumer_key=aza9g187u945e790805067eb37ec7de4bfda955v17cf898c16280bc532866af0&oauth_nonce=qfPkLmPw6T0&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1406676129&oauth_version=1.0&page=1&size=20`
      
  5.  Now percent encode the value of parameterString using the procedure described below in "Percent Encode the OAuth 1.0a Way." Note that we percent encode the equal signs and ampersands we just added, as well as any percent signs we added during the previous percent encoding.
  
      parameterString: &emsp; `idns%3D%26oauth_consumer_key%3Daza9g187u945e790805067eb37ec7de4bfda955v17cf898c16280bc532866af0%26oauth_nonce%3DqfPkLmPw6T0%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1406676129%26oauth_version%3D1.0%26page%3D1%26size%3D20`

#### Generate the Signature Base String

Now we concatenate the three strings we created into a single string. We are calling this string signatureBaseString.

  1.  Assign to signatureBaseString that uppercase string httpMethod.
      
      signatureBaseString: &emsp; `GET`
      
  2.  Append an ampersand (&).
      
      signatureBaseString: &emsp; `GET&`
      
  3.  Append baseString to signatureBaseString.
      
      signatureBaseString: &emsp; `GET&http%3A%2F%2Fcloud.rovicorp.com%2Fdata%2F2%2F2.4%2Fbrowse%2Fservice%3Bcountry%3DCA%3BpostalCode%3DK1N%25206N5%3BmsoId%3D%3Boffering%3DAU%2CBR%2CCA%2CCN%2CIN%2CEUR%2CLTA%2CRU%2CSEA%2CUS%2CTR`
      
  4.  Append an ampersand (&).
      
      signatureBaseString: &emsp; `GET&http%3A%2F%2Fcloud.rovicorp.com%2Fdata%2F2%2F2.4%2Fbrowse%2Fservice%3Bcountry%3DCA%3BpostalCode%3DK1N%25206N5%3BmsoId%3D%3Boffering%3DAU%2CBR%2CCA%2CCN%2CIN%2CEUR%2CLTA%2CRU%2CSEA%2CUS%2CTR&`
      
  5.  Append parameterString to signatureBaseString.
      
      signatureBaseString: &emsp; `GET&http%3A%2F%2Fcloud.rovicorp.com%2Fdata%2F2%2F2.4%2Fbrowse%2Fservice%3Bcountry%3DCA%3BpostalCode%3DK1N%25206N5%3BmsoId%3D%3Boffering%3DAU%2CBR%2CCA%2CCN%2CIN%2CEUR%2CLTA%2CRU%2CSEA%2CUS%2CTR&idns%3D%26oauth_consumer_key%3Daza9g187u945e790805067eb37ec7de4bfda955v17cf898c16280bc532866af0%26oauth_nonce%3DqfPkLmPw6T0%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1406676129%26oauth_version%3D1.0%26page%3D1%26size%3D20`
      
      Note that the result string contains only two ampersand (&) characters. 

#### Generate the Key String

Now that we have the signatureBaseString, the last thing we need before we calculate the OAuth signature is the key string. Follow these two steps:

  1.  Percent encode your Consumer Secret and assign the result to keyString.
      
      keyString: &emsp; `1y2g9e33e485633c5901t469189nn6ade8879afbada65b9ssb3661009722da7e`
      
  2.  Append an ampersand (&)
      
      keyString: &emsp; `1y2g9e33e485633c5901t469189nn6ade8879afbada65b9ssb3661009722da7e&`
      
#### Generate the OAuth Signature

We performed all of the previous steps for a single value, the value of the oauth_signature parameter. To generate the oauth_signature, we use the HMAC-SHA1 hashing function, which is available in every popular development environment. Follow these steps:

  1.  In the HMAC-SHA1 function, assign the value of signatureBaseString to the data string.
  
  2.  Assign the value of keyString to the key string.
  
  3.  Execute the function. The result is a binary string, such as:
  
      B6 79 C0 AF 18 F4 E9 C5 87 AB 8E 20 0A CD 4E 48 A9 3F 8C B6
  
  4.  Base64 encode the result.
      
      oauth_signature: &emsp; `gWtfDzqloKwDkF911V48OrIo7fY=`

  5.  Finally, percent encode the value.
      
      oauth_signature: &emsp; `gWtfDzqloKwDkF911V48OrIo7fY%3D`

#### Execute the Request

When we have the oauth_signature, we can execute the request. Our request looks like this:
    
    GET http://cloud.rovicorp.com/data/2/2.4/browse/service;country=CA;postalCode=K1N%206N5;msoId=;offering=AU,BR,CA,CN,IN,EUR,LTA,RU,SEA,US,TR?idns=&page=1&size=20
    Content-Type: application/json   
    Authorization: OAuth oauth_version="1.0",oauth_consumer_key="aza9g187u945e790805067eb37ec7de4bfda955v17cf898c16280bc532866af0",oauth_timestamp="1406676129",oauth_nonce="qfPkLmPw6T0",oauth_signature_method="HMAC-SHA1",oauth_signature="gWtfDzqloKwDkF911V48OrIo7fY%3D

### Percent Encode the OAuth 1.0a Way

Percent encoding for OAuth 1.0a is different from the URL encoding protocol used by Content-Type application/x-www-form-urlencoded. OAuth 1.0a percent encoding follows these rules:

  +  Text characters are first converted to UTF-8 per [RFC3629](http://tools.ietf.org/html/rfc3629).
  +  Then each UTF-8 character is either percent encoded or not.
  +  The following characters must NOT be percent encoded: 
     +  &ensp; a &ndash; z &ensp; (lowercase alpha, &nbsp; UTF-8 &nbsp;0x61 &ndash; 0x7A)
     +  &ensp; A &ndash; Z &ensp; (uppercase alpha, &nbsp; UTF-8 &nbsp;0x41 &ndash; 0x5A)
     +  &ensp; 0 &ndash; 9 &ensp; (numeric digits, &nbsp; UTF-8 &nbsp;0x30 &ndash; 0x39)
     +  &ensp; ~ &ensp; (tilde &nbsp; UTF-8 &nbsp;0x7E)
     +  &ensp; . &ensp; (period &nbsp; UTF-8 &nbsp;0x2E)
     +  &ensp; - &ensp; (hyphen &nbsp; UTF-8 &nbsp;0x2D)
     +  &ensp; _ &ensp; (underscore &nbsp; UTF-8 &nbsp;0x5F)
  +  Other characters must be percent encoded per [RFC3986](http://tools.ietf.org/html/rfc3986).
  +  Hexadecimal alpha characters (A &ndash; F) must be represented as upper case.
  +  A space must be represented as %20, not as a plus sign (+).

The following steps describe how to percent encode for OAuth 1.0a. This procedure works for all languages, for all single and multibyte characters.

  1.  Convert all characters in the source string to UTF-8.
  
  2.  Declare a result string, say ENCODED, to hold the percent-encoded string.
  
  3.  Begin a loop, reading the source string byte-by-byte as hexadecimal characters until all bytes are read.
  
  4.  If a byte matches a character that must not be percent encoded (listed above), append that byte to ENCODED.
  
  5.  Otherwise, append 0x25 (%) to ENCODED and then append the two alpha or numeric hexadecimal characters that represent that character. For example, the UTF-8 hexadecimal representation for the plus sign is 0x2B, so you would append %2B.
      
      You also need to percent encode the percent-encoded characters in the string. For example, a percent-encoded space, %20, turns into %2520.
      
### Authorization FAQ

  1.  My OAuth 1.0a authorization worked just fine with one request, but failed on the next request. What's up with that?
  
      Probably the first request did not get authenticated. The API skips authentication under certain circumstances, such as when the response is available from the cache or the authentication subsystem is down. Also some requests do not require authentication.
  
  2.  Do I need to provide an OAuth 1.0a Authorization header to see the API Console?
  
      No, the request for the API Console is not authenticated, nor are the documentation requests the API Console makes (requests that end in "api.raml").
     
  3.  It looks like the URL to the API Console contains a Consumer Key that does not match my Consumer Key. Will my requests, with my Consumer Key, be authenticated?
  
      You are probably looking at the public API Console, which has a public Consumer Key. Yes, a request with your Consumer Key will work for a request in the public API Console if your data subscription includes that request. A better practice, though, is to use your API Console, which shows the requests you are subscribed to. That API Console contains your unique Consumer Key in the URL.

### Sample Java Code
        
Here is sample Java code that performs the OAuth 1.0a signature calculation.
        
    package com.rovicorp.tnt.app.util;
    
    import java.io.UnsupportedEncodingException;
    import java.net.URI;
    import java.net.URLEncoder;
    import java.security.InvalidKeyException;
    import java.security.NoSuchAlgorithmException;
    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.List;
    import java.util.Map;
    import java.util.Scanner;
    import java.util.TreeMap;
    import javax.crypto.Mac;
    import javax.crypto.SecretKey;
    import javax.crypto.spec.SecretKeySpec;
    import org.apache.commons.codec.binary.Base64;
    import org.apache.http.NameValuePair;
    import org.apache.http.message.BasicNameValuePair;
    
    /**
     * The implementation of the OAuth 1.0 signature process.
     *
     * @see <a href="http://tools.ietf.org/html/rfc5849#section-3.4">RFC5849 OAuth 1.0 Signature</a>
     */
    public class OAuthSignature {
    
        private static final String HMAC_SHA1 = "HmacSHA1";
        private static final String ENC = "UTF-8";
        private String nonce;
        private String timestamp;
    
        public OAuthSignature() {
            nonce = String.valueOf((int) (Math.random() * 100000000));
            timestamp = String.valueOf(System.currentTimeMillis() / 1000);
        }
    
    
        /**
         * Build the OAuth 1.0 HTTP Authorization Header.
         *
         * @param apiKey    - The public API key that authorizes your access to Rovi Cloud, provided by Rovi when you signed up for the service.
         * @param signature - The string result of the {@link #generateSignature(String, String, String, String)} method.
         * @return
         * @see <a href="http://tools.ietf.org/html/rfc5849#section-3.5.1">RFC5849 Authorization Header</a>
         */
        public String buildAuthorizationHeader(String apiKey, String signature) {
            StringBuilder oAuthHeader = new StringBuilder();
            oAuthHeader.append("OAuth ");
            oAuthHeader.append(String.format("oauth_consumer_key=%s", apiKey));
            oAuthHeader.append(", ");
            oAuthHeader.append("oauth_version=1.0");
            oAuthHeader.append(", ");
            oAuthHeader.append("oauth_signature_method=HMAC-SHA1");
            oAuthHeader.append(", ");
            oAuthHeader.append(String.format("oauth_timestamp=%s", timestamp));
            oAuthHeader.append(", ");
            oAuthHeader.append(String.format("oauth_nonce=%s", nonce));
            oAuthHeader.append(", ");
    
            try {
                oAuthHeader.append("oauth_signature=" + percentEncode(signature));
            } catch (Exception e) {
                e.printStackTrace();
            }
    
            return oAuthHeader.toString();
        }
    
        /**
         * Generate the OAuth 1.0 signature.
         *
         * @param httpMethod     - The HTTP request method in uppercase.
         * @param url            - The HTTP request URL.
         * @param consumerKey    - The public API key that authorizes your access to Rovi Cloud, provided by Rovi when you signed up for the service.
         * @param consumerSecret - The secret is used to generate the value of `oauth_signature` and should never be transmitted.
         * @return
         * @throws UnsupportedEncodingException
         * @throws NoSuchAlgorithmException
         * @throws InvalidKeyException
         * @see <a href="http://tools.ietf.org/html/rfc5849#section-3.4">RFC5849 Signature</a>
         * @see <a href="http://oauth.googlecode.com/svn/code/javascript/example/signature.html">OAuth 1.0 Signature Generator</a>
         */
        public String generateSignature(String httpMethod, String url, String consumerKey, String consumerSecret)
                throws UnsupportedEncodingException, NoSuchAlgorithmException,
                InvalidKeyException {
            /**
             * Base String URI
             * @see <a href="http://tools.ietf.org/html/rfc5849#section-3.4.1.2">RFC5849 Base String URI</a>
             */
            String baseURL = new String(url);
            int index = url.indexOf('?');
            if (index != -1) {
                baseURL = url.substring(0, url.indexOf('?')); //.toLowerCase(); only the scheme and host should be lowercase
            }
    
            /**
             * String Construction
             * @see <a href="http://tools.ietf.org/html/rfc5849#section-3.4.1.1">RFC5849 String Construction</a>
             *
             * The signature base string has three parts, they are connected by "&": 1) HTTP Method 2) Percent-encoded base URL
             *  3) Percent-encoded request parameters.
             */
            Base64 base64 = new Base64();
            StringBuilder signatureBaseString = new StringBuilder();
            signatureBaseString.append(httpMethod);
            signatureBaseString.append("&");
            signatureBaseString.append(percentEncode(baseURL));
            signatureBaseString.append("&");
            signatureBaseString.append(generateRequestParameters(url, consumerKey));
    
            /**
             * Generate the HMAC_SHA1 signature
             * @see <a href="http://tools.ietf.org/html/rfc5849#section-3.4.2">RFC5849 HMAC-SHA1</a>
             */
            byte[] keyBytes = (consumerSecret + "&").getBytes(ENC);
            SecretKey key = new SecretKeySpec(keyBytes, HMAC_SHA1);
            Mac mac = Mac.getInstance(HMAC_SHA1);
            mac.init(key);
    
            // encode it, base64 it, change it to string and return.
            String signature = new String(base64.encode(mac.doFinal(signatureBaseString.toString().getBytes(
                    ENC))), ENC).trim();
            return signature;
        }
    
        /**
         * OAuth 1.0 percent encode.
         *
         * @param s The string to be encoded.
         * @return
         * @throws UnsupportedEncodingException
         * @see <a href="http://tools.ietf.org/html/rfc5849#section-3.6">RFC5849 OAuth 1.0 Percent Encoding</a>
         */
        private String percentEncode(String s) throws UnsupportedEncodingException {
            return URLEncoder.encode(s, ENC).replace("+", "%20").replace("%7E", "~").replace("%2E", ".").replace("%2D", "-").replace("%5F", "_");
        }
    
        /**
         * Generate the request parameter string.
         *
         * @param url         - The HTTP request URL.
         * @param consumerKey - The public API key that authorizes your access to Rovi Cloud, provided by Rovi when you signed up for the service.
         * @return
         * @throws UnsupportedEncodingException
         * @see <a href="http://tools.ietf.org/html/rfc5849#section-3.4.1.3">RFC5849 Request Parameters</a>
         */
        private String generateRequestParameters(String url, String consumerKey) throws UnsupportedEncodingException {
    
            // Extract request parameters from the URL and store in a sorted collection.
            Map<String, String> paramMap = new TreeMap<String, String>();
    
            List<NameValuePair> param0s = parse(java.net.URI.create(url));
            for (NameValuePair param : param0s) {
                paramMap.put(param.getName(), percentEncode(param.getValue()));
            }
    
            // Add the OAuth request parameters to the collection of parameters
            paramMap.put("oauth_consumer_key", consumerKey);
            paramMap.put("oauth_nonce", nonce);
            paramMap.put("oauth_signature_method", "HMAC-SHA1");
            paramMap.put("oauth_timestamp", timestamp);
            paramMap.put("oauth_version", "1.0");
    
            // Build the request parameters string.
            StringBuilder paramStringBuilder = new StringBuilder();
            for (Map.Entry<String, String> entry: paramMap.entrySet()) {
                paramStringBuilder.append(entry.getKey());
                paramStringBuilder.append("=");
                paramStringBuilder.append(entry.getValue());
                paramStringBuilder.append("&");
            }
            paramStringBuilder.deleteCharAt(paramStringBuilder.length() - 1);
            String params = paramStringBuilder.toString();
            return percentEncode(params);
        }
    
        private final String PARAMETER_SEPARATOR = "&";
        private final String NAME_VALUE_SEPARATOR = "=";
    
        public List<NameValuePair> parse(final URI uri) {
            List<NameValuePair> result = Collections.emptyList();
            final String query = uri.getRawQuery();
            if (query != null && query.length() > 0) {
                result = new ArrayList<NameValuePair>();
                parse(result, new Scanner(query));
            }
            return result;
        }
    
        public void parse(
                final List<NameValuePair> parameters,
                final Scanner scanner) {
            scanner.useDelimiter(PARAMETER_SEPARATOR);
            while (scanner.hasNext()) {
                final String[] nameValue = scanner.next().split(NAME_VALUE_SEPARATOR);
                if (nameValue.length == 0 || nameValue.length > 2)
                    throw new IllegalArgumentException("bad parameter");
    
                final String name = nameValue[0];
                String value = null;
                if (nameValue.length == 2)
                    value = nameValue[1];
                parameters.add(new BasicNameValuePair(name, value));
            }
        }
    }

## Supported Locales
API requests that include the `in` parameter can return content in a specified language or even in the localized language of a specified country. 

To specify a language, use the two-character ISO 639 language code, like this: `fr`.

To specify a language and country, add a hyphen to the language code and the two-character ISO 3166 country code, like this: `fr-CA`.

The table below shows the languages and countries for which there is currently strong API data coverage. If localized content is not available, we return the non-localized content. If content is not available in that language, another language will be chosen based on fallback rules. However, most requests that support the `in` parameter also give you the option to also specify second and third fallback choices.

We are constantly adding content and building our data coverage around the globe. The following table shows the regions for which there is currently strong API data coverage. Language and country codes are case-sensitive.

| Country                          | Code | Language                          | Code                    |
| -------------------------------- | ---- | --------------------------------- | ----------------------- |
| Andorra                          | AD   | Spanish                           | es-AD                   |
| Anguilla                         | AI   | English (UK)                      | en-AI                   |
| Antigua & Barbuda                | AG   | English                           | en-AG                   |
| Argentina                        | AR   | Spanish                           | es-AR                   |
| Aruba                            | AW   | Dutch                             | nl-AW                   |
| Australia                        | AU   | English                           | en-AU                   |
| Austria                          | AT   | German                            | de-AT                   |
| Bahamas                          | BS   | English                           | en-BS                   |
| Barbados                         | BB   | English                           | en-BB                   |
| Belgium                          | BE   | Dutch<br>French                   | nl-BE<br>fr-BE          |
| Bermuda                          | BM   | English                           | en-BM                   |
| Bolivia                          | BO   | Spanish                           | es-BO                   |
| Brazil                           | BR   | Portuguese                        | pt-BR                   |
| British Virgin Islands           | VG   | English (UK)                      | en-VG                   |
| Canada                           | CA   | English<br>French                 | en-CA<br>fr-CA          |
| Chile                            | CL   | Spanish                           | es-CL                   |
| China                            | CN   | Chinese Simplified Mandarin       | zh-CN                   |
| Colombia                         | CO   | Spanish                           | es-CO                   |
| Costa Rica                       | CR   | Spanish                           | es-CR                   |
| Curacao                          | CW   | Dutch                             | nl-CW                   |
| Denmark                          | DK   | Danish                            | da-DK                   |
| Dominican Republic               | DO   | Spanish                           | es-DO                   |
| Ecuador                          | EC   | Spanish                           | es-EC                   |
| El Salvador                      | SV   | Spanish                           | es-SV                   |
| Faroe Islands                    | FO   | Danish                            | da-FO                   |
| Finland                          | FI   | Finnish                           | fi-FI                   |
| France                           | FR   | French                            | fr-FR                   |
| Germany                          | DE   | German                            | de-DE                   |
| Gibraltar                        | GI   | English<br>Spanish                | en-GI<br>es-GI          |
| Grenada                          | GD   | English (UK)                      | en-GD                   |
| Guatemala                        | GT   | Spanish                           | es-GT                   |
| Guyana                           | GY   | English (UK)                      | en-GY                   |
| Honduras                         | HN   | Spanish                           | es-HN                   |
| Hong Kong                        | HK   | Chinese Traditional Cantonese     | zh-HK                   |
| Iceland                          | IS   | Icelandic                         | is-IS                   |
| India                            | IN   | English (UK)                      | en-IN                   |
| Ireland                          | IE   | English (UK)                      | en-IE                   |
| Italy                            | IT   | Italian                           | it-IT                   |
| Jamaica                          | JM   | English                           | en-JM                   |
| Lichtenstein                     | LI   | German                            | de-LI                   |
| Luxembourg                       | LU   | French<br>German                  | fr-LU<br>de-LU          |
| Malaysia                         | MY   | English (UK)<br>Malay             | en-MY<br>ms-MY          |
| Malta                            | MT   | English (UK)                      | en-MT                   |
| Mexico                           | MX   | Spanish                           | es-MX                   |
| Monaco                           | MC   | English (UK)<br>French<br>Italian | en-MC<br>fr-MC<br>it-MC |
| Montserrat                       | MS   | English                           | en-MS                   |
| Netherlands                      | NL   | Dutch                             | nl-NL                   |
| Nicaragua                        | NI   | Spanish                           | es-NI                   |
| Norway                           | NO   | Norwegian                         | nb-NO                   |
| Panama                           | PA   | Spanish                           | es-PA                   |
| Peru                             | PE   | Spanish                           | es-PE                   |
| Philippines                      | PH   | English                           | en-PH                   |
| Poland                           | PL   | Polish                            | pl-PL                   |
| Portugal                         | PT   | Portuguese                        | pt-PT                   |
| Russia                           | RU   | Russian Cyrillic                  | ru-RU                   |
| Saint Kitts & Nevis              | KN   | English                           | en-KN                   |
| Saint Lucia                      | LC   | English                           | en-LC                   |
| Saint Martin                     | MF   | French                            | fr-MF                   |
| Saint Vincent and the Grenadines | VC   | English                           | en-VC                   |
| Singapore                        | SG   | English (UK)<br>Malay             | en-SG<br>ms-SG          |
| Spain                            | ES   | Spanish                           | es-ES                   |
| Sweden                           | SE   | Swedish                           | sv-SE                   |
| Switzerland                      | CH   | French<br>German<br>Italian       | fr-CH<br>de-CH<br>it-CH |
| Taiwan                           | TW   | Chinese Traditional Mandarin      | zh-TW                   |
| Trinidad & Tobago                | TT   | English                           | en-TT                   |
| Turkey                           | TR   | Turkish                           | tr-TR                   |
| Turks & Caicos                   | TC   | English                           | en-TC                   |
| United Kingdom*                  | GB   | English (UK)                      | en-GB                   |
| United States                    | US   | English (UK)<br>Spanish           | en-US<br>es-US          |
| Venezuela                        | VE   | Spanish                           | es-VE                   |

\* Includes Wales, Scotland, and Northern Ireland.

## App Design With Rovi Cloud
Here are a few useful guidelines that will help you create a great app with the Rovi Cloud API.

### Understanding Database IDs in Rovi Cloud
Key to designing your app is effective use of the database IDs that Rovi Cloud recognizes and returns in responses. Here are the main points you need to know about Rovi Cloud IDs:

- Rovi Cloud IDs are unique (positive) integers and are different from IDs in previous and legacy databases.
- If you use legacy IDs in a current application, you can use those IDs in Rovi Cloud and, at the same time, get the Rovi Cloud IDs to replace those legacy IDs. See the next section.
- A Rovi Cloud ID for a show may be identified by two different field labels:
  - By category: a data_content ID.
  - By type: a data_movie ID, data_series ID, data_season ID, data_episode ID, data_other ID, or data_release ID.
  - So there is only one ID of any type for a show, but either label may apply.
- If you have a Rovi Cloud ID for a show, you can call [data_content](/#reference/content/datacontent) to get information about the ID.
- A Rovi Cloud ID for a person may also be identified by two different field labels:
  - By a data_person ID.
  - By a data_name ID.
  - So a person has only one ID, but both labels may apply.
  - Teams and organizations have only data_name IDs.
- Because you need an ID to get detailed information about a show or person, the entry points for entertainment data in Rovi Cloud are:
  - The Search and Recommendation requests.
  - Local television schedules. TV schedules return IDs for the [data_airing](#reference/tv-schedule/dataairing) request, which in turn returns IDs to other requests that deliver all of the localized and translatable data available about a movie or program.
- Requests that return data about particular movie, episode, release, person, etc. all use the same ID. So, for example, the ID you use to get movie data about Kung Fu Panda, the data_movie ID 914806985, is the same ID that is used for all associated requests:
  - data_movie
  - data_movie_aired
  - data_movie_appearances
  - data_movie_awards
  - data_movie_credits
  - data_movie_ratings
  - data_movie_related
  - data_movie_review
  - data_movie_synopses
  - data_content_images
- When an API response returns an ID that can be used in a different API request, there is no guarantee that the referenced request has available data to return. Rovi Cloud IDs are static, designed around the structure of the data. Therefore you are advised to program an alternate path for occasional status code 404 (not found) responses.

### Using Legacy IDs in Rovi Cloud
If you are using legacy IDs in an existing application, we can configure your Rovi Cloud account so your legacy IDs work in your Rovi Cloud application. Not only that, in your API responses from Rovi Cloud we will include the Rovi Cloud IDs for those legacy IDs so that, over time, you can shift over to using Rovi Cloud IDs.

Here's how it works.

1. When you sign up, ask your account representative to set up your account to accept legacy IDs.
2. As you develop your application, prefix your legacy IDs with the type of ID.
  - For Cosmo IDs for programming sources, prefix your IDs with `source-`, like this: `source-696`.
  - For Cosmo IDs for television services, prefix your IDs with `service-`, like this: `service-898985`.
  - For Cosmo IDs for people, teams, or organizations, prefix your IDs with `celebrity-`, like this: `celebrity-100694`.
  - For Cosmo IDs for programs, movies, series, seasons, episodes, and releases, prefix your IDs with `program-`, like this: `program-19831092`.
  - For iGuide IDs for programs, movies, series, seasons, episodes, and releases, prefix your IDs with `iguide-`, like this: `iguide-4380423`.
3. In API responses from Rovi Cloud, look for the Rovi Cloud ID for each request in a "ref" object. The legacy IDs appear in a "synonyms" object. 

    ```json
    {
      "ref": {
          "id": 915363654,
          "me": "data_series",
          "children": [
             "data_series_awards",
             "data_series_credits",
             "data_series_history",
             "data_series_ratings",
             "data_series_seasons",
             "data_series_synopses",
             "data_content_images"
             "data_source_logos",
          ]
      },
      "synonyms": [
          {
             "program":7914,
             "iguide":7914,
             "in":"en",
             "title":"Cheers"
          },
          {
             "program":15782587,
             "iguide":15782587,
             "in":"da",
             "title":"Sams Bar"
          },
          {
             "program":15782583,
             "iguide":15782583,
             "in":"de",
             "title":"Cheers"
          },
          {
             "program":2251538,
             "iguide":2251538,
             "in":"es",
             "title":"Cheers"
          },
          {
             "program":15782586,
             "iguide":15782586,
             "in":"fr",
             "title":"Cheers"
          },
          {
             "program":26040460,
             "iguide":4658730,
             "in":"is",
             "title":"Cheers"
          },
          {
             "program":15782585,
             "iguide":15782585,
             "in":"it",
             "title":"Cheers"
          },
          {
             "program":15782588,
             "iguide":15782588,
             "in":"nb",
             "title":"Cheers"
          },
          {
             "program":15782589,
             "iguide":15782589,
             "in":"nl",
             "title":"Cheers"
          },
          {
             "program":21367433,
             "iguide":6278824,
             "in":"sv",
             "title":"SkÃ¥l!"
          },
          {
             "program":15782584,
             "iguide":15782584,
             "in":"sv-se",
             "title":"SkÃ¥l"
          }
       ]
    }
    ```
        
4. Grab the Rovi Cloud ID for that request and update your database with that ID for future requests.
5. When you are only using Rovi Cloud IDs, notify your Rovi account representative. We will then modify your templates file to stop sending synonym objects in your API responses.

### Implementing Search and Recommendations
Some Rovi Cloud search and recommendations responses offers a unique feature:  A user can expand an item in a response &mdash; we say "unfold an item" &mdash; and then, if the user wishes, perform another search within the unfolded results.

For example, one of the items in the following sample response is the TV series _Star Trek: Next Generation_. The user can select that item to unfold that item, which, in this case, returns episodes in the series. At this point the user can perform another search on the unfolded content, searching for something in episodes in the series or, of course, page through the results.

The user can continue to unfold items and then perform searches on unfolded items without end. 

We recommend implementing a Back button for search and recommendations, by caching request parameter values and, if possible, responses, so a user can return to a previous response and begin a new search at any point.

It works like this:

1. You offer a search request, for example, discover_all_video_by_search/content.
2. The user searches for "Star Trek." 
  - You push parameter values to a stack.
  - The API returns the response. Here's the response (abbreviated) with the item the user is about to pick:

    ```json
    {
      "ref": {
        "me": "discover_all_video_by_search",
        "sub": "content",
        "query": "star+trek"
      },
      "next": "vp:sc:0~,startrek,1,1444258124,10:10:0;,,,0~~tv~256",
      "size": 10,
      "items": [
        {
          "ref": {
            "id": 913943391,
            "me": "data_series",
            "next": "vp:bm:0~WIKI27070~~tv"
          },
          "in": "en",
          "type": "series",
          "name": "
    <em>Star </em>
    <em>Trek:</em> The Next Generation",
          "year": 1987,
          "runtime": 1800,
          "matched": [
            {
              "field": "name",
              "value": "
    <em>Star </em>
    <em>Trek:</em> The Next Generation"
            }
          ]
        }
      ]
    }
    ```

3. The user picks an item in the response, the series _Star Trek: Next Generation_. There are two paths you can take with this item, based on the contents of the __ref__ object for that item:

    ```json
    "ref": {
      "id": 913943391,
      "me": "data_series",
      "next": "vp:bm:0~WIKI27070~~tv"
    },
    ````
  - You can execute a data_series request, using the ID 913943391, thereby exiting search.
  - Or you can stay in search, executing another discover_all_video_by_search/content request using the value of the __next__ field vp:bm:0~WIKI27070~~tv to unfold the item. 
    
4. You copy that value to the __next__ parameter and execute the search request. (You also push the request parameter values to the stack.)
  - Recommendation:  Tag items in a response that have a __next__ field with an icon or text link such as _Search Here_.
  - The API returns information about that item, in this case a list of episodes in that series. Here's the response (abbreviated):
    
    ```json
    {
      "ref": {
        "me": "discover_all_video_by_search",
        "sub": "content",
        "next": "vp:bm:0~WIKI27070~~tv"
      },
      "next": "vp:sc:0~,,1,1444677928,10:10:0;,,,0~~tv",
      "size": 10,
      "context": "1-WIKI27070--1",
      "items": [
        {
          "ref": {
            "id": 913780922,
            "me": "data_episode"
          },
          "in": "en",
          "type": "episode",
          "name": "Brothers",
          "year": 1990,
          "runtime": 3600
        },
        {
          "ref": {
            "id": 914979165,
            "me": "data_episode"
          },
          "in": "en",
          "type": "episode",
          "name": "Symbiosis",
          "year": 1988,
          "runtime": 3600
        }
      ]
    }
    ```
5. The user now searches for "Worf" in those results.
6. Because the response includes a __context__ field, you execute another request using the query value "Worf" and the __context__ value.
  - You also push the parameter values to the stack.
  - The API returns the list of episodes that include the character Worf. Here's the response (abbreviated):

    ```json
    {
      "ref": {
        "me": "discover_all_video_by_search",
        "sub": "content",
        "query": "Worf",
        "context": "1-WIKI27070--1"
      },
      "next": "vp:sc:0~,worf,1,1444678595,10:10:0;,,,0~~tv~256",
      "size": 10,
      "context": "1-WIKI27070--1",
      "items": [
        {
          "ref": {
            "id": 916432494,
            "me": "data_series"
          },
          "in": "en",
          "type": "series",
          "name": "Star Trek: The Next Generation",
          "year": 1987,
          "ratings": {
            "us-tv": "TVPG"
          },
          "runtime": 3600,
          "matched": [
            {
              "field": "Role.name",
              "value": "
    <em>Worf</em>"
            }
          ]
        },
        {
          "ref": {
            "id": 915455562,
            "me": "data_episode"
          },
          "in": "en",
          "type": "episode",
          "name": "The Hunted",
          "year": 1990,
          "ratings": {
            "us-tv": "TVPG"
          },
          "runtime": 3600,
          "matched": [
            {
              "field": "role",
              "value": "lt. 
    <em>worf</em>"
            }
          ]
        }
    }
    ```
7. Note that not every item in a response can be unfolded, just the items that contain a __next__ field in a __ref__ object.

### Boosting API Performance
Using APIs incorrectly can quickly lead to performance issues. Here are a few ways to maximize performance with your design.

#### Execute Multiple Requests at the Same Time
When your app requires data from several API requests, you donâ€™t have to execute each request separately if you have the values for the request arguments. Remember that the Rovi server responds to multiple queries at once. What you can do is execute API calls in parallel, instead of one after another.

Executing requests in parallel reduces overall latency.

Here are a few situations when this can be useful:

- You need to fill out details about a movie or TV program, so you need data from multiple API requests such as data_movie, data_movie_synopses, data_movie_review, data_movie_ratings, and data_movie_credits/cast. The ID is the same for each request, so executing those requests in parallel speeds performance.
- You need a response for each member of a collection, such as channel logos or airing synopsis. In this case, however, we strongly recommend that you request only the data you need for the items that are currently on screen.
- You need data for multiple pages or screens that the user can page up or down through, such as data_service_schedules/screen requests that return data for a TV schedule grid. In this case, request the data for the first screen and then, when that screen is displayed, request all of the other screens in parallel in the background.

#### Execute API Requests in a Separate Thread
If you execute all API requests from the main application flow, you may delay user actions while your application receives API responses and processes data. The Rovi server processes requests extremely fast, but still, your app could occasionally slow down as a result of additional data processing and random factors that impact the connection.

To avoid slowing down the user, you should consider executing some or all API calls in a different thread from the code responsible for displaying the UI. That is especially true when making API requests in the background, such as requests for data the user is likely to page to.

#### Implement a Cache
Another way to speed up API consumption is to store API response data in a temporary cache so that later requests for that data can be served from the cache instead of requested again through the API. There are a couple types of cache, but caching of Rovi data in general is allowed only to the extent specified in your contract with Rovi. Unless specifically authorized, caching is prohibited.

For information about caching of Rovi data, see the following pages here in the Getting Started section:
- [About Cache-Control Response Headers](#introduction/getting-started/about-cache-control-response-headers)
- [Caching Best Practices](#introduction/getting-started/caching-best-practices)

#### Study the API Reference
When you're writing an API request and configuring parameter values, take the time to review the documentation for that request with an eye toward application speed. Can you filter the response data? Can you sort it better? Can you request less data?

It's easy to forget the capabilities of a request. For best results, review the documentation of that request in the Reference section while you're coding it.

## Response Status Codes

The following table shows the typical HTTP status codes from the Rovi Cloud server:

| Code| Description                                    |
|-----|----------------------------------------------- |
| 200 | The server processed the request successfully. |
| 201 | The server processed the request successfully and a new resource was created.  |
| 202 | The server processed the request successfully; the response body is empty. |
| 204 | The server processed the request successfully, but is not returning any content. |
| 400 | Request malformed. Please correct the request per the specification and submit again.  |
| 401 | Request failed OAuth 1.0a authorization. |
| 404 | Requested resource is unavailable: not found, not authorized data, or end-of-list reached. |
| 409 | Request conflict, such as creating a resource that already exists. |
| 429 | Rate limit exceeded, per-second or per-UTC-date. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic.  |
| 500 | The server encountered an unexpected error condition.  |
| 503 | The server is temporarily unavailable. |

## Remote Access Error Codes

Rovi Remote Access gives cable subscribers remote access to their cable TV set-top boxes through an application on a tablet, smartphone, or website. This API returns the following error codes:

#### API Errors

| Error Code | Status Code | Title          | Description              |
| ---------- | ----------- | -------------- | ------------------------ |
| 1000 | 400 | Null value | Mandatory parameter cannot be null. |
| 1001 | 400 | Empty value | Parameter value cannot be empty. |
| 1002 | 400 | Invalid value | Parameter value must be ______. |
| 1003 | 400 | Invalid datatype | Parameter value is outside data type. |
| 1004 | 400 | Out of range | Parameter value should be less than _____. |
| 1005 | 400 | Out of maximum range | Parameter value is out of range. |
| 1006 | 400 | Value length out of range | Length must be greater than ____ and less than ____. |
| 1007 | 400 | Invalid parameter | Invalid parameter in request. |
| 1008 | 400 | Unsupported value | Validation failed as ____. |
| 1009 | 400 | Non-Unique parameter | Value ____ already exists in the system. |
| 1100 | 400 | Null request | Request body missing. |
| 1101 | 400 | Invalid JSON | Request body is invalid JSON. |
| 1400 | 405 | Unsupported method | Unsupported HTTP method ____. |
| 1401 | 400 | Unsupported uri | Unsupported URI ____. |
| 1402 | 400 | Unsupported header | Unsupported header ____. |
| 1403 | 400 | Unsupported parameter | Unsupported parameter. |
| 1501 | 401 | Unauthorized request | Unauthorized request. |
| 1502 | 498 | Token expired | Session token or request token expired. Restart session or log in again.|

#### Service Errors

| Error Code | Status Code | Title          | Description              |
| ---------- | ----------- | -------------- | ------------------------ |
| 3000 | 400 | Null value | Mandatory parameter cannot be null. |
| 3001 | 400 | Missing header | Header parameter missing. |
| 3002 | 400 | Invalid header | Invalid header value _____. |
| 3003 | 400 | Null value | Mandatory parameters cannot be null. Retry with a valid value for at least one of these parameters: _____ |
| 3004 | 400 | Invalid value | Invalid value _____. |
| 3005 | 400 | Only positive values supported | Negative value not supported for ____. Retry with a positive value. |
| 3006 | 400 | Incorrect value | Incorrect value ____. |
| 3100 | 404 | Resource not found | Resource with value ____ is not found. |
| 3101 | 404 | Resource not found | Resource with value ____ is not found for ____ with value ____. |
| 3102 | 409 | Resource already exists | Resource with value ____ already exists. |
| 3103 | 423 | Resource in use | Requested operation cannot be performed as resource with value ____ is already in use for ____. |
| 3105 | 400 | Resource mismatch | Value ____ in the request doesn't match ____. |
| 3106 | 400 | Resource status | ____. |
| 3107 | 401 | Resource unauthorized | Resource unauthorized. |
| 3108 | 400 | Resources unassociated | ____ is not associated with _____. Retry with ____ that is associated with ____. |
| 3109 | 400 | Resource locked | Resource locked. Retry later. |
| 3200 | 400 | Unsupported resource type | Unsupported ____ resource of type ____ found. |
| 3201 | 400 | Unsupported capability | The ____ capability is not supported for the device. |
| 3202 | 400 | Unsupported value | Unsupported ____ value ____. Retry with supported ____. |
| 3300 | 500 | Activation failure | Activation failed for ____. |
| 3301 | 500 | Deactivation failure | Deactivation failed for ____. |
| 3302 | 400 | Attempts exceeded | Maximum ____ attempts exceeded for ____. |
| 3303 | 500 | Resource creation failure | Resource creation failed as ____. |
| 3304 | 500 | Resource update failure | Resource update failed as ____. |
| 3305 | 500 | Resource deletion failure | Resource deletion failed as ____. |
| 3306 | 500 | Resource fetching failure | Resource fetching failed as ____. |
| 3307 | 500 | Resource in pending state | Resource ___ update failed as found in pending state. |
| 4000 | 500 | Marshalling failure | Unable to marshall ___ while communicating with ___. Retry later. |
| 4001 | 500 | Unmarshalling failure | Unable to unmarshall  ___ response from ___. Retry later. |
| 4002 | 503, 504 | Communication failure | Unable to communicate with ___ as error ___ occurred. Retry later. |
| 4003 | 502 | Null response | Null response received from ___. Retry later. |
| 4004 | 502 | Invalid response | Invalid response received from ___. Retry later. |
| 4005 | 500 | Http client error | Http client error ___ occurred while communicating with ___. |
| 4006 | 502 | HTTP server error | HTTP server error occurred while communicating with ____. |
| 4007 | 500 | Proxy Server Error | Proxy server returned error ____ while fulfilling the request. |
| 4008 | 500 | HTTP Resource Error | Error ____ returned while accessing HTTP resource ____. |
| 4009 | 404 | Request Refused | Request understood, but refused as error ____ is returned from ____. |
| 4010 | 500 | MSO API Returned Error | MSO API call failed with status ____ and error message ____. |
| 4012 | 500 | Database Error | Error from database: ____. |
| 7999 | 500 | Internal server error | Internal server error occurred while ____. |

**RAccess Service Errors**

RAccess server is a server in an MSO headend that services Passport Guide set-top boxes.

| Error Code | Status Code | Title          | Description              |
| ---------- | ----------- | -------------- | ------------------------ |
|      | 200 | RS_SUCCESS | This is a success case. |
|      | 200 | RS_HANDLED | This is a success case. |
|      | 200 | RS_LINEUPCHANGED | This is a success case. |
|      | 200 | RS_CONFLICTSOVERRIDDEN | This is a success case. |
| 4100 | 404 | RS_IPPVNOTAUTHORIZED | Invalid Impulse PPV purchase request; Impulse PPV is not enabled. |
| 4101 | 400 | RS_INVALIDDATE | Invalid date provided. |
| 4102 | 400 | RS_INVALIDSOURCEID | Invalid channel source ID provided. |
| 4103 | 400 | RS_RUNNINGTIMETOOLONG | Recording duration is more than 6 hours. |
| 4104 | 400 | RS_PPVEVENTPURCHASE FAILURE | Failed to purchase the PPV Event. Retry later. |
| 4105 | 400 | RS_CONFLICTS | Requested item conflicts with scheduled item. |
| 4106 | 400 | RS_OVERLAP | Requested item overlaps a scheduled item on the same channel. |
| 4107 | 400 | RS_PROGRAMOVER | Requested item is in the past. |
| 4108 | 400 | RS_SERIESUNIMPLEMENTED | Series recordings not implemented for Passport 3.1 rDVR ManualRecord protocol. |
| 4109 | 400 | RS_NOHARDDISK | Device is not a DVR. |
| 4110 | 400 | RS_TIMERNOTFOUND | No timer found on the device. |
| 4111 | 400 | RS_INVALIDDURATION | Invalid duration, less than 5 min or more than 6 hours. |
| 4112 | 400 | RS_INVALIDREQUESTTYPE | Request is invalid or unsupported. |
| 4113 | 400 | RS_INVALIDSIGNATURE | Request has invalid signature of the message. |
| 4114 | 400 | RS_INVALIDVERSION | Request made for invalid or unsupported API version. |
| 4115 | 404 | RS_INVALIDMACADDRESS | Request made for an invalid MAC address. |
| 4116 | 400 | RS_NOTAUTHORIZED | Request is not authorized for this device. |
| 4117 | 400 | RS_INTERNALIPGERROR | Internal IPG error occurred. Retry later. |
| 4118 | 400 | RS_PARSEINTERNALFAILED | Request malformed and could not be parsed. |
| 4119 | 400 | RS_REMOTEDELETEFAILED | Delete request made on item currently being accessed. Retry later. |
| 4120 | 400 | RS_REMOTERECORDINUSE | Main screen is playing the requested item. |
| 4121 | 400 | RS_SOURCENOTAUTHORIZED | Source ID is either unsubscribed or not authorized. |
| 4122 | 400 | RS_USERNOTAUTHORIZED | Device or user account does not have Tier ID authorization for Web DVR. |
| 4123 | 400 | RS_SETTOPNOTREGISTERED | Device has not completed self-registration authentication process. |
| 4124 | 400 | RS_KEYWORDSERIES RECORDINGSOVERFLOW | Exceeded maximum number of keyword series recordings (200). |
| 4125 | 400 | RS_UNSUPPORTED AUTHORIZATION | Requested authorization is not supported on this software version. |
| 4126 | 400 | RS_NONCEMISMATCH | PIN does not match expected value. |
| 4127 | 404 | RS_INVALIDDVR_UID | Invalid UID provided in the request. |
| 4128 | 400 | RS_UNSUBSCRIBED | Channel change succeeded, but channel is attempting to display a banner for an unsubscribed service. |
| 4129 | 400 | RS_ISUBSCRIBEBARKER | Channel change succeeded, but channel is attempting to display an iSubscribe banner. |
| 4130 | 400 | RS_PCBLOCKED | Parental control PIN is required to change the channel. |
| 4131 | 400 | RS_TUNERBUSY | All tuners are busy. Retry later. |
| 4132 | 400 | RS_SERVICEIDMISMATCH | Requested display channel does not match service ID. |
| 4133 | 404 | RS_INVALIDSERVICEID | Service ID provided was not found. |
| 4134 | 404 | RS_INVALIDCHANNEL | Channel number provided was not found. |
| 4135 | 400 | RS_INVALIDPIN | PIN provided is not valid. |
| 4136 | 400 | RS_INVALIDCOMMAND | Remote command is not supported on a this platform, such as a DVR command for a non-DVR set-top box. |
| 4137 | 400 | RS_STARTTIMEMISMATCH | Start time for reminder timer does not match IPG program. |
| 4138 | 400 | RS_GENERICERROR | Server encountered a generic error. Details unavailable. Retry later. |
| 4139 | 400 | RS_RESOURCEBUSY | Resources needed are currently in use. Retry later. |
| 4140 | 400 | RS_PINNOTSET | Device parental control PIN is not set. |
| 4141 | 400 | RS_PPVTIMERSNOT SUPPORTED | Cannot set remote timers. PPV timers are not supported on this device. |
| 4142 | 400 | RS_TIMERSFULL | Exceeded number of timers (8). Remove a timer or wait until a timer is finished. |
| 4143 | 400 | RS_POWERISOFF | Device is powered off. Retry when the device is on. |
| 4144 | 400 | RS_NOTENOUGHMEM | Device does not have enough memory. Retry after clearing some memory. |
| 4145 | 400 | RS_INVALIDSETTING | Requested setting is not supported by the device. |
| 4146 | 400 | RS_INVALIDVALUE | Setting value is invalid or out-of-range. |
| 4147 | 400 | RS_PARTIALFAILURE | Some part of the request failed. Retry later.|
| 4148 | 400 | RS_SETTINGCANNOT BECHANGED | Device settings requested cannot be changed. |
| 4149 | 400 | RS_STBINTERNALERROR | Device encountered an error while executing the request. Retry later. |
| 4150 | 400 | RS_TERMINALCOMMERROR | RAccess server is having problems. Retry later. |
| 4151 | 400 | RS_INVALIDREQUEST | Request is invalid. |
| 4152 | 400 | RS_MALFORMED_MAC | MAC address is malformed. |
| 4153 | 404 | RS_NO_STB_IP_FOUND | Could not resolve the IP address of the device. |
| 4154 | 404 | RS_INVALIDLINEUP_ID | Lineup ID not found for the server ID and region ID for that device. |
| 4155 | 400 | RS_BLOCKPINLOCKED | Incorrect PIN entered too many times. Retry later. |
| 4156 | 400 | RS_EASINPROGRESS | Request rejected because Emergency Alert System is in progress. Retry later. |
| 4157 | 400 | RS_TRICKMODESNOT ALLOWED | Request rejected because recording or recording playback is not in progress. |
| 4158 | 400 | RS_TRICKMODES UNSUPPORTEDVIEW | View does not support recording playback operations. |
| 4159 | 400 | RS_INVALIDPPVEVENT | Corresponding service ID not found at PPV event time. |
| 4160 | 400 | RS_INVALIDCHANNELTYPE | Invalid channel type specified. |
| 4161 | 400 | RS_PPVEVENTCANCEL FAILURE | Failed to cancel PPV event. Cancelation window has passed. |
| 4162 | 400 | RS_PPVEVENTCANCEL RECORDFAILURE | Failed to cancel PPV event recording. Cancelation window has passed. |
| 4163 | 400 | RS_PPVEVENTCANCEL WINDOWEXPIRED | Failed to cancel PPV event. Cancelation window has passed. |
| 4164 | 400 | RS_ALREADYSCHEDULED | Requested item is already scheduled. |
| 4299 | 400 | NEW_RACCESS_CODE | (Custom message.) |

**FLUX Service Errors**

FLUX server is a server in an MSO headend that services iGuide set-top boxes.

| Error Code | Status Code | Title          | Description              |
| ---------- | ----------- | -------------- | ------------------------ |
| 4400 | 400 | DVR_NOT_ENABLED | Digital video recording is not enabled on this device. |
| 4401 | 400 | TIME_EXPIRED | The recording time has already passed. |
| 4402 | 400 | RECORDING_CONFLICT | Requested recording conflicts with a scheduled recording. |
| 4403 | 400 | SERIES_RECORDING_EXISTS | Warning: Recording already exists. |
| 4404 | 400 | CANNOT_RECORD_PPV_ PROGRAMS | PPV programs cannot be recorded on this device. |
| 4405 | 400 | RECORDING_IN_PROGRESS | Recording is already in progress. |
| 4406 | 400 | NON_EXISTANT_ RECORDING_OR_REMINDER | Requested recording or reminder does not exist. |
| 4407 | 400 | INCORRECT_NUMBER_ OF_SERIES | Incorrect number of series provided. |
| 4408 | 400 | INVALID_SERIES_ID | Invalid series ID provided. |
| 4409 | 400 | RECORDED_ITEM_IN_USE | Recorded item is being used. |
| 4410 | 400 | PIN_NOT_SET | PIN is not set. Retry after setting PIN. |
| 4411 | 400 | INVALID_PIN | Invalid PIN provided. |
| 4412 | 400 | UNSUPPORTED_PIN_TYPE | Unsupported PIN type provided. |
| 4413 | 400 | PROGRAM_NOT_FOUND | Requested program not found. |
| 4414 | 400 | UNSUPPORTED_PROTOCOL_ VERSION | Requested protocol version is not supported. |
| 4415 | 400 | SETTINGS_LOCKED | Settings are locked. Retry after unlocking the settings. |
| 4416 | 400 | MAX_NUM_OF_REMINDERS_ REACHED | Maximum number of reminders exceeded. |
| 4417 | 400 | UNABLE_TO_REGISTER | Register operation failed to complete. |
| 4418 | 400 | INVALID_PRIORITY | Invalid priority provided. |
| 4419 | 400 | REQUEST_NOT_SUPPORTED | Requested operation is not supported. |
| 4420 | 400 | MAX_NUM_OF_SETTINGS_ EXCEEDED | Maximum number of settings exceeded. |
| 4421 | 400 | BELOW_MIN_NUM_OF_ SETTINGS | Number of settings less than required. |
| 4422 | 400 | UNKNOWN_SETTING_ IDENTIFIER | Setting identifier cannot be found. |
| 4423 | 400 | UNKNOWN_SERIES | Requested series is not recognized. |
| 4424 | 400 | INVALID_PARAMETER | Invalid parameter provided. |
| 4425 | 400 | UNABLE_TO_CHANGE_ NAME | Requested name change could not be completed. |
| 4426 | 400 | DISK_FULL | Hard disk is full. Retry after deleting some recordings. |
| 4427 | 400 | MAX_NUM_OF_RECORDINGS_ REACHED | Maximum number of recordings exceeded. Retry after deleting some recordings. |
| 4428 | 400 | TRANSACTION_PENDING | Requested transaction is pending. |
| 4429 | 400 | TRANSACTION_CANCELLED | Requested transaction has been canceled. |
| 4430 | 400 | SCHEDULE_DATA_ UNAVAILABLE | Operation failed because schedule data is unavailable. |
| 4431 | 404 | UNREACHABLE_STB | Unable to communicate with the device. Retry later. |
| 4432 | 400 | RECORDING_OR_ REMINDER_EXISTS | Requested recording or reminder already exists. |
| 4433 | 500 | DATABASE_ERROR | Communication error with database. |
| 4434 | 500 | SYSTEM_ERROR | System error. |
| 4435 | 400 | CORRUPT_MESSAGE | Requested operation cannot be performed. |
| 4436 | 404 | UNKNOWN_STB | Unknown device provided in request. |
| 4500 | 400 | RS_INVALIDPIN | Invalid PIN provided. |
| 4501 | 400 | RS_INVALIDCHANNEL | Channel not found in the channel map. |
| 4502 | 400 | RS_INVALIDPARAMETER | Invalid parameter provided. |
| 4503 | 400 | RS_CANNOTPLAYPROGRAM | Cannot play requested DVR program. |
| 4504 | 400 | RS_TUNERBUSY | All tuners are busy. Try again later. |
| 4505 | 400 | RS_TUNE_FAILED | Channel change failed. |
| 4506 | 400 | RS_PCBLOCKED | Channel is locked by Parental Control. |
| 4507 | 400 | RS_INCORRECTMODE | Playback control requested while not in playback mode. |
| 4508 | 400 | RS_ASSETPLAYING | Channel change not allowed during VOD movie or preview. |
| 4509 | 400 | RS_POWERISOFF | Channel change not allowed in standby mode. |
| 4510 | 400 | RS_EASINPROGRESS | Channel change not allowed when Emergency Alert System is in progress. |
| 4511 | 500 | RS_CODE_DATABASE_ERROR | Data error in database transaction. |
| 4512 | 404 | RS_INVALIDMACADDRESS | Request made for an invalid MAC address. |
| 4513 | 400 | RS_INVALIDSOURCEID | Invalid channel source ID provided. Source ID must be an integer. |
| 4514 | 400 | RS_ALREADYSCHEDULED | Requested program is already scheduled. |
| 4515 | 400 | RS_SOURCENOTAUTHORIZED | Requested source is not authorized. |
| 4516 | 400 | RS_FLUXRES_ TIMEOUTEXCEPTION | Database status update timeout. |
| 4517 | 400 | RS_FLUXRES_ GENERALEXCEPTION | System exception. |
| 4518 | 400 | RS_FLUXREQ_ MSGEXCEPTION | Failed to create message to set-top box. |
| 4598 | 400 | REST_API_ERROR | (Custom error message.) |
| 4599 | 400 | UNKNOWN_ERROR | (Custom error message.) |

## Response Headers

Rovi Cloud responses include some combination of the following headers, which are described in the table below.

Headers<br/>
*accept-ranges:*<br/>
&emsp;bytes<br/>
*access-control-allow-methods:*<br/>
&emsp;GET,OPTIONS<br/>
*access-control-allow-origin:*<br/>
&emsp;\*<br/>
*access-control-expose-headers:*<br/>
&emsp;X-Rovi-Model-Version,X-Rovi-Tag<br/>
*cache-control:*<br/>
&emsp;max-age=0, no-cache, no-store<br/>
*connection:*<br/>
&emsp;keep-alive<br/>
*content-encoding:*<br/>
&emsp;gzip<br/>
*content-length:*<br/>
&emsp;1251<br/>
*content-type:*<br/>
&emsp;application/json<br/>
*date:*<br/>
&emsp;Tue, 16 Jun 2015 22:41:17 GMT<br/>
*etag:*<br/>
&emsp;"0630a3dbbde25d1521e6c4184a4a5f20f"<br/>
*expires:*<br/>
&emsp;Tue, 16 Jun 2015 22:41:17 GMT<br/>
*last-modified:*<br/>
&emsp;Fri, 05 Jun 2015 00:35:36 GMT<br/>
*pragma:*<br/>
&emsp;no-cache<br/>
*vary:*<br/>
&emsp;Accept-Encoding<br/>
*x-rovi-model-version:*<br/>
&emsp;lookup movie: (r2.0.0-*) / (v2.2.6 in m2.2.06)<br/>
*x-rovi-tag:*<br/>
&emsp;template-wKgaaA-bivviup9<br/>
*xx-resolve-step-1-template:*<br/>
&emsp;http://cloud.rovicorp.com/data/2/2/lookup/movie.(*,)/{id}?in={in},{in2},{in3}<br/>
*xx-resolve-step-2-request:*<br/>
&emsp;http://cloud.rovicorp.com/data/2/2/lookup/movie.(*,)/914806985?in=en,,<br/>
*xx-templates-download-url:*<br/>
&emsp;http://cloud.rovicorp.com/data/2/2/lookup/movie.(*,)/914806985?in=en,,<br/>
*xx-resolve-tag:*<br/>
&emsp;api-wKgaaQ-7o2gr40j
 
| Header  | Description                                    |
| ------- | ---------------------------------------------- |
| accept-ranges | Data unit to use in a range header to request a portion of a response. Typically bytes. |
| access-control-allow-methods | Methods allowed to access the resource. |
| access-control-allow-origin | Which websites may make Cross-Origin Resource Sharing (CORS) requests. Typically asterisk (*). |
| access-control-expose-headers | Which headers may be used in CORS requests. |
| cache-control | Required cache directives for this response. |
| connection | Options desired for this particular connection. This header must be removed by forwarding proxies. |
| content-encoding | Encoding applied to the message body. Typically gzip. |
| content-length | Number of 8-bit bytes in the message body. |
| content-type | Media type of the message body. Typically application/json. |
| date | UTC date and time of the response. |
| etag | ETag for this response. |
| expires | UTC date and time the response is considered stale. |
| last modified | UTC date and time the response was last modified. |
| pragma | Directives to servers in the request/response chain. |
| vary | Request headers that determine whether a cache may reply to a subsequent request without revalidation. |
| x-rovi-model-version | State of the server. A CORS header. |
| x-rovi-sver | State of the server. A CORS header. |
| x-rovi-tag | Unique transaction ID for the request and key information for bug reports. Also a CORS header. |
| xx-resolve-step-1-template | Template for the request, returned only in the API Console. |
| xx-resolve-step-2-template | The request, returned only in the API Console. |
| xx-templates-download-url | The request, returned only in the API Console. |
| xx-resolve-tag | Transaction ID for an API Console request. |

## About Cache-Control Response Headers
If your contract with Rovi permits caching of Rovi data, you need to decide how to control the duration of cached data, that is, how long you return cached data before you need to refresh it. There are a couple of ways to do that: 1) by using the Cache-Control header fields returned in responses, and 2) by adjusting configuration settings in your cache software.

However you control the duration of cached data, the duration must meet the terms of your contract with Rovi. Cache-Control headers in a response do not authorize caching of Rovi data and do not authorize caching beyond the time allowed by your contract. The purpose of Cache-Control header fields is to give you a ready guideline for your caching. We modify these header values over time as we update our caching algorithms, and we reserve the right to do that at any time. Our caching guidelines are intended to give you the best possible certainty that you have the most current data available.

For guidelines about setting up your cache, please see the section **Caching Best Practices**.

Important: &nbsp; Caching of Rovi data is specifically prohibited unless contractually authorized. If you would like to cache Rovi data for your application, please contact your customer service representative about obtaining authorization.

Requests from the API Console do not return Cache-Control headers, but requests from your application will. Rovi Cloud returns the following cache response headers:

###### Cache-Control: max-age=

This is the number of seconds remaining until more recent data may be available from this request. When that time has elapsed, your cache should perform a new request to Rovi Cloud Services for that data before the cache fulfills additional requests for that data.

###### Cache-Control: must-revalidate

This header tells your cache that it must refresh response data with the Rovi API server, and not an intermediate cache, after data expires and before it fulfills additional requests for the data.

###### Last-Modified

This is the last time the data in the response changed, specified as GMT.

## Caching Best Practices

Caching is the temporary storage of web data so that later requests for that data can be served faster. When you use caching, your application can respond to data requests with data in the cache instead of executing another request for the data from Rovi.
 
If your contract with Rovi allows you to cache data, caching can reduce both your data delivery time and your transaction costs. Caching can also help unify Rovi-provided data under your own domain if you are using a browser-based client that follows the same-origin policy.
 
This section describes best practices for using caching with the Rovi Cloud APIs. We cover the basics of using caching and how to design your Rovi Cloud calls to make the most of your caches.

### Types of Caches
 
We recommend the use of both local and intermediate caches to cache Rovi data:

 +   A local cache is a cache that is located on the same box or device as your application.
 +   An intermediate cache is a cache that is located between your clients and Rovi Cloud.

#### Local Cache

A local cache is a cache that is located on the same box or device as your application.

We recommend making use of a local cache for each client in order to hold, and perhaps even prefetch, data for the customer. Using a local cache, you can ensure that whenever your customer reviews data they previously requested, the data can be displayed instantly without requiring another request back to the cloud. 

We recommend that you keep a local cache of all data immediately relevant to the end user. 

The local cache represents the best value to the customer, but local caches are often limited in size and so may not hold all of the data a customer might ask for. Because of this, we also recommend using an intermediate cache as described next. 

#### Intermediate Caches

In addition to local caches, we recommend using an intermediate cache between your clients and Rovi Cloud. There are typically two forms of intermediate caches you can use: Reverse Proxy Gateways and Content Delivery Networks.

<center><img src="http://dev-widgetads-origin.rovicorp.com/AdGraphics/Condor/API_Console/TwoCacheTypes.png" alt="Two Types of Intermediate Caches" width="349"></center>

###### Reverse Proxy Gateway Cache

A reverse proxy gateway cache can take the form of a set of off-the-shelf HTTP caching servers (such as Squid, Apache, or Varnish) that clients call back through. The proxy cache mediates all communication between your customers and Rovi Cloud, and caches responses from Rovi Cloud. The proxy cache is shared across your customers, and so can serve previously requested data to all of your customers without needing to hit Rovi Cloud for your most commonly requested data. 

From a network topology perspective, you are routing clients through your proxy cache, which places your proxy cache location at the center of your clients' routes to obtain data from Rovi Cloud. This may work well if your cache is centrally located, but may pose additional latency if some of your customers are far from that location. You can, of course, set up multiple proxy locations, and route your clients to the nearest cache, but each proxy cache will then act as an independent cache. 

Using the proxy cache, you control how much infrastructure to deploy, and you don't have to pay a monthly fee (there are many open-source HTTP caching servers that run on Linux). A proxy cache can be as simple as a single server, or as complex as a tier of interconnected servers. If you do wish to employ more than one machine, we recommend a tiered approach of a single Alpha cache that is fronted by N independent Beta caches.

<center><img src="http://dev-widgetads-origin.rovicorp.com/AdGraphics/Condor/API_Console/ProxyCaches.png" alt="Proxy Caches" width="434"></center>

An Alpha cache works as the primary cache: when any customer requests Rovi Cloud data, the data is added to the primary cache and becomes available to all other users. But a single Alpha cache may have trouble keeping up with load and represents a single point of failure. To mitigate this, place N Beta cache servers in front of the Alpha cache, and use a load balancer to distribute requests to the Betas. Client requests then go to one of the Betas, which in turn will go to the Alpha if the Beta does not have the content. Rovi Cloud will then be called only if the Alpha server does not have the content. Over time, all of the cached data in the Alpha will be promoted up to the Betas, and you will have a lot more redundancy in case one or more of your servers goes down. 

###### Content Delivery Network Cache

As an alternative to setting up your own proxy cache, you can pay a Content Delivery Network (CDN), such as Akamai or Limelight, to act as a proxy cache for you. This is known as "caching as a service." CDNs typically charge for the amount of traffic they proxy. 

The main benefit to using a CDN is that it edges out content close to your clients, which reduces the latency for your clients if they are geographically distributed. Generally speaking, your customers may get greater benefit from a CDN, but a CDN may cost more than standing up your own proxy cache.         

###### Unifying Your Domain for HTML5 Applications

Both forms of intermediate caches provide an additional benefit: they can redistribute Rovi Cloud data under your own domain. Why would you want to do that? Because browser-based HTML5 applications follow a same-origin policy: the HTML page and the JSON data received through AJAX calls must originate from the same domain. Since you can expose the cache under your domain, you can use the cache to unify Rovi data under your own domain. Very often, HTML5 applications make use of a CDN anyway, to accelerate the HTML, Javascript, and media portions of the application. Leveraging your CDN to also accelerate Rovi Cloud data solves all of those problems at once. 

<center><img src="http://dev-widgetads-origin.rovicorp.com/AdGraphics/Condor/API_Console/unified-cdn.png" alt="Unifying Your Domain for HTML5 Applications" width="364"></center>

### Cache Directives

When you set up a cache, you need to decide how to control the duration of cached data, that is, how long you return cached data before you need to refresh it. There are a couple of ways to do that: 1) by using the Cache-Control header fields returned in responses, and 2) by configuration settings in your cache software.

However you control the duration of cached data, the duration must meet the terms of your contract with Rovi. 

#### Cache-Control Headers

Rovi includes standard HTTP 1.1 Cache-Control header fields in API responses. These header fields represent our best estimate of how long you should store data in order to obtain the best trade-off between cache reuse and data freshness. 

By providing Cache-Control header fields, Rovi can optimize the Time To Live (TTL) directives of different content in order to maximize this trade-off. For example, if we know that the data for a particular response is unlikely to change, we can set a long TTL; while more volatile data may be given a shorter TTL. 

Cache-Control header fields give you a ready guideline for your caching. We will modify these header values over time as we update our caching algorithms, and we reserve the right to do that at any time. 

Note: Your use of Cache-Control header fields, like your use of caching in general, is subject to the terms of your contract with Rovi. Cache-Control header fields do not authorize any use of caching that is not permitted by the terms of your contract. 

#### Managed Cache Configuration

Alternatively, if your contract with Rovi permits caching, you can also choose to ignore the Cache-Control header fields and configure your cache so it caches content in a different manner, in accordance with your contract with Rovi. Exactly what right you have to cache, if any, is determined by your contract with Rovi. 

You may, for example, have the right to cache Rovi data for up to 12 hours. In this case, you can configure your caches to cache data for up to 12 hours, regardless of any cache control headers in the responses. Most caches, both local and in the cloud, allow you to configure the cache directives directly.

#### Using ETags to Check Whether a Response Has Changed

Rovi sends an ETag (entity tag) header value with every response. That ETag value remains the same until the response changes. What can you do with that? You can check anytime whether a response has changed by sending the same request with an If-None-Match header that includes that ETag value. If the response has not changed, Rovi returns a 304 status code, Not Modified, and no data.

Here's a sample ETag in a response header:

ETag:"0faab13e3a16cd1f3838c49536d531be4"

Here's a sample request header, using that ETag:

`If-None-Match: "0faab13e3a16cd1f3838c49536d531be4"`

Note that the quotes are part of the ETag.

Using ETags verifies the freshness of the data and reduces network traffic. If the data has changed, Rovi sends the fresh response.

Either way, sending a request with an If-None-Match header restarts your cache clock. But, like every request, it does count against your throttling limits.

#### Using Data_Delta Requests to Update Cached Data

Another way to keep your cached data up to date is to regularly get IDs of data that changed and to update the cache with that data. Rovi Cloud offers the data_delta requests for this purpose.

The data_delta requests return IDs and ETags for response data that changed during a single UTC date one to four days ago.

Call the data_delta requests on a regular schedule, say every one to four days. Then use those IDs to update your cache with the changed response data. If you use ETags, use the corresponding ETag for each ID to check whether the data has already been updated in the cache.

Rovi Cloud currently offers the following data_delta requests. We will be adding more soon.

| Data Request | Corresponding Data_Delta Request |
| ------------ | -------------------------------- |
| [data_movie](/#reference/movie/datamovie)       | [data_delta_movie](/#reference/movie/datadeltamovie) |
| [data_series](/#reference/series/dataseries)    | [data_delta_series](/#reference/series/datadeltaseries) |
| [data_season](/#reference/season/dataseason)    | [data_delta_season](/#reference/season/datadeltaseason) |
| [data_episode](/#reference/episode/dataepisode) | [data_delta_episode](/#reference/episode/datadeltaepisode) |
| [data_other](/#reference/other/dataother)       | [data_delta_other](/#reference/other/datadeltaother) |
| [data_person](/#reference/person/dataperson)    | [data_delta_person](/#reference/person/datadeltaperson) |

### Preparing Your Caches

There are a few things to consider up front to ensure that you will be able to make the most use of your local and shared caches. Some of these relate to how your caches are configured, while others relate to the expected traffic patterns of your clients. 

#### Cache Configuration

Here's some advice about configuring your caches.

###### Pay Attention to Query String Parameters

In general, you need to configure your cache to pay attention to query string parameters. Query string parameters are request parameters that come after the question mark in the URI and take the form of parameter=value, such as country=CA. The Rovi Cloud API passes most request parameters as query strings, so the cache needs to use those parameters to distinguish requests.

###### Retry 403 Over-Per-Second Responses

There is one error message that both your local and intermediate cache should watch for. This is the error message from the Rovi API hosting service that tells you that the maximum number of requests you are contractually allowed during one second have already been received: 

`403 Account Over Queries Per Second Limit`

Because this error message indicates a temporary limit of one second, simply retrying the request from your intermediate cache gives you a faster way of resolving the problem than relaying the message back to the client to try again. We recommend using an exponential backoff algorithm for retrying these requests. 

In addition, we strongly recommend that this retry logic also be implemented by your client in case the intermediate cache is down or gives up, and the error message does make it back to your client. 

Other 403 error messages, such as Forbidden, should NOT be handled in the same way. Those error messages represent real problems that are not resolvable with a simple retry. 

#### Sharp-Onset Traffic Spikes

It sounds simple: When you have an intermediate cache, one client requests some data, the data gets added the cache, and so when the next group of clients request that same data, the data is already in the cache. 

But there is one situation that circumvents an intermediate cache: a large number of clients all making the same initial request at once. The response doesn't make it into the cache because they all hit at once, so the requests all go to Rovi Cloud and perhaps hit your transaction-per-second limit. 

The solution is to employ logic that discourages a large number of clients from all making that initial request at the same time. This section describes two ways to do that. 

###### Randomize Automated Download Times Across Clients

One reason that traffic spikes can occur is synchronization of clients. If, for example, your client expects to download listings data every hour, it might be configured to download that data exactly on the hour. If that happens, every client you have will try to request their data at the top of the hour, which will create a sharp-onset traffic spike. 

You should take steps to ensure that your clients are as unsynchronized as possible. If you are downloading data asynchronously, we recommend finding ways to randomize the timing of your clients so that their requests are uniformly distributed. 

###### Warm the Cache Before Spikes

Another reason traffic spikes can occur is synchronization of humans. This commonly happens because an event such as a series finale or a sporting event is about to start. 

If you have reason to believe that people are creating sharp-onset traffic spikes, one possible mitigation is to warm your cache ahead of the spike by running a script to request the most-likely Rovi Cloud requests through your cache. That script does not have to live on your clients. That script can originate from anywhere, as long as it calls through the same cache as your clients. 

### Preparing Requests

The key to optimizing your caches, especially shared caches, is to design your client so that all clients use common URIs for common requests. Ideally, you want your clients in the field to use as few unique URIs as possible. Therefore you need to look carefully at how you construct your requests to Rovi Cloud so you encourage high cache hit rates through the URIs and traffic patterns you create.

#### Try to Constrain Variables

The first step is to look carefully at the calls you will be making and to constrain as many parameters to as few values as possible. Ideally, you want most of the parameters on the call to have fixed values that are universally applicable to all of your clients. For those parameters that can't be fixed, try to limit them to as few values as possible. 

You may find that some parameters have the same value for all calls, such as **country** and **language**. This means that the actual hit rate for a particular call will be determined mainly by the combination of values in other parameters. 

#### Create Requests the Same Way Every Time

Naturally, you should make sure that your clients all create a URI in the same way when they are making the same request. Most caches will ignore the order of query string parameters, but keeping the same order may make the cache even more efficient. The best way to accomplish that is to build requests from the URI templates in your templates file.

Avoid making a call that is a subset of a previous call. If the response data is in the cache, it would be better to get that data and use just the data you need. For example, if your client makes a call for upcoming local broadcasts in the comedy genre with discover_all_video_by_genre/content, it may be unnecessary to make a second request for movies in the same genre because the response to the first request includes movies. Just make the request for content, even if the client sometimes ignores the movies. That way the cache would be filled with the data and the subsequent request would find it in the cache.

## Support

Please report all issues, requests, and questions to [Rovi Developer Support](https://developers.rovicorp.com/reportissue/).

We are here to help you achieve the results you want.

# Group Templates File
If you haven't signed up for a data subscription yet, you should look at this call to see what a templates file looks like. This is just a sample, though; the templates in your file are based on the data you sign up to receive.

# Templates [/template/v1/8dd6285023ac4311c83ab2dbc73bd70390b618edf584cc0a96e194d63504092b/1/templates.json]
Click GET below to see the sample.

Notice that a templates file contains the following objects:

* schema &mdash; The link to your custom documentation (the customized version of the file you are now reading).
* templates &mdash; The URI templates, listed by name in alpha sequence.

## GET

+ Response 200 (application/json)
    ```
    {
      "schema": "http://cloud.rovicorp.com/api/v1/8dd6285023ac4311c83ab2dbc73bd70390b618edf584cc0a96e194d63504092b/1/api.raml",
      "templates": {
        "data_airing": "http://cloud.rovicorp.com/data/2/2/lookup/airing/{id}",
        "data_airing_credits": {
          "cast": "http://cloud.rovicorp.com/data/2/2/lookup/airing/{id}/credits;isCast=true?page={page}&size=20&by={by}",
          "credits": "http://cloud.rovicorp.com/data/2/2/lookup/airing/{id}/credits?page={page}&size=20&by={by}",
          "crew": "http://cloud.rovicorp.com/data/2/2/lookup/airing/{id}/credits;isCast=false?page={page}&size=20&by={by}"
        },
        "data_airing_synopses": {
          "best": "http://cloud.rovicorp.com/data/2/2/lookup/airing/{id}/synopses/first?by=length%3D{length},length%3D{length2},length%3D{length3},length%3D{length4}&in={in},{in2},{in3}",
          "collection": "http://cloud.rovicorp.com/data/2/2/lookup/airing/{id}/synopses?in={in},{in2},{in3}"
        },
        "data_award": "http://cloud.rovicorp.com/data/2/2/lookup/award/{id}?in={in},{in2},{in3}",
        "data_browse_service": "http://cloud.rovicorp.com/data/2/2/browse/service;country={country};postalCode={postalCode};msoId={msoId};offering=AU,BR,CA,CN,IN,EUR,LTA,RU,SEA,US,TR?idns=iguide,source,program,service&page={page}&size=20",
        "data_content_images": {
          "best": "http://cloud.rovicorp.com/data/2/2/batch/content/{id},{id2},{id3}/images/first?by={by},{by2},{by3},{by4},{by5}&in={in},{in2},{in3}",
          "collection": "http://cloud.rovicorp.com/data/2/2/lookup/content/{id}/images?size=50&page={page}&in={in},{in2},{in3}"
        },
        "data_delta_episode": "http://cloud.rovicorp.com/data/2/2/delta/episode?day={day}&size=100&next={next}",
        "data_delta_movie": "http://cloud.rovicorp.com/data/2/2/delta/movie?day={day}&size=100&next={next}",
        "data_delta_other": "http://cloud.rovicorp.com/data/2/2/delta/other?day={day}&size=100&next={next}",
        "data_delta_person": "http://cloud.rovicorp.com/data/2/2/delta/person?day={day}&size=100&next={next}",
        "data_delta_season": "http://cloud.rovicorp.com/data/2/2/delta/season?day={day}&size=100&next={next}",
        "data_delta_series": "http://cloud.rovicorp.com/data/2/2/delta/series?day={day}&size=100&next={next}",
        "data_episode": "http://cloud.rovicorp.com/data/2/2/lookup/episode.(*,moods,tones,themes,keywords,aesthetics,audiences,periods,characters,importance,flags)/{id}?in={in},{in2},{in3}",
        "data_episode_aired": "http://cloud.rovicorp.com/data/2/2/lookup/episode/{id}/aired;country={country}?page={page}&size=50",
        "data_episode_appearances": "http://cloud.rovicorp.com/data/2/2/lookup/episode/{id}/service/{serviceId};offering=AU,BR,CA,CN,IN,EUR,LTA,RU,SEA,US,TR/appearances/{date}?size=20&page={page}",
        "data_episode_credits": {
          "cast": "http://cloud.rovicorp.com/data/2/2/lookup/episode/{id}/credits;isCast=true?page={page}&size=20&by={by},{by2},{by3},{by4},{by5}&in={in},{in2},{in3}",
          "credits": "http://cloud.rovicorp.com/data/2/2/lookup/episode/{id}/credits?page={page}&size=20&by={by},{by2},{by3},{by4},{by5}&in={in},{in2},{in3}",
          "crew": "http://cloud.rovicorp.com/data/2/2/lookup/episode/{id}/credits;isCast=false?page={page}&size=20&by={by},{by2},{by3},{by4},{by5}&in={in},{in2},{in3}"
        },
        "data_episode_ratings": "http://cloud.rovicorp.com/data/2/2/lookup/episode/{id}/ratings;countries={country}",
        "data_episode_releases": "http://cloud.rovicorp.com/data/2/2/lookup/episode/{id}/releases?in={in},{in2},{in3}&page={page}&size=50",
        "data_episode_synopses": {
          "best": "http://cloud.rovicorp.com/data/2/2/lookup/episode/{id}/synopses/first?by=length%3D{length},length%3D{length2},length%3D{length3},length%3D{length4}&in={in},{in2},{in3}",
          "collection": "http://cloud.rovicorp.com/data/2/2/lookup/episode/{id}/synopses?in={in},{in2},{in3}"
        },
        "data_movie": "http://cloud.rovicorp.com/data/2/2/lookup/movie.(*,moods,tones,themes,keywords,aesthetics,audiences,periods,characters,importance,flags,rottenTomatoes,facebooks,twitters)/{id}?in={in},{in2},{in3}",
        "data_movie_aired": "http://cloud.rovicorp.com/data/2/2/lookup/movie/{id}/aired;country={country}?page={page}&size=50",
        "data_movie_appearances": "http://cloud.rovicorp.com/data/2/2/lookup/movie/{id}/service/{serviceId};offering=AU,BR,CA,CN,IN,EUR,LTA,RU,SEA,US,TR/appearances/{date}?size=20&page={page}",
        "data_movie_awards": "http://cloud.rovicorp.com/data/2/2/lookup/movie/{id}/awards?in={in},{in2},{in3}&page={page}&size=20&by={by}",
        "data_movie_credits": {
          "cast": "http://cloud.rovicorp.com/data/2/2/lookup/movie/{id}/credits;isCast=true?in={in},{in2},{in3}&page={page}&size=20&by={by}",
          "credits": "http://cloud.rovicorp.com/data/2/2/lookup/movie/{id}/credits?in={in},{in2},{in3}&page={page}&size=20&by={by}",
          "crew": "http://cloud.rovicorp.com/data/2/2/lookup/movie/{id}/credits;isCast=false?in={in},{in2},{in3}&page={page}&size=20&by={by}"
        },
        "data_movie_ratings": "http://cloud.rovicorp.com/data/2/2/lookup/movie/{id}/ratings;countries={country}",
        "data_movie_related": "http://cloud.rovicorp.com/data/2/2/lookup/movie/{id}/related;relation={relation}?in={in},{in2},{in3}&page={page}&size=50",
        "data_movie_releases": "http://cloud.rovicorp.com/data/2/2/lookup/movie/{id}/releases?in={in},{in2},{in3}&page={page}&size=50",
        "data_movie_review": "http://cloud.rovicorp.com/data/2/2/lookup/movie/{id}/review?in={in},{in2},{in3}",
        "data_movie_synopses": {
          "best": "http://cloud.rovicorp.com/data/2/2/lookup/movie/{id}/synopses/first?by=length%3D{length},length%3D{length2},length%3D{length3},length%3D{length4}&in={in},{in2},{in3}",
          "collection": "http://cloud.rovicorp.com/data/2/2/lookup/movie/{id}/synopses?in={in},{in2},{in3}"
        },
        "data_movie_theatricals": "http://cloud.rovicorp.com/data/2/2/lookup/movie.(*,)/{id}/theatricals?page={page}&size=50",
        "data_name_images": {
          "best": "http://cloud.rovicorp.com/data/2/2/batch/name/{id},{id2},{id3}/images;type=/first?by={by},{by2},{by3},{by4},{by5}&in={in},{in2},{in3}",
          "collection": "http://cloud.rovicorp.com/data/2/2/lookup/name/{id}/images;type=?size=50&page={page}&in={in},{in2},{in3}"
        },
        "data_other": "http://cloud.rovicorp.com/data/2/2/lookup/other.(*,rottenTomatoes,facebooks,twitters)/{id}?in={in},{in2},{in3}",
        "data_other_aired": "http://cloud.rovicorp.com/data/2/2/lookup/other/{id}/aired;country={country}?page={page}&size=50",
        "data_other_appearances": "http://cloud.rovicorp.com/data/2/2/lookup/other/{id}/service/{serviceId};offering=AU,BR,CA,CN,IN,EUR,LTA,RU,SEA,US,TR/appearances/{date}?size=20&page={page}",
        "data_other_awards": "http://cloud.rovicorp.com/data/2/2/lookup/other/{id}/awards?in={in},{in2},{in3}&page={page}&size=20&by={by}",
        "data_other_credits": {
          "cast": "http://cloud.rovicorp.com/data/2/2/lookup/other/{id}/credits;isCast=true?page={page}&size=20&by={by},{by2},{by3},{by4},{by5}&in={in},{in2},{in3}",
          "credits": "http://cloud.rovicorp.com/data/2/2/lookup/other/{id}/credits?page={page}&size=20&by={by},{by2},{by3},{by4},{by5}&in={in},{in2},{in3}",
          "crew": "http://cloud.rovicorp.com/data/2/2/lookup/other/{id}/credits;isCast=false?page={page}&size=20&by={by},{by2},{by3},{by4},{by5}&in={in},{in2},{in3}"
        },
        "data_other_ratings": "http://cloud.rovicorp.com/data/2/2/lookup/other/{id}/ratings;countries={country}",
        "data_other_related": "http://cloud.rovicorp.com/data/2/2/lookup/other/{id}/related;relation={relation}?in={in},{in2},{in3}&page={page}&size=50",
        "data_other_releases": "http://cloud.rovicorp.com/data/2/2/lookup/other/{id}/releases?in={in},{in2},{in3}&page={page}&size=50",
        "data_other_synopses": {
          "best": "http://cloud.rovicorp.com/data/2/2/lookup/other/{id}/synopses/first?by=length%3D{length},length%3D{length2},length%3D{length3},length%3D{length4}&in={in},{in2},{in3}",
          "collection": "http://cloud.rovicorp.com/data/2/2/lookup/other/{id}/synopses?in={in},{in2},{in3}"
        },
        "data_other_theatricals": "http://cloud.rovicorp.com/data/2/2/lookup/other.(*,)/{id}/theatricals?page={page}&size=50",
        "data_person": "http://cloud.rovicorp.com/data/2/2/lookup/person.(*,facebooks,twitters,image:type=:first)/{id}?in={in},{in2},{in3}",
        "data_person_appearances": "http://cloud.rovicorp.com/data/2/2/lookup/person/{id}/service/{serviceId};offering=AU,BR,CA,CN,IN,EUR,LTA,RU,SEA,US,TR/appearances/{date}?size=20&page={page}",
        "data_person_awards": "http://cloud.rovicorp.com/data/2/2/lookup/person/{id}/awards?in={in},{in2},{in3}&page={page}&size=20&by={by}",
        "data_person_bios": "http://cloud.rovicorp.com/data/2/2/lookup/person/{id}/bios;type={type}?in={in},{in2},{in3}",
        "data_person_filmography": "http://cloud.rovicorp.com/data/2/2/lookup/person/{id}/filmography?in={in},{in2},{in3}&page={page}&size=20",
        "data_person_relatives": "http://cloud.rovicorp.com/data/2/2/lookup/person/{id}/relatives?in={in},{in2},{in3}&page={page}&size=50",
        "data_release": "http://cloud.rovicorp.com/data/2/2/lookup/release/{id}?in={in},{in2},{in3}",
        "data_release_aired": "http://cloud.rovicorp.com/data/2/2/lookup/release/{id}/aired;country={country}?page={page}&size=50",
        "data_release_credits": {
          "cast": "http://cloud.rovicorp.com/data/2/2/lookup/release/{id}/credits;isCast=true?in={in},{in2},{in3}&page={page}&size=20&by={by}",
          "credits": "http://cloud.rovicorp.com/data/2/2/lookup/release/{id}/credits?in={in},{in2},{in3}&page={page}&size=20&by={by}",
          "crew": "http://cloud.rovicorp.com/data/2/2/lookup/release/{id}/credits;isCast=false?in={in},{in2},{in3}&page={page}&size=20&by={by}"
        },
        "data_release_images": {
          "best": "http://cloud.rovicorp.com/data/2/2.4/batch/release/{id},{id2},{id3}/images/first?by={by},{by2},{by3},{by4},{by5}&in={in},{in2},{in3}",
          "collection": "http://cloud.rovicorp.com/data/2/2.4/lookup/release/{id}/images?size=50&page={page}&in={in},{in2},{in3}"
        },
        "data_release_ratings": "http://cloud.rovicorp.com/data/2/2/lookup/release/{id}/ratings;countries={country}?page={page}&size=50",
        "data_release_synopses": {
          "best": "http://cloud.rovicorp.com/data/2/2/lookup/release/{id}/synopses/first?by=length%3D{length},length%3D{length2},length%3D{length3},length%3D{length4}&in={in},{in2},{in3}",
          "collection": "http://cloud.rovicorp.com/data/2/2/lookup/release/{id}/synopses?in={in},{in2},{in3}"
        },
        "data_release_theatricals": "http://cloud.rovicorp.com/data/2/2/lookup/release.(*,)/{id}/theatricals?page={page}&size=50",
        "data_season": "http://cloud.rovicorp.com/data/2/2/lookup/season/{id}?in={in},{in2},{in3}",
        "data_season_episodes": "http://cloud.rovicorp.com/data/2/2/lookup/season/{id}/episodes?page={page}&size=20",
        "data_season_synopses": {
          "best": "http://cloud.rovicorp.com/data/2/2/lookup/season/{id}/synopses/first?by=length%3D{length},length%3D{length2},length%3D{length3},length%3D{length4}&in={in},{in2},{in3}",
          "collection": "http://cloud.rovicorp.com/data/2/2/lookup/season/{id}/synopses?in={in},{in2},{in3}"
        },
        "data_series": "http://cloud.rovicorp.com/data/2/2/lookup/series.(*,moods,tones,themes,keywords,aesthetics,audiences,periods,characters,importance,flags,facebooks,twitters)/{id}?in={in},{in2},{in3}",
        "data_series_appearances": "http://cloud.rovicorp.com/data/2/2/lookup/series/{id}/service/{serviceId};offering=AU,BR,CA,CN,IN,EUR,LTA,RU,SEA,US,TR/appearances/{date}?size=20&page={page}",
        "data_series_awards": "http://cloud.rovicorp.com/data/2/2/lookup/series/{id}/awards?in={in},{in2},{in3}&page={page}&size=20&by={by}",
        "data_series_credits": {
          "cast": "http://cloud.rovicorp.com/data/2/2/lookup/series/{id}/credits;isCast=true?page={page}&size=20&by={by},{by2},{by3},{by4},{by5}&in={in},{in2},{in3}",
          "credits": "http://cloud.rovicorp.com/data/2/2/lookup/series/{id}/credits?page={page}&size=20&by={by},{by2},{by3},{by4},{by5}&in={in},{in2},{in3}",
          "crew": "http://cloud.rovicorp.com/data/2/2/lookup/series/{id}/credits;isCast=false?page={page}&size=20&by={by},{by2},{by3},{by4},{by5}&in={in},{in2},{in3}"
        },
        "data_series_history": "http://cloud.rovicorp.com/data/2/2/lookup/series/{id}/history?page={page}&size=50",
        "data_series_ratings": "http://cloud.rovicorp.com/data/2/2/lookup/series/{id}/ratings;countries={country}",
        "data_series_seasons": "http://cloud.rovicorp.com/data/2/2/lookup/series/{id}/seasons?page={page}&size=20&in={in},{in2},{in3}",
        "data_series_specials": "http://cloud.rovicorp.com/data/2/2/browse/episode.(id=$series.id,links=.(data_series_episodes=.(id=$series.id),data_series=.(id=$series.id)),id,r_episode,title,withinSeries);series.id={id};season=null?page={page}&size=20",
        "data_series_synopses": {
          "best": "http://cloud.rovicorp.com/data/2/2/lookup/series/{id}/synopses/first?by=length%3D{length},length%3D{length2},length%3D{length3},length%3D{length4}&in={in},{in2},{in3}",
          "collection": "http://cloud.rovicorp.com/data/2/2/lookup/series/{id}/synopses?in={in},{in2},{in3}"
        },
        "data_service": "http://cloud.rovicorp.com/data/2/2/lookup/service/{id}?idns=iguide,source,program,service",
        "data_service_channels": {
          "bulk": "http://cloud.rovicorp.com/data/2/2/lookup/service/{id};offering=AU,BR,CA,CN,IN,EUR,LTA,RU,SEA,US,TR/channels?idns=iguide,source,program,service&page={page}&size=50",
          "screen": "http://cloud.rovicorp.com/data/2/2/lookup/service/{id};offering=AU,BR,CA,CN,IN,EUR,LTA,RU,SEA,US,TR/channels?idns=iguide,source,program,service&page={page}&size=10",
          "single": "http://cloud.rovicorp.com/data/2/2/lookup/service/{id};offering=AU,BR,CA,CN,IN,EUR,LTA,RU,SEA,US,TR/channels?idns=iguide,source,program,service&page={page}&size=1"
        },
        "data_service_schedules": {
          "bulk": "http://cloud.rovicorp.com/data/2/2/lookup/service/{id};offering=AU,BR,CA,CN,IN,EUR,LTA,RU,SEA,US,TR/schedule/{date}?page={page}&size=50&duration=6&block={block}&inprogress=false",
          "screen": "http://cloud.rovicorp.com/data/2/2/lookup/service/{id};offering=AU,BR,CA,CN,IN,EUR,LTA,RU,SEA,US,TR/schedule/{date}?page={page}&size=10&duration=4&block={block}&inprogress=true",
          "single": "http://cloud.rovicorp.com/data/2/2/lookup/service/{id};offering=AU,BR,CA,CN,IN,EUR,LTA,RU,SEA,US,TR/schedule/{date}?page={page}&size=1&duration=24&inprogress=true"
        },
        "data_source": "http://cloud.rovicorp.com/data/2/2/lookup/source/{id}?idns=iguide,source,program,service",
        "data_source_airings": {
          "single": "http://cloud.rovicorp.com/data/2/2/lookup/source/{id}/airings/{date}?duration=24&inprogress=true"
        },
        "data_source_logos": {
          "best": "http://cloud.rovicorp.com/data/2/2/batch/source/{id},{id2},{id3}/logos/first?by={by},{by2},{by3},{by4},{by5}&in={in},{in2},{in3}",
          "collection": "http://cloud.rovicorp.com/data/2/2/lookup/source/{id}/logos?size=50&page={page}&in={in},{in2},{in3}"
        },
        "discover_all_trending_video": {
          "content": "http://cloud.rovicorp.com/discover/2/2/search?serviceId={serviceId}&SC=2-MySignature--101,MySignatureTopics--47&un=kramer_trends&app=TVTAP&DS=255&RFTR=256&PN=524301&XUA=rovicondor&ECT=5&ver=3.0&RCty=search&me=discover_all_trending_video&sub=content&criteria=os-next&RPR=10&by={by}&os={next}",
          "movies": "http://cloud.rovicorp.com/discover/2/2/search?serviceId={serviceId}&SC=2-MySignature--101,MySignatureTopics--47&un=kramer_trends&app=TVTAP&DS=255&RFTR=256&PN=524301&XUA=rovicondor&ECT=5&ver=3.0&RCty=search&me=discover_all_trending_video&sub=movies&criteria=os-next&RPR=10&by={by}&os={next}&TypeFilter=movie,sequel",
          "series": "http://cloud.rovicorp.com/discover/2/2/search?serviceId={serviceId}&SC=2-MySignature--101,MySignatureTopics--47&un=kramer_trends&app=TVTAP&DS=255&RFTR=256&PN=524301&XUA=rovicondor&ECT=5&ver=3.0&RCty=search&me=discover_all_trending_video&sub=series&criteria=os-next&RPR=10&by={by}&os={next}&TypeFilter=tvseries,episode",
          "sports": "http://cloud.rovicorp.com/discover/2/2/search?serviceId={serviceId}&SC=2-MySignature--101,MySignatureTopics--47&un=kramer_trends&app=TVTAP&DS=255&RFTR=256&PN=524301&XUA=rovicondor&ECT=5&ver=3.0&RCty=search&me=discover_all_trending_video&sub=sports&criteria=os-next&RPR=10&by={by}&os={next}&TypeFilter=Game,Team,Tournament,SportsGroup"
        },
        "discover_all_video_by_conversation": {
          "content": "http://cloud.rovicorp.com/discover/2/2/conversation?W={query}&serviceId={serviceId}&ECT=5&ver=3.0&XUA=rovicondor&PN=524300&RFTR=256&me=discover_all_video_by_conversation&sub=content&criteria=W-query,vsc-context&RPR=10&vsc={context}"
        },
        "discover_all_video_by_genre": {
          "content": "http://cloud.rovicorp.com/discover/2/2/search?name={genre}&serviceId={serviceId}&DS=255&RPR=10&by={by}&RFTR=256&PN=524300&XUA=rovicondor&ECT=5&ver=3.0&me=discover_all_video_by_genre&sub=content&criteria=name-genre&os={next}&sc={context}",
          "movies": "http://cloud.rovicorp.com/discover/2/2/search?name={genre}&serviceId={serviceId}&DS=255&RFTR=256&RPR=10&by={by}&PN=524300&XUA=rovicondor&ECT=5&ver=3.0&me=discover_all_video_by_genre&sub=movies&criteria=name-genre&os={next}&sc={context}&TypeFilter=movie,sequel",
          "series": "http://cloud.rovicorp.com/discover/2/2/search?name={genre}&serviceId={serviceId}&DS=255&RFTR=256&RPR=10&by={by}&PN=524300&XUA=rovicondor&ECT=5&ver=3.0&me=discover_all_video_by_genre&sub=series&criteria=name-genre&os={next}&sc={context}&TypeFilter=tvseries,episode",
          "sports": "http://cloud.rovicorp.com/discover/2/2/search?name={genre}&serviceId={serviceId}&DS=255&RFTR=256&RPR=10&by={by}&PN=524300&XUA=rovicondor&ECT=5&ver=3.0&me=discover_all_video_by_genre&sub=sports&criteria=name-genre&os={next}&sc={context}&TypeFilter=Game,Team,Tournament,SportsGroup"
        },
        "discover_all_video_by_search": {
          "content": "http://cloud.rovicorp.com/discover/2/2/search?W={query}&serviceId={serviceId}&DS=255&RFTR=256&PN=524300&XUA=rovicondor&ECT=5&ver=3.0&me=discover_all_video_by_search&sub=content&criteria=W-query,os-next,sc-context&RPR=10&by={by}&os={next}&sc={context}",
          "movies": "http://cloud.rovicorp.com/discover/2/2/search?W={query}&serviceId={serviceId}&DS=255&RFTR=256&PN=524300&XUA=rovicondor&ECT=5&ver=3.0&me=discover_all_video_by_search&sub=movies&criteria=W-query,os-next,sc-context&RPR=10&by={by}&os={next}&sc={context}&TypeFilter=movie,sequel",
          "series": "http://cloud.rovicorp.com/discover/2/2/search?W={query}&serviceId={serviceId}&DS=255&RFTR=256&PN=524300&XUA=rovicondor&ECT=5&ver=3.0&me=discover_all_video_by_search&sub=series&criteria=W-query,os-next,sc-context&RPR=10&by={by}&os={next}&sc={context}&TypeFilter=tvseries,episode",
          "sports": "http://cloud.rovicorp.com/discover/2/2/search?W={query}&serviceId={serviceId}&DS=255&RFTR=256&PN=524300&XUA=rovicondor&ECT=5&ver=3.0&me=discover_all_video_by_search&sub=sports&criteria=W-query,os-next,sc-context&RPR=10&by={by}&os={next}&sc={context}&TypeFilter=Game,Team,Tournament,SportsGroup"
        },
        "discover_all_video_similar_to": {
          "content": "http://cloud.rovicorp.com/discover/2/2/search?nsid={id}&serviceId={serviceId}&DS=255&RFTR=256&PN=524300&XUA=rovicondor&ECT=5&ver=3.0&RCty=related&me=discover_all_video_similar_to&sub=content&criteria=nsid-id,os-next&RPR=10&by={by}&os={next}"
        },
        "discover_available_video_by_conversation": {
          "content": "http://cloud.rovicorp.com/discover/2/2/conversation?W={query}&serviceId={serviceId}&ECT=5&ver=3.0&XUA=rovicondor&PN=12&onlyAvailable=1&FL=SynFilterTV&RFTR=256&me=discover_available_video_by_conversation&sub=content&criteria=W-query,vsc-context&RPR=10&vsc={context}"
        },
        "discover_available_video_by_genre": {
          "content": "http://cloud.rovicorp.com/discover/2/2/search?name={genre}&serviceId={serviceId}&DS=255&RFTR=256&RPR=10&by={by}&PN=12&onlyAvailable=1&FL=SynFilterTV&XUA=rovicondor&ECT=5&ver=3.0&me=discover_available_video_by_genre&sub=content&criteria=name-genre&os={next}&sc={context}",
          "movies": "http://cloud.rovicorp.com/discover/2/2/search?name={genre}&serviceId={serviceId}&DS=255&RFTR=256&RPR=10&by={by}&PN=12&onlyAvailable=1&FL=SynFilterTV&XUA=rovicondor&ECT=5&ver=3.0&me=discover_available_video_by_genre&sub=movies&criteria=name-genre&os={next}&sc={context}&TypeFilter=movie,sequel",
          "series": "http://cloud.rovicorp.com/discover/2/2/search?name={genre}&serviceId={serviceId}&DS=255&RFTR=256&RPR=10&by={by}&PN=12&onlyAvailable=1&FL=SynFilterTV&XUA=rovicondor&ECT=5&ver=3.0&me=discover_available_video_by_genre&sub=series&criteria=name-genre&os={next}&sc={context}&TypeFilter=tvseries,episode",
          "sports": "http://cloud.rovicorp.com/discover/2/2/search?name={genre}&serviceId={serviceId}&DS=255&RFTR=256&RPR=10&by={by}&PN=12&onlyAvailable=1&FL=SynFilterTV&XUA=rovicondor&ECT=5&ver=3.0&me=discover_available_video_by_genre&sub=sports&criteria=name-genre&os={next}&sc={context}&TypeFilter=Game,Team,Tournament,SportsGroup"
        },
        "discover_available_video_by_search": {
          "content": "http://cloud.rovicorp.com/discover/2/2/search?W={query}&serviceId={serviceId}&DS=255&RFTR=256&PN=12&onlyAvailable=1&FL=SynFilterTV&XUA=rovicondor&ECT=5&ver=3.0&me=discover_available_video_by_search&sub=content&criteria=W-query,os-next,sc-context&RPR=10&by={by}&os={next}&sc={context}",
          "movies": "http://cloud.rovicorp.com/discover/2/2/search?W={query}&serviceId={serviceId}&DS=255&RFTR=256&PN=12&onlyAvailable=1&FL=SynFilterTV&XUA=rovicondor&ECT=5&ver=3.0&me=discover_available_video_by_search&sub=movies&criteria=W-query,os-next,sc-context&RPR=10&by={by}&os={next}&sc={context}&TypeFilter=movie,sequel",
          "series": "http://cloud.rovicorp.com/discover/2/2/search?W={query}&serviceId={serviceId}&DS=255&RFTR=256&PN=12&onlyAvailable=1&FL=SynFilterTV&XUA=rovicondor&ECT=5&ver=3.0&me=discover_available_video_by_search&sub=series&criteria=W-query,os-next,sc-context&RPR=10&by={by}&os={next}&sc={context}&TypeFilter=tvseries,episode",
          "sports": "http://cloud.rovicorp.com/discover/2/2/search?W={query}&serviceId={serviceId}&DS=255&RFTR=256&PN=12&onlyAvailable=1&FL=SynFilterTV&XUA=rovicondor&ECT=5&ver=3.0&me=discover_available_video_by_search&sub=sports&criteria=W-query,os-next,sc-context&RPR=10&by={by}&os={next}&sc={context}&TypeFilter=Game,Team,Tournament,SportsGroup"
        },
        "discover_available_video_similar_to": {
          "content": "http://cloud.rovicorp.com/discover/2/2/search?nsid={id}&serviceId={serviceId}&DS=255&RFTR=256&PN=12&onlyAvailable=1&XUA=rovicondor&ECT=5&ver=3.0&RCty=related&me=discover_available_video_similar_to&sub=content&criteria=nsid-id,os-next&RPR=10&by={by}&os={next}"
        },
        "discover_available_watchable_video": {
          "content": "http://cloud.rovicorp.com/discover/2/2/search?serviceId={serviceId}&SC=1-ImplicitChannels--103&DS=255&RFTR=4&PN=13&FL=SynFilterTV&XUA=rovicondor&ECT=5&ver=3.0&RCty=search&me=discover_available_watchable_video&sub=content&criteria=os-next&RPR=10&by={by}&os={next}",
          "movies": "http://cloud.rovicorp.com/discover/2/2/search?serviceId={serviceId}&SC=1-ImplicitChannels--103&DS=255&RFTR=4&PN=13&FL=SynFilterTV&XUA=rovicondor&ECT=5&ver=3.0&RCty=search&me=discover_available_watchable_video&sub=movies&criteria=os-next&RPR=10&by={by}&os={next}&TypeFilter=movie,sequel",
          "series": "http://cloud.rovicorp.com/discover/2/2/search?serviceId={serviceId}&SC=1-ImplicitChannels--103&DS=255&RFTR=4&PN=13&FL=SynFilterTV&XUA=rovicondor&ECT=5&ver=3.0&RCty=search&me=discover_available_watchable_video&sub=series&criteria=os-next&RPR=10&by={by}&os={next}&TypeFilter=tvseries,episode",
          "sports": "http://cloud.rovicorp.com/discover/2/2/search?serviceId={serviceId}&SC=1-ImplicitChannels--103&DS=255&RFTR=4&PN=13&FL=SynFilterTV&XUA=rovicondor&ECT=5&ver=3.0&RCty=search&me=discover_available_watchable_video&sub=sports&criteria=os-next&RPR=10&by={by}&os={next}&TypeFilter=Game,Team,Tournament,SportsGroup"
        },
        "media_image": {
          "master": "http://cloud.rovicorp.com/media/v1/source/{id}",
          "sized": "http://cloud.rovicorp.com/media/v1/image/{zoom}/{size}/{aspect}/{id}.jpg"
        },
        "media_logo": "http://cloud.rovicorp.com/media/v1/logo/{style}/{id}.png",
        "mgmt_clients": "http://cloud.rovicorp.com/mgmt/v1/users/clients",
        "mgmt_device": "http://cloud.rovicorp.com/mgmt/v1/users/{userId}/devices/{deviceId}",
        "mgmt_devices": "http://cloud.rovicorp.com/mgmt/v1/users/{userId}/devices",
        "mgmt_diskspace": "http://cloud.rovicorp.com/mgmt/v1/users/{userId}/devices/{deviceId}/diskspace",
        "mgmt_recordings_series": "http://cloud.rovicorp.com/mgmt/v1/users/{userId}/devices/{deviceId}/series_recordings?page={page}&size={size}&idns={idns}",
        "mgmt_recordings_single": "http://cloud.rovicorp.com/mgmt/v1/users/{userId}/devices/{deviceId}/future_recordings?page={page}&size={size}&idns={idns}",
        "mgmt_recording_series": "http://cloud.rovicorp.com/mgmt/v1/users/{userId}/devices/{deviceId}/series_recordings/{recordingId}?idns={idns}",
        "mgmt_recording_single": "http://cloud.rovicorp.com/mgmt/v1/users/{userId}/devices/{deviceId}/future_recordings/{recordingId}?idns={idns}",
        "mgmt_session": "http://cloud.rovicorp.com/mgmt/v1/users/session",
        "mgmt_session_login": "http://cloud.rovicorp.com/mgmt/v1/users/{userId}/login?authToken={authToken}&authTokenSecret={authTokenSecret}&authVerifier={authVerifier}&Client-Device-Id={clientId}",
        "mgmt_session_logout": "http://cloud.rovicorp.com/mgmt/v1/users/{userId}/logout?authToken={authToken}&authTokenSecret={authTokenSecret}&authVerifier={authVerifier}&sessionId={sessionId}",
        "mgmt_tune": "http://cloud.rovicorp.com/mgmt/v1/users/{userId}/devices/{deviceId}/channel",
        "mgmt_user": "http://cloud.rovicorp.com/mgmt/v1/users/",
        "pin_password_change": "http://cloud.rovicorp.com/pin/v1/users/{username}/changepassword",
        "pin_password_forgot": "http://cloud.rovicorp.com/pin/v1/users/{username}/forgotpassword",
        "pin_password_reset": "http://cloud.rovicorp.com/pin/v1/users/{username}/resetpassword",
        "pin_password_security_choices": "http://cloud.rovicorp.com/pin/v1/users/securityquestions",
        "pin_user": "http://cloud.rovicorp.com/pin/v1/users",
        "pin_user_login": "http://cloud.rovicorp.com/pin/v1/users/login",
        "pin_user_security_questions": "http://cloud.rovicorp.com/pin/v1/users/{username}/securityquestions"
      }
    }
    ```
 
 + Schema
 
            {
                    "$schema": "http://json-schema.org/draft-04/schema#",
                    "title": "Schema for templates.json",
                    "description": "Schema defines URI templates which are used at runtime for accessing resources from ROVI APIs.",
                    "type": "object",
                    "properties": {
                        "schema": {
                            "description": "RAML API description containing schema for templates",
                            "type": "string"
                        },
                        "templates": {
                            "description": "Container for templates . Template keys are of format {namespace}_{templatename}",
                            "type": "object",
                            "patternProperties": {
                                "^([a-z0-9-]+_[a-z0-9-_.]+)$": {
                                    "$ref": "#/definitions/family"
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "required": [
                        "schema",
                        "templates"
                    ],
                    "definitions": {
                        "family": {
                            "type": [
                                "object",
                                "string"
                            ],
                            "description": "Family of APIs exposed under a namespace. Examples: movie, image, person, episode.",
                            "oneOf": [
                                {
                                    "$ref": "#/definitions/subTemplate"
                                },
                                {
                                    "$ref": "#/definitions/templateValue"
                                }
                            ]
                        },
                        "subTemplate": {
                            "type": "object",
                            "description": "Subtemplate of a family. Example Family = Image, subtemplate = big and/or subtemplate=small.",
                            "patternProperties": {
                                "^[a-z0-9-_.]+$": {
                                    "$ref": "#/definitions/templateValue"
                                }
                            },
                            "additionalProperties": false
                        },
                        "templateValue": {
                            "description": "RFC Level 1 URI Template,spec-location:http://tools.ietf.org/html/rfc6570#section-1.2",
                            "type": "string",
                            "pattern": "http([s]{1})*://.*"
                        }
                    }
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (text/markdown)

        Rate limit exceeded, per-second or per-UTC-date. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic.
    
+ Response 500 (application/json)
+ Response 503 (application/json)

# Group Search
The Search requests search for titles of movies and TV shows relevant to the search query and return results in order of relevance and popularity. The Search requests offer two groups of requests, one of which limits results to the user's local television listings:
+ Titles (the __discover_all_video_by_conversation__ and __discover_all_video_by_search__ requests)
+ Titles that are in the local television schedule (the __discover_available_video_by_conversation__ and __discover_available_video_by_search__ requests)

To return local TV listings in responses, requests must include the service ID of the user's local television service. You can get the service ID for a local television service from the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.

# discover_all_video_by_conversation/content [/discover_all_video_by_conversation/content?query={query}&lineupId={lineupId}&context={context}] 
Returns titles of movies and TV shows related to phrases spoken to Rovi's conversational engine. Optionally includes a local broadcast schedule of any search results that happen to be airing. 

## GET 

+ Parameters
  + query (required, string, `show me movies of tom cruise`) ... 
    Search text as constructed by Rovi's conversational engine from voice input.
  + lineupId (optional, integer, `1063353154`) ...
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + context (optional, string) ... 
    Value of the __context__ field from the previous response to this request.

+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# discover_all_video_by_search/content [/discover_all_video_by_search/content?query={query}&lineupId={lineupId}&by={by}&next={next}&context={context}] 
Returns titles of movies and TV shows in order of popularity and similarity to text in a search string, plus `next` parameter values for related searches around results such as role, team, genre, award, group, decade, person, etc. Optionally includes a local broadcast schedule of any search results that happen to be airing. 

## GET 

+ Parameters
  + query (required, string, `Kung Fu Panda`) ... 
    The search string, which is NOT case-sensitive. The request must contain a `query` value or a `next` value, but must not contain both.
  + lineupId (optional, string, `1063353154`) ... 
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + by (optional, string, `name`) ... 
    Response field to sort by, either __name__ or __year__. For an ascending sort, replace {by} with the field name like this: `name`. For a descending sort, precede the field name with a minus (-) sign like this: `-year`.<br><br>__Notice:__  This parameter is now deprecated and will be removed in a future release.
  + next (optional, string) ...
    Value of a __next__ field from the previous response to this request. To return the next page of results, use the value of the __next__ field after the first __ref__ object. To expand the results of an item in the items list, use the value of the __next__ field in the __ref__ object of that item.
  + context (optional, string) ...
    Value of the __context__ field from the previous response to this request. Used, along with either a __next__ or __query__ value, to continue the search within the current response.

+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# discover_all_video_by_search/movies [/discover_all_video_by_search/movies?query={query}&lineupId={lineupId}&by={by}&next={next}&context={context}] 
Returns titles of movies in order of popularity and similarity to text in a search string, plus `next` parameter values for related searches around results such as role, team, genre, award, group, decade, person, etc. Optionally includes a local broadcast schedule of any search results that happen to be airing. 

## GET 

+ Parameters
  + query (required, string, `Kung Fu Panda`) ... 
    The search string, which is NOT case-sensitive. The request must contain a `query` value or a `next` value, but must not contain both.
  + lineupId (optional, string, `1063353154`) ... 
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + by (optional, string, `name`) ... 
    Response field to sort by, either __name__ or __year__. For an ascending sort, replace {by} with the field name like this: `name`. For a descending sort, precede the field name with a minus (-) sign like this: `-year`.<br><br>__Notice:__  This parameter is now deprecated and will be removed in a future release.
  + next (optional, string) ...
    Value of a __next__ field from the previous response to this request. To return the next page of results, use the value of the __next__ field after the first __ref__ object. To expand the results of an item in the items list, use the value of the __next__ field in the __ref__ object of that item.
  + context (optional, string) ...
    Value of the __context__ field from the previous response to this request. Used, along with either a __next__ or __query__ value, to continue the search within the current response.

+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# discover_all_video_by_search/series [/discover_all_video_by_search/series?query={query}&lineupId={lineupId}&by={by}&next={next}&context={context}] 
Returns titles of TV series in order of popularity and similarity to text in a search string, plus `next` parameter values for related searches around results such as role, team, genre, award, group, decade, person, etc. Optionally includes a local broadcast schedule of any search results that happen to be airing. 

## GET 

+ Parameters
  + query (required, string, `friends`) ... 
    The search string, which is NOT case-sensitive. The request must contain a `query` value or a `next` value, but must not contain both.
  + lineupId (optional, string, `1063353154`) ... 
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + by (optional, string, `name`) ... 
    Response field to sort by, either __name__ or __year__. For an ascending sort, replace {by} with the field name like this: `name`. For a descending sort, precede the field name with a minus (-) sign like this: `-year`.<br><br>__Notice:__  This parameter is now deprecated and will be removed in a future release.
  + next (optional, string) ...
    Value of a __next__ field from the previous response to this request. To return the next page of results, use the value of the __next__ field after the first __ref__ object. To expand the results of an item in the items list, use the value of the __next__ field in the __ref__ object of that item.
  + context (optional, string) ...
    Value of the __context__ field from the previous response to this request. Used, along with either a __next__ or __query__ value, to continue the search within the current response.

+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# discover_all_video_by_search/sports [/discover_all_video_by_search/sports?query={query}&lineupId={lineupId}&by={by}&next={next}&context={context}] 
Returns titles of sports shows in order of popularity and similarity to text in a search string, plus `next` parameter values for related searches around results such as role, team, genre, award, group, decade, person, etc. Optionally includes a local broadcast schedule of any search results that happen to be airing. 

## GET 

+ Parameters
  + query (required, string, `NFL`) ... 
    The search string, which is NOT case-sensitive. The request must contain a `query` value or a `next` value, but must not contain both.
  + lineupId (optional, string, `1063353154`) ... 
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + by (optional, string, `name`) ... 
    Response field to sort by, either __name__ or __year__. For an ascending sort, replace {by} with the field name like this: `name`. For a descending sort, precede the field name with a minus (-) sign like this: `-year`.<br><br>__Notice:__  This parameter is now deprecated and will be removed in a future release.
  + next (optional, string) ...
    Value of a __next__ field from the previous response to this request. To return the next page of results, use the value of the __next__ field after the first __ref__ object. To expand the results of an item in the items list, use the value of the __next__ field in the __ref__ object of that item.
  + context (optional, string) ...
    Value of the __context__ field from the previous response to this request. Used, along with either a __next__ or __query__ value, to continue the search within the current response.

+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# discover_available_video_by_conversation/content [/discover_available_video_by_conversation/content?query={query}&lineupId={lineupId}&context={context}] 
Returns local TV broadcast schedules of movies and programs related to phrases spoken to Rovi's conversational engine. 

## GET 

+ Parameters
  + query (required, string, `show me movies of tom cruise`) ... 
    Search text as constructed by Rovi's conversational engine from voice input.
  + lineupId (required, integer, `1063353154`) ...
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + context (optional, string) ... 
    Value of the __context__ field from the previous response to this request.

+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# discover_available_video_by_search/content [/discover_available_video_by_search/content?query={query}&lineupId={lineupId}&by={by}&next={next}&context={context}] 
Returns a local broadcast schedule of movies and programs in order of popularity and similarity to text in a search string, plus `next` parameter values for related searches around results such as role, team, genre, award, group, decade, person, etc. Language of program titles is determined by the broadcast source.

## GET 

+ Parameters
  + query (required, string, `office`) ... 
    The search string, which is NOT case-sensitive. The request must contain a `query` value or a `next` value, but must not contain both.
  + lineupId (required, string, `1063353154`) ... 
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + by (optional, string, `name`) ... 
    Response field to sort by, either __name__ or __year__. For an ascending sort, replace {by} with the field name like this: `name`. For a descending sort, precede the field name with a minus (-) sign like this: `-year`.<br><br>__Notice:__  This parameter is now deprecated and will be removed in a future release.
  + next (optional, string) ...
    Value of a __next__ field from the previous response to this request. To return the next page of results, use the value of the __next__ field after the first __ref__ object. To expand the results of an item in the items list, use the value of the __next__ field in the __ref__ object of that item.
  + context (optional, string) ...
    Value of the __context__ field from the previous response to this request. Used, along with either a __next__ or __query__ value, to continue the search within the current response.

+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# discover_available_video_by_search/movies [/discover_available_video_by_search/movies?query={query}&lineupId={lineupId}&by={by}&next={next}&context={context}] 
Returns a local broadcast schedule of movies in order of popularity and similarity to text in a search string, plus `next` parameter values for related searches around results such as role, team, genre, award, group, decade, person, etc. Language of program titles is determined by the broadcast source.

## GET 

+ Parameters
  + query (required, string, `love`) ... 
    The search string, which is NOT case-sensitive. The request must contain a `query` value or a `next` value, but must not contain both.
  + lineupId (required, string, `1063353154`) ... 
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + by (optional, string, `name`) ... 
    Response field to sort by, either __name__ or __year__. For an ascending sort, replace {by} with the field name like this: `name`. For a descending sort, precede the field name with a minus (-) sign like this: `-year`.<br><br>__Notice:__  This parameter is now deprecated and will be removed in a future release.
  + next (optional, string) ...
    Value of a __next__ field from the previous response to this request. To return the next page of results, use the value of the __next__ field after the first __ref__ object. To expand the results of an item in the items list, use the value of the __next__ field in the __ref__ object of that item.
  + context (optional, string) ...
    Value of the __context__ field from the previous response to this request. Used, along with either a __next__ or __query__ value, to continue the search within the current response.

+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# discover_available_video_by_search/series [/discover_available_video_by_search/series?query={query}&lineupId={lineupId}&by={by}&next={next}&context={context}] 
Returns a local broadcast schedule of TV series in order of popularity and similarity to text in a search string, plus `next` parameter values for related searches around results such as role, team, genre, award, group, decade, person, etc. Language of program titles is determined by the broadcast source.

## GET 

+ Parameters
  + query (required, string, `office`) ... 
    The search string, which is NOT case-sensitive. The request must contain a `query` value or a `next` value, but must not contain both.
  + lineupId (required, string, `1063353154`) ... 
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + by (optional, string, `name`) ... 
    Response field to sort by, either __name__ or __year__. For an ascending sort, replace {by} with the field name like this: `name`. For a descending sort, precede the field name with a minus (-) sign like this: `-year`.<br><br>__Notice:__  This parameter is now deprecated and will be removed in a future release.
  + next (optional, string) ...
    Value of a __next__ field from the previous response to this request. To return the next page of results, use the value of the __next__ field after the first __ref__ object. To expand the results of an item in the items list, use the value of the __next__ field in the __ref__ object of that item.
  + context (optional, string) ...
    Value of the __context__ field from the previous response to this request. Used, along with either a __next__ or __query__ value, to continue the search within the current response.

+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# discover_available_video_by_search/sports [/discover_available_video_by_search/sports?query={query}&lineupId={lineupId}&by={by}&next={next}&context={context}] 
Returns a local broadcast schedule of sports shows in order of popularity and similarity to text in a search string, plus `next` parameter values for related searches around results such as role, team, genre, award, group, decade, person, etc. Language of program titles is determined by the broadcast source.

## GET 

+ Parameters
  + query (required, string, `NFL`) ... 
    The search string, which is NOT case-sensitive. The request must contain a `query` value or a `next` value, but must not contain both.
  + lineupId (required, string, `1063353154`) ... 
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + by (optional, string, `name`) ... 
    Response field to sort by, either __name__ or __year__. For an ascending sort, replace {by} with the field name like this: `name`. For a descending sort, precede the field name with a minus (-) sign like this: `-year`.<br><br>__Notice:__  This parameter is now deprecated and will be removed in a future release.
  + next (optional, string) ...
    Value of a __next__ field from the previous response to this request. To return the next page of results, use the value of the __next__ field after the first __ref__ object. To expand the results of an item in the items list, use the value of the __next__ field in the __ref__ object of that item.
  + context (optional, string) ...
    Value of the __context__ field from the previous response to this request. Used, along with either a __next__ or __query__ value, to continue the search within the current response.

+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# Group Genre
The Genre requests return titles of movies and TV shows in a genre in order of popularity.  The Genre requests offer two groups of requests, one of which limits results to the user's local television listings:
+ Titles in a genre (the __discover_all_video_by_genre__ requests)
+ Titles in a genre that are in the local television schedule (the __discover_available_video_by_genre__ requests)

To return local TV listings in responses, requests must include the service ID of the user's local television service. You can get the service ID for a local television service from the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.

# discover_all_video_by_genre/content [/discover_all_video_by_genre/content?genre={genre}&lineupId={lineupId}&by={by}&next={next}&context={context}] 
Returns titles of movies and TV shows in a genre in order of popularity, plus `next` parameter values for related searches around results such as role, team, genre, award, group, decade, person, etc. Optionally includes a local broadcast schedule of any results that happen to be airing.

## GET
This request is designed to accept any genre name or phrase (and spelling variations) a user may be familiar with. For a list of recognized genres, see the [Rovi Cloud Genres](http://widgetads.rovicorp.com/adgraphics/rovicloudapi/RoviCloudGenres.txt) file.

+ Parameters
  + genre (required, string, `comedy`) ... 
    Any genre name or phrase a user may be familiar with. See the list of recognized genres in the [Rovi Cloud Genres](http://widgetads.rovicorp.com/adgraphics/rovicloudapi/RoviCloudGenres.txt) file.<br><br>The request must contain a `genre` value or a `next` value, but must not contain both. 
  + lineupId (optional, string, `1063353154`) ... 
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + by (optional, string, `-year`) ... 
    Response field to sort by, either __name__ or __year__. For an ascending sort, replace {by} with the field name like this: `name`. For a descending sort, precede the field name with a minus (-) sign like this: `-year`.
  + next (optional, string) ...
    Value of a __next__ field from the previous response to this request. To return the next page of results, use the value of the __next__ field after the first __ref__ object. To expand the results of an item in the items list, use the value of the __next__ field in the __ref__ object of that item.
  + context (optional, string) ...
    Value of the __context__ field from the previous response to this request. Used, along with either a __next__ or __genre__ value, to continue the search within the current response.

+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# discover_all_video_by_genre/movies [/discover_all_video_by_genre/movies?genre={genre}&lineupId={lineupId}&by={by}&next={next}&context={context}]
Returns titles of movies in a genre in order of popularity, plus `next` parameter values for related searches around results such as role, team, genre, award, group, decade, person, etc. Optionally includes a local broadcast schedule of any results that happen to be airing. 

## GET
This request is designed to accept any genre name or phrase (and spelling variations) a user may be familiar with. For a list of recognized genres, see the [Rovi Cloud Genres](http://widgetads.rovicorp.com/adgraphics/rovicloudapi/RoviCloudGenres.txt) file.

+ Parameters
  + genre (required, string, `comedy`) ... 
    Any genre name or phrase a user may be familiar with. See the list of recognized genres in the [Rovi Cloud Genres](http://widgetads.rovicorp.com/adgraphics/rovicloudapi/RoviCloudGenres.txt) file.<br><br>The request must contain a `genre` value or a `next` value, but must not contain both.
  + lineupId (optional, string, `1063353154`) ... 
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + by (optional, string, `-year`) ... 
    Response field to sort by, either __name__ or __year__. For an ascending sort, replace {by} with the field name like this: `name`. For a descending sort, precede the field name with a minus (-) sign like this: `-year`.
  + next (optional, string) ...
    Value of a __next__ field from the previous response to this request. To return the next page of results, use the value of the __next__ field after the first __ref__ object. To expand the results of an item in the items list, use the value of the __next__ field in the __ref__ object of that item.
  + context (optional, string) ...
    Value of the __context__ field from the previous response to this request. Used, along with either a __next__ or __genre__ value, to continue the search within the current response.

+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# discover_all_video_by_genre/series [/discover_all_video_by_genre/series?genre={genre}&lineupId={lineupId}&by={by}&next={next}&context={context}] 
Returns titles of TV series in a genre in order of popularity, plus `next` parameter values for related searches around results such as role, team, genre, award, group, decade, person, etc. Optionally includes a local broadcast schedule of any results that happen to be airing.

## GET
This request is designed to accept any genre name or phrase (and spelling variations) a user may be familiar with. For a list of recognized genres, see the [Rovi Cloud Genres](http://widgetads.rovicorp.com/adgraphics/rovicloudapi/RoviCloudGenres.txt) file.

+ Parameters
  + genre (required, string, `comedy`) ... 
    Any genre name or phrase a user may be familiar with. See the list of recognized genres in the [Rovi Cloud Genres](http://widgetads.rovicorp.com/adgraphics/rovicloudapi/RoviCloudGenres.txt) file.<br><br>The request must contain a `genre` value or a `next` value, but must not contain both.
  + lineupId (optional, string, `1063353154`) ... 
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + by (optional, string, `-year`) ... 
    Response field to sort by, either __name__ or __year__. For an ascending sort, replace {by} with the field name like this: `name`. For a descending sort, precede the field name with a minus (-) sign like this: `-year`.
  + next (optional, string) ...
    Value of a __next__ field from the previous response to this request. To return the next page of results, use the value of the __next__ field after the first __ref__ object. To expand the results of an item in the items list, use the value of the __next__ field in the __ref__ object of that item.
  + context (optional, string) ...
    Value of the __context__ field from the previous response to this request. Used, along with either a __next__ or __genre__ value, to continue the search within the current response.

+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# discover_all_video_by_genre/sports [/discover_all_video_by_genre/sports?genre={genre}&lineupId={lineupId}&by={by}&next={next}&context={context}] 
Returns titles of sports shows in a genre in order of popularity, plus `next` parameter values for related searches around results such as role, team, genre, award, group, decade, person, etc. Optionally includes a local broadcast schedule of any results that happen to be airing.

## GET
This request is designed to accept any genre name or phrase (and spelling variations) a user may be familiar with. For a list of recognized genres, see the [Rovi Cloud Genres](http://widgetads.rovicorp.com/adgraphics/rovicloudapi/RoviCloudGenres.txt) file.

+ Parameters
  + genre (required, string, `football`) ...
    Any genre name or phrase a user may be familiar with. See the list of recognized genres in the [Rovi Cloud Genres](http://widgetads.rovicorp.com/adgraphics/rovicloudapi/RoviCloudGenres.txt) file.<br><br>The request must contain a `genre` value or a `next` value, but must not contain both.
  + lineupId (optional, string, `1063353154`) ...
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + by (optional, string, `-year`) ...
    Response field to sort by, either __name__ or __year__. For an ascending sort, replace {by} with the field name like this: `name`. For a descending sort, precede the field name with a minus (-) sign like this: `-year`.
  + next (optional, string) ...
    Value of a __next__ field from the previous response to this request. To return the next page of results, use the value of the __next__ field after the first __ref__ object. To expand the results of an item in the items list, use the value of the __next__ field in the __ref__ object of that item.
  + context (optional, string) ...
    Value of the __context__ field from the previous response to this request. Used, along with either a __next__ or __genre__ value, to continue the search within the current response.

+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# discover_available_video_by_genre/content [/discover_available_video_by_genre/content?genre={genre}&lineupId={lineupId}&by={by}&next={next}&context={context}] 
Returns a local broadcast schedule of movies and TV shows in a genre in order of popularity, plus `next` parameter values for related searches around results such as role, team, genre, award, group, decade, person, etc.

## GET
This request is designed to accept any genre name or phrase (and spelling variations) a user may be familiar with. For a list of recognized genres, see the [Rovi Cloud Genres](http://widgetads.rovicorp.com/adgraphics/rovicloudapi/RoviCloudGenres.txt) file.

+ Parameters
  + genre (required, string, `comedy`) ... 
    Any genre name or phrase a user may be familiar with. See the list of recognized genres in the [Rovi Cloud Genres](http://widgetads.rovicorp.com/adgraphics/rovicloudapi/RoviCloudGenres.txt) file.<br><br>The request must contain a `genre` value or a `next` value, but must not contain both.
  + lineupId (required, string, `1063353154`) ... 
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + by (optional, string, `-year`) ... 
    Response field to sort by, either __name__ or __year__. For an ascending sort, replace {by} with the field name like this: `name`. For a descending sort, precede the field name with a minus (-) sign like this: `-year`.
  + next (optional, string) ...
    Value of a __next__ field from the previous response to this request. To return the next page of results, use the value of the __next__ field after the first __ref__ object. To expand the results of an item in the items list, use the value of the __next__ field in the __ref__ object of that item.
  + context (optional, string) ...
    Value of the __context__ field from the previous response to this request. Used, along with either a __next__ or __genre__ value, to continue the search within the current response.

+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# discover_available_video_by_genre/movies [/discover_available_video_by_genre/movies?genre={genre}&lineupId={lineupId}&by={by}&next={next}&context={context}] 
Returns a local broadcast schedule of movies in a genre in order of popularity, plus `next` parameter values for related searches around results such as role, team, genre, award, group, decade, person, etc.

## GET
This request is designed to accept any genre name or phrase (and spelling variations) a user may be familiar with. For a list of recognized genres, see the [Rovi Cloud Genres](http://widgetads.rovicorp.com/adgraphics/rovicloudapi/RoviCloudGenres.txt) file.

+ Parameters
  + genre (required, string, `comedy`) ... 
    Any genre name or phrase a user may be familiar with. See the list of recognized genres in the [Rovi Cloud Genres](http://widgetads.rovicorp.com/adgraphics/rovicloudapi/RoviCloudGenres.txt) file.<br><br>The request must contain a `genre` value or a `next` value, but must not contain both.
  + lineupId (required, string, `1063353154`) ... 
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + by (optional, string, `-year`) ... 
    Response field to sort by, either __name__ or __year__. For an ascending sort, replace {by} with the field name like this: `name`. For a descending sort, precede the field name with a minus (-) sign like this: `-year`.
  + next (optional, string) ...
    Value of a __next__ field from the previous response to this request. To return the next page of results, use the value of the __next__ field after the first __ref__ object. To expand the results of an item in the items list, use the value of the __next__ field in the __ref__ object of that item.
  + context (optional, string) ...
    Value of the __context__ field from the previous response to this request. Used, along with either a __next__ or __genre__ value, to continue the search within the current response.

+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# discover_available_video_by_genre/series [/discover_available_video_by_genre/series?genre={genre}&lineupId={lineupId}&by={by}&next={next}&context={context}] 
Returns a local broadcast schedule of TV series in a genre in order of popularity, plus `next` parameter values for related searches around results such as role, team, genre, award, group, decade, person, etc.

## GET
This request is designed to accept any genre name or phrase (and spelling variations) a user may be familiar with. For a list of recognized genres, see the [Rovi Cloud Genres](http://widgetads.rovicorp.com/adgraphics/rovicloudapi/RoviCloudGenres.txt) file.

+ Parameters
  + genre (required, string, `comedy`) ... 
    Any genre name or phrase a user may be familiar with. See the list of recognized genres in the [Rovi Cloud Genres](http://widgetads.rovicorp.com/adgraphics/rovicloudapi/RoviCloudGenres.txt) file.<br><br>The request must contain a `genre` value or a `next` value, but must not contain both.
  + lineupId (required, string, `1063353154`) ... 
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + by (optional, string, `-year`) ... 
    Response field to sort by, either __name__ or __year__. For an ascending sort, replace {by} with the field name like this: `name`. For a descending sort, precede the field name with a minus (-) sign like this: `-year`.
  + next (optional, string) ...
    Value of a __next__ field from the previous response to this request. To return the next page of results, use the value of the __next__ field after the first __ref__ object. To expand the results of an item in the items list, use the value of the __next__ field in the __ref__ object of that item.
  + context (optional, string) ...
    Value of the __context__ field from the previous response to this request. Used, along with either a __next__ or __genre__ value, to continue the search within the current response.

+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# discover_available_video_by_genre/sports [/discover_available_video_by_genre/sports?genre={genre}&lineupId={lineupId}&by={by}&next={next}&context={context}] 
Returns a local broadcast schedule of sports shows in a genre in order of popularity, plus `next` parameter values for related searches around results such as role, team, genre, award, group, decade, person, etc.

## GET
This request is designed to accept any genre name or phrase (and spelling variations) a user may be familiar with. For a list of recognized genres, see the [Rovi Cloud Genres](http://widgetads.rovicorp.com/adgraphics/rovicloudapi/RoviCloudGenres.txt) file.

+ Parameters
  + genre (required, string, `baseball`) ... 
    Any genre name or phrase a user may be familiar with. See the list of recognized genres in the [Rovi Cloud Genres](http://widgetads.rovicorp.com/adgraphics/rovicloudapi/RoviCloudGenres.txt) file.<br><br>The request must contain a `genre` value or a `next` value, but must not contain both.
  + lineupId (required, string, `1063353154`) ... 
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + by (optional, string, `-year`) ... 
    Response field to sort by, either __name__ or __year__. For an ascending sort, replace {by} with the field name like this: `name`. For a descending sort, precede the field name with a minus (-) sign like this: `-year`.
  + next (optional, string) ...
    Value of a __next__ field from the previous response to this request. To return the next page of results, use the value of the __next__ field after the first __ref__ object. To expand the results of an item in the items list, use the value of the __next__ field in the __ref__ object of that item.
  + context (optional, string) ...
    Value of the __context__ field from the previous response to this request. Used, along with either a __next__ or __genre__ value, to continue the search within the current response.

+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# Group Recommendations
The Recommendations set of requests returns recommended titles of movies and TV shows based three different criteria:
+ Trending content
+ Recommended content
+ Similarity to a customer favorite

Each set of requests offers a local broadcast schedule of results. To return local TV listings in responses, requests must include the service ID of the user's local television service. You can get the service ID for a local television service from the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.

# discover_all_trending_video/content [/discover_all_trending_video/content?lineupId={lineupId}&by={by}&next={next}] 
Returns titles of movies and TV shows that are trending right now. Optionally includes a local broadcast schedule of any results that happen to be airing.

## GET

+ Parameters
  + lineupId (optional, string, `1063353154`) ... 
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + by (optional, string, `-year`) ... 
    Response field to sort by, either __name__ or __year__. For an ascending sort, replace {by} with the field name like this: `name`. For a descending sort, precede the field name with a minus (-) sign like this: `-year`.
  + next (optional, string) ...
    Value of a __next__ field from the previous response to this request, used to return the next page of results.
    
+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# discover_all_trending_video/movies [/discover_all_trending_video/movies?lineupId={lineupId}&by={by}&next={next}] 
Returns titles of movies that are trending right now. Optionally includes a local broadcast schedule of any results that happen to be airing.

## GET

+ Parameters
  + lineupId (optional, string, `1063353154`) ... 
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + by (optional, string, `-year`) ... 
    Response field to sort by, either __name__ or __year__. For an ascending sort, replace {by} with the field name like this: `name`. For a descending sort, precede the field name with a minus (-) sign like this: `-year`.
  + next (optional, string) ...
    Value of a __next__ field from the previous response to this request, used to return the next page of results.
    
+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# discover_all_trending_video/series [/discover_all_trending_video/series?lineupId={lineupId}&by={by}&next={next}] 
Returns titles of TV series that are trending right now. Optionally includes a local broadcast schedule of any results that happen to be airing.

## GET

+ Parameters
  + lineupId (optional, string, `1063353154`) ... 
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + by (optional, string, `-year`) ... 
    Response field to sort by, either __name__ or __year__. For an ascending sort, replace {by} with the field name like this: `name`. For a descending sort, precede the field name with a minus (-) sign like this: `-year`.
  + next (optional, string) ...
    Value of a __next__ field from the previous response to this request, used to return the next page of results.
    
+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# discover_all_trending_video/sports [/discover_all_trending_video/sports?lineupId={lineupId}&by={by}&next={next}] 
Returns titles of sports shows that are trending right now. Optionally includes a local broadcast schedule of any results that happen to be airing.

## GET

+ Parameters
  + lineupId (optional, string, `1063353154`) ... 
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + by (optional, string, `-year`) ... 
    Response field to sort by, either __name__ or __year__. For an ascending sort, replace {by} with the field name like this: `name`. For a descending sort, precede the field name with a minus (-) sign like this: `-year`.
  + next (optional, string) ...
    Value of a __next__ field from the previous response to this request, used to return the next page of results.
    
+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# discover_available_watchable_video/content [/discover_available_watchable_video/content?lineupId={lineupId}&by={by}&next={next}] 
Returns a local broadcast schedule of recommended movies and TV shows.

## GET

+ Parameters
  + lineupId (required, string, `1063353154`) ... 
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + by (optional, string, `-year`) ... 
    Response field to sort by, either __name__ or __year__. For an ascending sort, replace {by} with the field name like this: `name`. For a descending sort, precede the field name with a minus (-) sign like this: `-year`.
  + next (optional, string) ...
    Value of a __next__ field from the previous response to this request, used to return the next page of results.
    
+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# discover_available_watchable_video/movies [/discover_available_watchable_video/movies?lineupId={lineupId}&by={by}&next={next}] 
Returns a local broadcast schedule of recommended movies.

## GET

+ Parameters
  + lineupId (required, string, `1063353154`) ... 
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + by (optional, string, `-year`) ... 
    Response field to sort by, either __name__ or __year__. For an ascending sort, replace {by} with the field name like this: `name`. For a descending sort, precede the field name with a minus (-) sign like this: `-year`.
  + next (optional, string) ...
    Value of a __next__ field from the previous response to this request, used to return the next page of results.
    
+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# discover_available_watchable_video/series [/discover_available_watchable_video/series?lineupId={lineupId}&by={by}&next={next}] 
Returns a local broadcast schedule of recommended TV series.

## GET

+ Parameters
  + lineupId (required, string, `1063353154`) ... 
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + by (optional, string, `-year`) ... 
    Response field to sort by, either __name__ or __year__. For an ascending sort, replace {by} with the field name like this: `name`. For a descending sort, precede the field name with a minus (-) sign like this: `-year`.
  + next (optional, string) ...
    Value of a __next__ field from the previous response to this request, used to return the next page of results.
    
+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# discover_available_watchable_video/sports [/discover_available_watchable_video/sports?lineupId={lineupId}&by={by}&next={next}] 
Returns a local broadcast schedule of recommended sports shows.

## GET

+ Parameters
  + lineupId (required, string, `1063353154`) ... 
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + by (optional, string, `-year`) ... 
    Response field to sort by, either __name__ or __year__. For an ascending sort, replace {by} with the field name like this: `name`. For a descending sort, precede the field name with a minus (-) sign like this: `-year`.
  + next (optional, string) ...
    Value of a __next__ field from the previous response to this request, used to return the next page of results.
    
+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# discover_all_video_similar_to/content [/discover_all_video_similar_to/content?id={id}&lineupId={lineupId}&by={by}&next={next}] 
Returns titles of shows that are most similar to a customer favorite and the same type as the favorite&mdash;movie titles for a movie, episode titles for an episode, etc. Optionally includes a local broadcast schedule of any results that happen to be airing.

## GET

+ Parameters
  + id (required, integer, `913742357`) ... 
    A `data_movie`, `data_series`, `data_episode`, or `data_other` ID, returned in responses to [data_airing](/#reference/tv-schedule/dataairing) requests or the other discover requests.
  + lineupId (optional, string, `1063353154`) ... 
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + by (optional, string, `-year`) ... 
    Response field to sort by, either __name__ or __year__. For an ascending sort, replace {by} with the field name like this: `name`. For a descending sort, precede the field name with a minus (-) sign like this: `-year`.
  + next (optional, string) ...
    Value of a __next__ field from the previous response to this request. To return the next page of results, use the value of the __next__ field after the first __ref__ object. To expand the results of an item in the items list, use the value of the __next__ field in the __ref__ object of that item.
    
+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# discover_available_video_similar_to/content [/discover_available_video_similar_to/content?id={id}&lineupId={lineupId}&by={by}&next={next}]
Returns a local broadcast schedule of shows that are most similar to a customer favorite and the same type as the favorite&mdash;movie titles for a movie, episode titles for an episode, etc.

## GET 

+ Parameters
  + id (required, integer, `913742357`) ... 
    A `data_movie`, `data_series`, `data_episode`, or `data_other` ID, returned in responses to [data_airing](/#reference/tv-schedule/dataairing) requests or the other discover requests.
  + lineupId (required, string, `1063353154`) ... 
    The data_service ID of the user's local television service, which is returned by the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + by (optional, string, `-year`) ... 
    Response field to sort by, either __name__ or __year__. For an ascending sort, replace {by} with the field name like this: `name`. For a descending sort, precede the field name with a minus (-) sign like this: `-year`.
  + next (optional, string) ...
    Value of a __next__ field from the previous response to this request. To return the next page of results, use the value of the __next__ field after the first __ref__ object. To expand the results of an item in the items list, use the value of the __next__ field in the __ref__ object of that item.

+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# Group TV Schedule
<a id="tvschedule"></a>This section documents the calls that return data for a TV Listings grid or page. For an overview of these calls and the sequence in which to call them, see the [Local TV Schedules](http://docs.rovicloudapi.apiary.io/#introduction/about-our-apis/metadata) section.

# data_browse_service [/data_browse_service?country={country}&postalCode={postalCode}&msoId={msoId}&page={page}]
Returns information about the television services for a region.

## GET
Available codes for the **country** parameter are:

| Code | Country                 | Code | Country                          |
| ---- | ----------------------- | ---- | -------------------------------- |
| AD   | Andorra                 | IN   | India                            |
| AI   | Anguilla                | IE   | Ireland                          |
| AG   | Antigua & Barbuda&emsp; | IT   | Italy                            |
| AR   | Argentina               | JM   | Jamaica                          |
| AW   | Aruba                   | LI   | Lichtenstein                     |
| AU   | Australia&emsp;         | LU   | Luxembourg                       |
| AT   | Austria                 | MY   | Malaysia                         |
| BS   | Bahamas                 | MT   | Malta                            |
| BB   | Barbados                | MX   | Mexico                           |
| BE   | Belgium                 | MC   | Monaco                           |
| BM   | Bermuda                 | MS   | Montserrat                       |
| BO   | Bolivia                 | NL   | Netherlands                      |
| BR   | Brazil                  | NI   | Nicaragua                        |
| VG   | British Virgin Islands&emsp; | NO   | Norway                      |
| CA   | Canada                  | PA   | Panama                           |
| CL   | Chile                   | PE   | Peru                             |
| CN   | China                   | PH   | Philippines                      |
| CO   | Colombia                | PL   | Poland                           |
| CR   | Costa Rica              | PT   | Portugal                         |
| CW   | Curacao                 | RU   | Russia                           |
| DK   | Denmark                 | KN   | Saint Kitts & Nevis              |
| DO   | Dominican Republic&emsp; | LC   | Saint Lucia                     |
| EC   | Ecuador                 | MF   | Saint Martin                     |
| SV   | El Salvador&emsp;       | VC   | Saint Vincent and the Grenadines |
| FO   | Faroe Islands&emsp;     | SG   | Singapore                        |
| FI   | Finland                 | ES   | Spain                            |
| FR   | France                  | SE   | Sweden                           |
| DE   | Germany                 | CH   | Switzerland                      |
| GI   | Gibraltar               | TW   | Taiwan                           |
| GD   | Grenada                 | TT   | Trinidad & Tobago                |
| GT   | Guatemala               | TR   | Turkey                           |
| GY   | Guyana                  | TC   | Turks & Caicos                   |
| HN   | Honduras                | GB   | United Kingdom*                  |
| HK   | Hong Kong               | US   | United States                    |
| IS   | Iceland                 | VE   | Venezuela                        |
\* Includes Wales, Scotland, and Northern Ireland.

+ Parameters
  + country: `US` (string, required) - Country served, stated as one of the uppercase ISO 3166-1 alpha-2 country codes in the table in the middle panel.
  + postalCode: `90210` (string, optional) - Postal code of the coverage area. Recommended for Canada and the United States.
  + msoId: `341774569` (number, optional) - Rovi ID of a cable or satellite operator. Specify an MSO ID to return just the services offered by that operator. Not useful for national or broadcast services.<br><br>If you don't know the MSO ID for an operator, first request a list of services in an area with this request and then look through the response for that operator.
  + page (number, optional) - Page number of the list to return. A number greater than the number of available pages returns status code 404.
     + Default: `1`
  
+ Response 200 (application/json)
```
    {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "title": "service",
        "description": "Information about a television service.",
        "properties": {
            "service": {
                "type": "array",
                "items": [
                    {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "Rovi ID for the television service."
                            },
                            "name": {
                                "type": "array",
                                "description": "Name of the television service, up to 325 characters.",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "city": {
                                "type": "string",
                                "description": "City of the primary service area, up to 20 characters."
                            },
                            "state": {
                                "type": "string",
                                "description": "State of the primary service area, as two characters."
                            },
                            "system": {
                                "type": "string",
                                "description": "System the televison service is a part of, up to 40 characters."
                            },
                            "country": {
                                "type": "string",
                                "description": "Country of the primary service area, stated as a two-character ISO 3166 country code."
                            },
                            "serviceType": {
                                "type": "string",
                                "description": "Type of television service.",
                                "oneOf": [
                                    {
                                        "enum": ["cable"],
                                        "description": "Cable TV."
                                    },
                                    {
                                        "enum": ["satellite"],
                                        "description": "Direct broadcast satellite."
                                    },
                                    {
                                        "enum": ["data"],
                                        "description": "Data."
                                    },
                                    {
                                        "enum": ["iptv"],
                                        "description": "IPTV provider."
                                    },
                                    {
                                        "enum": ["matv"],
                                        "description": "MATV system. Apartment complexes."
                                    },
                                    {
                                        "enum": ["dis"],
                                        "description": "Multidistribution systems."
                                    },
                                    {
                                        "enum": ["hotel"],
                                        "description": "Hotels and condos."
                                    },
                                    {
                                        "enum": ["smatv"],
                                        "description": "SMATV system."
                                    },
                                    {
                                        "enum": ["nonCable"],
                                        "description": "Rovi US national channel lineup."
                                    },
                                    {
                                        "enum": ["ota"],
                                        "description": "Over-the-air broadcast."
                                    },
                                    {
                                        "enum": ["ref"],
                                        "description": "Reference account."
                                    },
                                    {
                                        "enum": ["hospital"],
                                        "description": "Hospitals and nursing homes."
                                    },
                                    {
                                        "enum": ["telco"],
                                        "description": "Telephone service provider."
                                    }
                                ]
                            },
                            "msoId": {
                                "type": "integer",
                                "description": "Rovi ID for the television service provider."
                            },
                            "headendId": {
                                "type": "integer",
                                "description": "Rovi ID for the headend (master facility) of the television service."
                            },
                            "zone": {
                                "type": "array",
                                "items": [
                                    {
                                        "type": "object",
                                        "description": "Time zone and associated UTC offsets that apply to the television service. Program times are returned in UTC time, so you need to apply the current UTC offset to calculate local time. UTC offsets change when daylight saving time changes, so the start and end time is shown for each offset.",
                                        "properties": {
                                            "zone": {
                                                "type": "string"
                                            },
                                            "zoneWindows": {
                                                "type": "object",
                                                "properties": {
                                                    "start": {
                                                        "type": "string"
                                                    },
                                                    "end": {
                                                        "type": "string"
                                                    },
                                                    "offset": {
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        },
                                        "required": [
                                            "zone"
                                        ]
                                    }
                                ]
                            },
                            "links": {
                                "type": "object",
                                "properties": {
                                    "data_service": {
                                        "type": "object",
                                        "description": "ID to use for data_service requests.",
                                        "properties": {
                                            "id": {
                                                "type": "integer"
                                            }
                                        },
                                        "required": [
                                            "id"
                                        ]
                                    },
                                    "data_service_channels": {
                                        "type": "object",
                                        "description": "ID to use in a data_service_channels request to get the channel lineup for the service.",
                                        "properties": {
                                            "id": {
                                                "type": "integer"
                                            }
                                        },
                                        "required": [
                                            "id"
                                        ]
                                    },
                                    "data_service_schedules": {
                                        "type": "object",
                                        "description": "ID to use in a data_service_schedules request to get program schedules for the service.",
                                        "properties": {
                                            "id": {
                                                "type": "integer"
                                            }
                                        },
                                        "required": [
                                            "id"
                                        ]
                                    }
                                },
                                "required": [
                                    "data_service",
                                    "data_service_channels",
                                    "data_service_schedules"
                                ]
                            }
                        },
                        "required": [
                            "id",
                            "name",
                            "city",
                            "state",
                            "system",
                            "country",
                            "serviceType",
                            "zone",
                            "links"
                        ]
                    }
                ]
            }
        },
        "required": [
            "service"
        ]
    
    }
```
+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_service [/data_service/{id}]
Returns information about a television service.

## GET
This request requires the `data_service` ID for the television service, which is returned in a [data_browse_service](/#reference/tv-schedule/databrowseservice) response.

Rovi also provides US national television listings for the most popular national broadcast and cable sources, like HBO, CNBC, and CSPAN. These listings do not include channel numbers because they cover an entire time zone, but local viewers generally know the channels for these sources. So if you want to provide US national listings, use the following `data_service` IDs:
* 341759807 â€” US Eastern Time Zone
* 341759808 â€” US Central Time Zone
* 341759810 â€” US Pacific Time Zone

+ Parameters
  + id (required, integer, `1063353154`)
    The `data_service` ID for the television service, returned in a [data_browse_service](/#reference/tv-schedule/databrowseservice) response.

+ Response 200 (application/json)
```
    {
    
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "title": "service",
        "description": "Information about a television service.",
        "properties": {
            "id": {
                "type": "integer",
                "description": "Rovi ID for the television service."
            },
            "name": {
                "type": "array",
                "description": "Name of the television service, up to 325 characters. ",
                "items": {
                    "type": "string"
                }
            },
            "city": {
                "type": "string",
                "description": "City of the primary service area, up to 20 characters. "
            },
            "state": {
                "type": "string",
                "description": "State of the primary service area, as two characters. "
            },
            "system": {
                "type": "string",
                "description": "System the televison service is a part of, up to 40 characters. "
            },
            "country": {
                "type": "string",
                "description": "Country of the primary service area, stated as a two-character ISO 3166 country code. "
            },
            "serviceType": {
                "type": "string",
                "description": "Type of television service.",
                "oneOf": [
                    {
                        "enum": ["cable"],
                        "description": "Cable TV."
                    },
                    {
                        "enum": ["satellite"],
                        "description": "Direct broadcast satellite."
                    },
                    {
                        "enum": ["data"],
                        "description": "Data."
                    },
                    {
                        "enum": ["iptv"],
                        "description": "IPTV provider."
                    },
                    {
                        "enum": ["matv"],
                        "description": "MATV system. Apartment complexes."
                    },
                    {
                        "enum": ["dis"],
                        "description": "Multidistribution systems."
                    },
                    {
                        "enum": ["hotel"],
                        "description": "Hotels and condos."
                    },
                    {
                        "enum": ["smatv"],
                        "description": "SMATV system."
                    },
                    {
                        "enum": ["nonCable"],
                        "description": "Rovi US national channel lineup."
                    },
                    {
                        "enum": ["ota"],
                        "description": "Over-the-air broadcast."
                    },
                    {
                        "enum": ["ref"],
                        "description": "Reference account."
                    },
                    {
                        "enum": ["hospital"],
                        "description": "Hospitals and nursing homes."
                    },
                    {
                        "enum": ["telco"],
                        "description": "Telephone service provider."
                    }
                ]
            },
            "msoId": {
                "type": "integer",
                "description": "Rovi ID for the television service provider. "
            },
            "headendId": {
                "type": "integer",
                "description": "Rovi ID for the headend (master facility) of the television service. "
            },
            "zone": {
                "type": "array",
                "items": [
                    {
                        "type": "object",
                        "description": " Time zone and associated UTC offsets that apply to the television service. Program times are returned in UTC time, so you need to apply the current UTC offset to calculate local time. UTC offsets change when daylight saving time changes, so the start and end time is shown for each offset.",
                        "properties": {
                            "zone": {
                                "type": "string"
                            },
                            "zoneWindows": {
                                "type": "object",
                                "properties": {
                                    "start": {
                                        "type": "string"
                                    },
                                    "end": {
                                        "type": "string"
                                    },
                                    "offset": {
                                        "type": "integer"
                                    }
                                }
                            }
                        },
                        "required": [
                            "zone"
                        ]
                    }
                ]
            },
            "links": {
                "type": "object",
                "properties": {
                    "data_service": {
                        "type": "object",
                        "description": " ID to use in a data_service request to get information about the television service.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "data_service_channels": {
                        "type": "object",
                        "description": " ID to use in a data_service_channels request to get the channel lineup for the service.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "data_service_schedules": {
                        "type": "object",
                        "description": " ID to use in a data_service_schedules request to get program schedules for the service.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                },
                "required": [
                    "data_service",
                    "data_service_channels",
                    "data_service_schedules"
                ]
            }
        },
        "required": [
            "id",
            "name",
            "city",
            "state",
            "system",
            "country",
            "serviceType",
            "zone",
            "links"
        ]
    
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_service_channels/bulk [/data_service_channels/bulk?id={id}&page={page}] 
Returns channel information for a television service at 50 channels per request, to be used asynchronously in the background to fill a local store.

**Design Note:** &nbsp; Partner this request with [data_service_schedules/bulk](/#reference/tv-schedule/dataserviceschedulesbulk). For each page of channel data you get here, request the same page number of TV listings there. If your contract with Rovi allows caching, we recommend caching channel data locally and updating TV listings as needed during the session.

*This request returns a large amount of data and is not intended to be displayed all at once for a waiting user. For fast responses for immediate display, use the /single or /screen request instead.*

## GET
This request requires the `data_service_channels` ID for the television service, which is returned as a link in responses to a [data_service](/#reference/tv-schedule/dataservice) or [data_browse_service](/#reference/tv-schedule/databrowseservice) request. A `data_service_channels` ID for a television service is the same as the `data_service` ID.

For US national television listings, however, use the following IDs. These listings do not include channel numbers because they cover an entire time zone, but local viewers generally know the channels for these sources, which are the most popular national broadcast and cable sources, like HBO, CNBC, and CSPAN.
+ 341759807 â€” US Eastern Time Zone
+ 341759808 â€” US Central Time Zone
+ 341759810 â€” US Pacific Time Zone
 
+ Parameters
  + id (required, integer, `1063353154`)
    The `data_service_channels` ID for the television service, which is returned as a link in responses to a [data_service](/#reference/tv-schedule/dataservice) or [data_browse_service](/#reference/tv-schedule/databrowseservice) request. A `data_service_channels` ID for a television service is the same as the `data_service` ID.
  + page (optional, integer, `1`)
    Page number of the list to return. The first page contains information about the first 50 channels in the channel list, the second page contains information about channels 51 to 100 in the list, and so on. These are not channel numbers, but rather serve as an index of channels within the lineup. A page number greater than the number of available pages returns status code 404.

+ Response 200 (application/json)
```
    {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "title": "service_channels",
        "description": "Channel lineup for a television service, with information about each channel.",
        "properties": {
            "id": {
                "type": "integer",
                "description": "Rovi ID for the television service offering this channel lineup."
            },
            "channels": {
                "type": "array",
                "items": [
                    {
                        "type": "object",
                        "description": "Information about the channels in this channel lineup.",
                        "properties": {
                            "channel": {
                                "type": "string",
                                "description": "Channel number."
                            },
                            "type": {
                                "type": "string",
                                "description": "Type of broadcast schedule the channel follows.",
                                "oneOf": [
                                    {
                                        "enum": [
                                            "24hours"
                                        ],
                                        "description": "Channel broadcasts a single programming source 24 hours a day."
                                    },
                                    {
                                        "enum": [
                                            "shared"
                                        ],
                                        "description": "Channel broadcasts 24 hours a day, but two or more programming sources broadcast during different times of the day."
                                    },
                                    {
                                        "enum": [
                                            "partial"
                                        ],
                                        "description": "Channel broadcasts one or more programming sources, but is off-air for part of the day."
                                    }
                                ]
                            },
                            "code": {
                                "type": "string",
                                "description": "Headend device type: \"Digital (non-rebuild)\" (digital converter), \"OTA Broadcast\" (over-the-air broadcast), \"Rebuild\" (plant upgraded to deliver more bandwidth), \"CableCard\" (use of CableCard), \"IPTV\" (delivered over IP-based networks)."
                            },
                            "windows": {
                                "type": "array",
                                "items": [
                                    {
                                        "type": "object",
                                        "description": "Times and days each source broadcasts on the channel. A \"type: 24hours\" channel broadcasts one source all day, every day.",
                                        "properties": {
                                            "start": {
                                                "type": "string",
                                                "description": "UTC date and time the source began this schedule on this channel. Apply the UTC offset for the service at that time to calculate the local time."
                                            },
                                            "end": {
                                                "type": "string",
                                                "description": "UTC date and time the source ends this schedule on this channel. Apply the UTC offset for the service at that time to calculate the local time."
                                            },
                                            "on": {
                                                "type": "string",
                                                "description": "UTC time the source starts broadcasting on the channel, in HHMM (24-hour) format. Apply the UTC offset for the service to calculate the local time. For sources that broadcast 24-hours, this is midnight (00:00:00Z)."
                                            },
                                            "off": {
                                                "type": "string",
                                                "description": "UTC time the source stops broadcasting on the channel, in HHMM (24-hour) format. Apply the UTC offset for the service to calculate the local time. For sources that broadcast 24-hours, this is midnight (00:00:00Z)."
                                            },
                                            "days": {
                                                "type": "string",
                                                "description": "Days of the week the broadcast time is in effect. Each day is specified as two characters, so a source that broadcasts every day is shown as \"MoTuWeThFrSaSu\"."
                                            },
                                            "source": {
                                                "type": "object",
                                                "description": "Information about the source of programming content, with IDs for addtional information.",
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "description": "Rovi ID for the source of programming content."
                                                    },
                                                    "in": {
                                                        "type": "string",
                                                        "description": "Primary language of program content from the source, stated as a two-character ISO 639 language code."
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "description": "Display name of the source."
                                                    },
                                                    "call": {
                                                        "type": "string",
                                                        "description": "Call letters of the source."
                                                    },
                                                    "isHd": {
                                                        "type": "boolean",
                                                        "description": "True if the service broadcasts in high definition (HDTV). Element is omitted otherwise."
                                                    },
                                                    "links": {
                                                        "type": "object",
                                                        "properties": {
                                                            "data_source": {
                                                                "type": "object",
                                                                "description": "ID to use in a data_source request to get more information about the source of the broadcast.",
                                                                "properties": {
                                                                    "id": {
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "id"
                                                                ]
                                                            },
                                                            "data_source_logos": {
                                                                "type": "object",
                                                                "description": "ID to use in a data_source_logos request to get logos for the source.",
                                                                "properties": {
                                                                    "id": {
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "id"
                                                                ]
                                                            }
                                                        },
                                                        "required": [
                                                            "data_source",
                                                            "data_source_logos"
                                                        ]
                                                    }
                                                },
                                                "required": [
                                                    "id",
                                                    "in",
                                                    "links"
                                                ]
                                            }
                                        },
                                        "required": [
                                            "days",
                                            "source"
                                        ]
                                    }
                                ]
                            }
                        },
                        "required": [
                            "windows"
                        ]
                    }
                ]
            },
            "links": {
                "type": "object",
                "properties": {
                    "data_service": {
                        "type": "object",
                        "description": " ID to use in a data_service request for information about the television service.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "data_service_channels": {
                        "type": "object",
                        "description": " ID to use in a data_service_channels request for information about the channel lineup offered by the television service.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                },
                "required": [
                    "data_service",
                    "data_service_channels"
                ]
            },
            "page": {
                "type": "integer",
                "description": "Pagination index of the request."
            },
            "size": {
                "type": "integer",
                "description": "Number of elements returned."
            },
            "total": {
                "type": "integer",
                "description": "Number of total elements."
            }
        },
        "required": [
            "id",
            "channels",
            "links"
        ]
    }
```
+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_service_channels/screen [/data_service_channels/screen?id={id}&page={page}] 
Returns channel information for a television service at 10 channels per request. 

**Design Note:** &nbsp; Partner this request with [data_service_schedules/screen](/#reference/tv-schedule/dataserviceschedulesscreen). For each page of channel data you get here, request the same page number of TV listings there. If your contract with Rovi allows caching, we recommend caching channel data locally and updating TV listings as needed during the session.

## GET 
This request requires the `data_service_channels` ID for the television service, which is returned as a link in responses to a [data_service](/#reference/tv-schedule/dataservice) or [data_browse_service](/#reference/tv-schedule/databrowseservice) request. A `data_service_channels` ID for a television service is the same as the `data_service` ID.

For US national television listings, however, use the following `data_service_channels` IDs. These listings do not include channel numbers because they cover an entire time zone, but local viewers generally know the channels for these sources, which are the most popular national broadcast and cable sources, like HBO, CNBC, and CSPAN.
+ 341759807 â€” US Eastern Time Zone
+ 341759808 â€” US Central Time Zone
+ 341759810 â€” US Pacific Time Zone

+ Parameters
  + id (required, integer, `1063353154`)
    The `data_service_channels` ID for the television service, which is returned as a link in responses to a [data_service](/#reference/tv-schedule/dataservice) or [data_browse_service](/#reference/tv-schedule/databrowseservice) request. A `data_service_channels` ID for a television service is the same as the `data_service` ID.
  + page (optional, integer, `1`)
    Page number of the list to return. The first page contains information about the first 10 channels in the channel list, the second page contains information about channels 11 to 20 in the list, and so on. These are not channel numbers, but rather serve as an index of channels within the lineup. A page number greater than the number of available pages returns status code 404.

+ Response 200 (application/json)
```
    {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "title": "service_channels",
        "description": "Channel lineup for a television service, with information about each channel.",
        "properties": {
            "id": {
                "type": "integer",
                "description": "Rovi ID for the television service offering this channel lineup."
            },
            "channels": {
                "type": "array",
                "items": [
                    {
                        "type": "object",
                        "description": "Information about the channels in this channel lineup.",
                        "properties": {
                            "channel": {
                                "type": "string",
                                "description": "Channel number."
                            },
                            "type": {
                                "type": "string",
                                "description": "Type of broadcast schedule the channel follows.",
                                "oneOf": [
                                    {
                                        "enum": [
                                            "24hours"
                                        ],
                                        "description": "Channel broadcasts a single programming source 24 hours a day."
                                    },
                                    {
                                        "enum": [
                                            "shared"
                                        ],
                                        "description": "Channel broadcasts 24 hours a day, but two or more programming sources broadcast during different times of the day."
                                    },
                                    {
                                        "enum": [
                                            "partial"
                                        ],
                                        "description": "Channel broadcasts one or more programming sources, but is off-air for part of the day."
                                    }
                                ]
                            },
                            "code": {
                                "type": "string",
                                "description": "Headend device type: \"Digital (non-rebuild)\" (digital converter), \"OTA Broadcast\" (over-the-air broadcast), \"Rebuild\" (plant upgraded to deliver more bandwidth), \"CableCard\" (use of CableCard), \"IPTV\" (delivered over IP-based networks)."
                            },
                            "windows": {
                                "type": "array",
                                "items": [
                                    {
                                        "type": "object",
                                        "description": "Times and days each source broadcasts on the channel. A \"type: 24hours\" channel broadcasts one source all day, every day.",
                                        "properties": {
                                            "start": {
                                                "type": "string",
                                                "description": "UTC date and time the source began this schedule on this channel. Apply the UTC offset for the service at that time to calculate the local time."
                                            },
                                            "end": {
                                                "type": "string",
                                                "description": "UTC date and time the source ends this schedule on this channel. Apply the UTC offset for the service at that time to calculate the local time."
                                            },
                                            "on": {
                                                "type": "string",
                                                "description": "UTC time the source starts broadcasting on the channel, in HHMM (24-hour) format. Apply the UTC offset for the service to calculate the local time. For sources that broadcast 24-hours, this is midnight (00:00:00Z)."
                                            },
                                            "off": {
                                                "type": "string",
                                                "description": "UTC time the source stops broadcasting on the channel, in HHMM (24-hour) format. Apply the UTC offset for the service to calculate the local time. For sources that broadcast 24-hours, this is midnight (00:00:00Z)."
                                            },
                                            "days": {
                                                "type": "string",
                                                "description": "Days of the week the broadcast time is in effect. Each day is specified as two characters, so a source that broadcasts every day is shown as \"MoTuWeThFrSaSu\"."
                                            },
                                            "source": {
                                                "type": "object",
                                                "description": "Information about the source of programming content, with IDs for addtional information.",
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "description": "Rovi ID for the source of programming content."
                                                    },
                                                    "in": {
                                                        "type": "string",
                                                        "description": "Primary language of program content from the source, stated as a two-character ISO 639 language code."
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "description": "Display name of the source."
                                                    },
                                                    "call": {
                                                        "type": "string",
                                                        "description": "Call letters of the source."
                                                    },
                                                    "isHd": {
                                                        "type": "boolean",
                                                        "description": "True if the service broadcasts in high definition (HDTV). Element is omitted otherwise."
                                                    },
                                                    "links": {
                                                        "type": "object",
                                                        "properties": {
                                                            "data_source": {
                                                                "type": "object",
                                                                "description": "ID to use in a data_source request to get more information about the source of the broadcast.",
                                                                "properties": {
                                                                    "id": {
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "id"
                                                                ]
                                                            },
                                                            "data_source_logos": {
                                                                "type": "object",
                                                                "description": "ID to use in a data_source_logos request to get logos for the source.",
                                                                "properties": {
                                                                    "id": {
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "id"
                                                                ]
                                                            }
                                                        },
                                                        "required": [
                                                            "data_source",
                                                            "data_source_logos"
                                                        ]
                                                    }
                                                },
                                                "required": [
                                                    "id",
                                                    "in",
                                                    "links"
                                                ]
                                            }
                                        },
                                        "required": [
                                            "days",
                                            "source"
                                        ]
                                    }
                                ]
                            }
                        },
                        "required": [
                            "windows"
                        ]
                    }
                ]
            },
            "links": {
                "type": "object",
                "properties": {
                    "data_service": {
                        "type": "object",
                        "description": " ID to use in a data_service request for information about the television service.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "data_service_channels": {
                        "type": "object",
                        "description": " ID to use in a data_service_channels request for information about the channel lineup offered by the television service.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                },
                "required": [
                    "data_service",
                    "data_service_channels"
                ]
            },
            "page": {
                "type": "integer",
                "description": "Pagination index of the request."
            },
            "size": {
                "type": "integer",
                "description": "Number of elements returned."
            },
            "total": {
                "type": "integer",
                "description": "Number of total elements."
            }
        },
        "required": [
            "id",
            "channels",
            "links"
        ]
    }
```
+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_service_channels/single [/data_service_channels/single?id={id}&page={page}]  
Returns channel information for a television service at one channel per request. Use this request to present information for a single channel in linear form, instead of a grid.

**Design Note:** &nbsp; Partner this request with [data_service_schedules/single](/#reference/tv-schedule/dataserviceschedulessingle). For each page of channel data you get here, request the same page number of TV listings there. If your contract with Rovi allows caching, we recommend caching channel data locally and updating TV listings as needed during the session.

## GET 
This request requires the `data_service_channels` ID for the television service, which is returned as a link in responses to a [data_service](/#reference/tv-schedule/dataservice) or [data_browse_service](/#reference/tv-schedule/databrowseservice) request. A `data_service_channels` ID for a television service is the same as the `data_service` ID.

For US national television listings, however, use the following `data_service_channels` IDs. These listings do not include channel numbers because they cover an entire time zone, but local viewers generally know the channels for these sources, which are the most popular national broadcast and cable sources, like HBO, CNBC, and CSPAN.
+ 341759807 â€” US Eastern Time Zone
+ 341759808 â€” US Central Time Zone
+ 341759810 â€” US Pacific Time Zone

+ Parameters
  + id (required, integer, `1063353154`)
    The `data_service_channels` ID for the television service, which is returned as a link in responses to a [data_service](/#reference/tv-schedule/dataservice) or [data_browse_service](/#reference/tv-schedule/databrowseservice) request. A `data_service_channels` ID for a television service is the same as the `data_service` ID.
  + page (optional, integer, `1`)
    Page number of the list to return. The first page contains information about the first channel in the channel list, the second page contains information about the second channel in the list, and so on. These are not channel numbers, but rather serve as an index of channels within the lineup. A page number greater than the number of channels returns status code 404.

+ Response 200 (application/json)
```
    {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "title": "service_channels",
        "description": "Channel lineup for a television service, with information about each channel.",
        "properties": {
            "id": {
                "type": "integer",
                "description": "Rovi ID for the television service offering this channel lineup."
            },
            "channels": {
                "type": "array",
                "items": [
                    {
                        "type": "object",
                        "description": "Information about the channels in this channel lineup.",
                        "properties": {
                            "channel": {
                                "type": "string",
                                "description": "Channel number."
                            },
                            "type": {
                                "type": "string",
                                "description": "Type of broadcast schedule the channel follows.",
                                "oneOf": [
                                    {
                                        "enum": [
                                            "24hours"
                                        ],
                                        "description": "Channel broadcasts a single programming source 24 hours a day."
                                    },
                                    {
                                        "enum": [
                                            "shared"
                                        ],
                                        "description": "Channel broadcasts 24 hours a day, but two or more programming sources broadcast during different times of the day."
                                    },
                                    {
                                        "enum": [
                                            "partial"
                                        ],
                                        "description": "Channel broadcasts one or more programming sources, but is off-air for part of the day."
                                    }
                                ]
                            },
                            "code": {
                                "type": "string",
                                "description": "Headend device type: \"Digital (non-rebuild)\" (digital converter), \"OTA Broadcast\" (over-the-air broadcast), \"Rebuild\" (plant upgraded to deliver more bandwidth), \"CableCard\" (use of CableCard), \"IPTV\" (delivered over IP-based networks)."
                            },
                            "windows": {
                                "type": "array",
                                "items": [
                                    {
                                        "type": "object",
                                        "description": "Times and days each source broadcasts on the channel. A \"type: 24hours\" channel broadcasts one source all day, every day.",
                                        "properties": {
                                            "start": {
                                                "type": "string",
                                                "description": "UTC date and time the source began this schedule on this channel. Apply the UTC offset for the service at that time to calculate the local time."
                                            },
                                            "end": {
                                                "type": "string",
                                                "description": "UTC date and time the source ends this schedule on this channel. Apply the UTC offset for the service at that time to calculate the local time."
                                            },
                                            "on": {
                                                "type": "string",
                                                "description": "UTC time the source starts broadcasting on the channel, in HHMM (24-hour) format. Apply the UTC offset for the service to calculate the local time. For sources that broadcast 24-hours, this is midnight (00:00:00Z)."
                                            },
                                            "off": {
                                                "type": "string",
                                                "description": "UTC time the source stops broadcasting on the channel, in HHMM (24-hour) format. Apply the UTC offset for the service to calculate the local time. For sources that broadcast 24-hours, this is midnight (00:00:00Z)."
                                            },
                                            "days": {
                                                "type": "string",
                                                "description": "Days of the week the broadcast time is in effect. Each day is specified as two characters, so a source that broadcasts every day is shown as \"MoTuWeThFrSaSu\"."
                                            },
                                            "source": {
                                                "type": "object",
                                                "description": "Information about the source of programming content, with IDs for addtional information.",
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "description": "Rovi ID for the source of programming content."
                                                    },
                                                    "in": {
                                                        "type": "string",
                                                        "description": "Primary language of program content from the source, stated as a two-character ISO 639 language code."
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "description": "Display name of the source."
                                                    },
                                                    "call": {
                                                        "type": "string",
                                                        "description": "Call letters of the source."
                                                    },
                                                    "isHd": {
                                                        "type": "boolean",
                                                        "description": "True if the service broadcasts in high definition (HDTV). Element is omitted otherwise."
                                                    },
                                                    "links": {
                                                        "type": "object",
                                                        "properties": {
                                                            "data_source": {
                                                                "type": "object",
                                                                "description": "ID to use in a data_source request to get more information about the source of the broadcast.",
                                                                "properties": {
                                                                    "id": {
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "id"
                                                                ]
                                                            },
                                                            "data_source_logos": {
                                                                "type": "object",
                                                                "description": "ID to use in a data_source_logos request to get logos for the source.",
                                                                "properties": {
                                                                    "id": {
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "id"
                                                                ]
                                                            }
                                                        },
                                                        "required": [
                                                            "data_source",
                                                            "data_source_logos"
                                                        ]
                                                    }
                                                },
                                                "required": [
                                                    "id",
                                                    "in",
                                                    "links"
                                                ]
                                            }
                                        },
                                        "required": [
                                            "days",
                                            "source"
                                        ]
                                    }
                                ]
                            }
                        },
                        "required": [
                            "windows"
                        ]
                    }
                ]
            },
            "links": {
                "type": "object",
                "properties": {
                    "data_service": {
                        "type": "object",
                        "description": " ID to use in a data_service request for information about the television service.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "data_service_channels": {
                        "type": "object",
                        "description": " ID to use in a data_service_channels request for information about the channel lineup offered by the television service.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                },
                "required": [
                    "data_service",
                    "data_service_channels"
                ]
            },
            "page": {
                "type": "integer",
                "description": "Pagination index of the request."
            },
            "size": {
                "type": "integer",
                "description": "Number of elements returned."
            },
            "total": {
                "type": "integer",
                "description": "Number of total elements."
            }
        },
        "required": [
            "id",
            "channels",
            "links"
        ]
    }
```
+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_service_schedules/bulk [/data_service_schedules/bulk?id={id}&date={date}&block={block}&page={page}] 
Returns six hours of TV listings for a television service, at 50 channels per request, to be used asynchronously in the background to fill a local store.  Language of program titles is determined by the broadcast source.

**Design Note:** &nbsp; Partner this request with [data_service_channels/bulk](/#reference/tv-schedule/dataservicechannelsbulk). For each page of channel data you get there, request the same page number of TV listings here. If your contract with Rovi allows caching, we recommend caching channel data locally and updating TV listings as needed during the session.

*This request returns a large amount of data and is not intended to be displayed all at once for a waiting user. For fast responses for immediate display, use the /single or /screen request instead.*
 
## GET
This request requires the `data_service_schedules` ID for the television service, which is returned as a link in responses to a [data_service](/#reference/tv-schedule/dataservice) or [data_browse_service](/#reference/tv-schedule/databrowseservice) request. A `data_service_schedules` ID for a television service is the same as the `data_service` ID.

For US national television listings, however, use the following `data_service_schedules` IDs. These listings do not include channel numbers because they cover an entire time zone, but local viewers generally know the channels for these sources, which are the most popular national broadcast and cable sources, like HBO, CNBC, and CSPAN.
+ 341759807 â€” US Eastern Time Zone
+ 341759808 â€” US Central Time Zone
+ 341759810 â€” US Pacific Time Zone

+ Parameters
  + id (required, integer, `1063353154`)
    The `data_service_schedules` ID for the television service, which is returned as a link in responses to a [data_service](/#reference/tv-schedule/dataservice) or [data_browse_service](/#reference/tv-schedule/databrowseservice) request. A `data_service_schedules` ID for a television service is the same as the `data_service` ID.
  + date (required, string matching \d{4}-\d{2}-\d{2})
    UTC date of the TV listings you want, from the current UTC date up to a date two weeks in the future, in YYYY-MM-DD format. To determine the local time that a UTC date starts, add the local UTC offset to 12:00AM. For example, for San Francisco, with a UTC offset of -420 minutes during daylight savings time, the UTC date begins at 5:00PM local time.
    <br> &emsp; The UTC offset for a television service is returned by [data_service](/#reference/tv-schedule/dataservice). Because program times are returned in UTC, you also use the local UTC offset to calculate local program dates and times.
    <br> &emsp; **Note:**  When local daylight savings time begins and ends, the UTC offset also changes. You need to change time labels when those events occur and, if you want to maintain the same local time segments, make a second call for the next UTC time segment.
  + block (required, integer from 1 to 4, `1`)
    Which six-hour time segment of the day to return, from 1 to 4. The time segments correspond to UTC starting times of 12:00AM, 6:00AM, 12:00PM, and 6:00PM.
  + page (optional, integer, `1`)
    Page number of the list to return. The first page contains TV listings for the first 50 channels in the channel list, the second page contains channels 51 to 100 in the list, and so on. These are not channel numbers, but rather serve as an index of channels within the lineup. A page number greater than the number of available pages returns status code 404.

+ Response 200 (application/json)
```
    {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "title": "service_schedules",
        "description": "TV listings data that is designed for presentation in a grid format.",
        "properties": {
            "date": {
                "type": "string",
                "description": "UTC date of the schedule."
            },
            "links": {
                "type": "object",
                "properties": {
                    "data_service_schedules": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "ID to use in a data_service_schedules request for this data."
                            },
                            "date": {
                                "type": "string",
                                "description": "Date to use in a data_service_schedules request for this data."
                            }
                        },
                        "required": [
                            "id",
                            "date"
                        ]
                    },
                    "data_service": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "ID to use in a data_service request for information about this television service."
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                },
                "required": [
                    "data_service_schedules",
                    "data_service"
                ]
            },
            "page": {
                "type": "integer",
                "description": "Pagination index of the request."
            },
            "size": {
                "type": "integer",
                "description": "Number of elements returned."
            },
            "total": {
                "type": "integer",
                "description": "Number of total elements."
            },
            "schedule": {
                "type": "array",
                "items": [
                    {
                        "type": "object",
                        "properties": {
                            "channel": {
                                "type": "string",
                                "description":"Channel number."
                            },
                            "airings": {
                                "type": "array",
                                "items": [
                                    {
                                        "type": "object",
                                        "title": "airing",
                                        "description": "Information about a television broadcast.",
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "description": "Rovi ID for the broadcast."
                                            },
                                            "image": {
                                                "type": "object",
                                                "description": "Information about an original image related to the movie or program.",
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "description": "Rovi ID for the image."
                                                    },
                                                    "zoom": {
                                                        "type": "string",
                                                        "description": "How much of the subject appears in the picture: head, torso, body, framed, std."
                                                    }
                                                },
                                                "required": [
                                                    "id",
                                                    "zoom"
                                                ]
                                            },
                                            "content": {
                                                "type": "object",
                                                "properties": {
                                                    "series": {
                                                        "type": "object",
                                                        "description": "Information about the TV series if the broadcast is an episode.",
                                                        "properties": {
                                                            "title": {
                                                                "type": "string",
                                                                "description": "Title of the TV series."
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "source": {
                                                "type": "object",
                                                "description": "Information about the source of the broadcast."
                                            },
                                            "type": {
                                                "type": "string",
                                                "description": "Type of program: series, episode, movie, other."
                                            },
                                            "title": {
                                                "type": "string",
                                                "description": "Title of the program."
                                            },
                                            "start": {
                                                "type": "string",
                                                "description": "Date and time the broadcast starts, in UTC time. To calculate the local time, add the current UTC offset for the television service."
                                            },
                                            "end": {
                                                "type": "string",
                                                "description": "Date and time the broadcast ends, in UTC time."
                                            },
                                            "isBlackout": {
                                                "type": "boolean",
                                                "description": "True if the program is subject to blackout. Element is omitted otherwise."
                                            },
                                            "exhibition": {
                                                "type": "string",
                                                "description": "Type of broadcast: live, new, repeat, taped, none."
                                            },
                                            "showing": {
                                                "type": "string",
                                                "description": "Type of television show: Finale, Paid For, Premiere, Season Finale, Season Premiere, Series Finale, Series Premiere, None."
                                            },
                                            "category": {
                                                "type": "string",
                                                "description": "Program category: News, Movie, Music, Sports, Lifestyle, Children's, Other."
                                            },
                                            "caption": {
                                                "type": "string",
                                                "description": "Type of captions provided by the program: OC (open captions), CC (closed captions), SL (sign language), OC/SL (open captions or sign language), CC/SL (closed captions or sign language), None (no captions)."
                                            },
                                            "audio": {
                                                "type": "string",
                                                "description": "Audio standard used by the program: Stereo, Dolby 5.1, DSS Surround Sound, None (mono or unknown)."
                                            },
                                            "isHd": {
                                                "type": "boolean",
                                                "description": "True if the program is broadcast in high definition (HDTV). Element is omitted otherwise."
                                            },
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "data_airing": {
                                                        "type": "object",
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "description": "ID to use in a data_airing request to get localized information about the broadcast."
                                                            }
                                                        },
                                                        "required": [
                                                            "id"
                                                        ]
                                                    },
                                                    "data_airing_synopses": {
                                                        "type": "object",
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "description": "ID to use in a data_airing_synopsis request to get a localized synopsis of the program."
                                                            }
                                                        },
                                                        "required": [
                                                            "id"
                                                        ]
                                                    }
                                                },
                                                "required": [
                                                    "data_airing",
                                                    "data_airing_synopses"
                                                ]
                                            }
                                        },
                                        "required": [
                                            "id",
                                            "content",
                                            "source",
                                            "type",
                                            "title",
                                            "start",
                                            "end",
                                            "links"
                                        ]
                                    }
                                ]
                            }
                        },
                        "required": [
                            "channel",
                            "airings"
                        ]
                    }
                ]
            }
        },
        "required": [
            "id",
            "links",
            "schedule"
        ]
    }
```
+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_service_schedules/screen [/data_service_schedules/screen?id={id}&date={date}&block={block}&page={page}] 
Returns four hours of TV listings for a television service, at 10 channels per request. Increment the page number in successive requests to return TV listings for all of the channels offered by the television service. Language of program titles is determined by the broadcast source.

**Design Note:** &nbsp; Partner this request with [data_service_channels/screen](/#reference/tv-schedule/dataservicechannelscreen). For each page of channel data you get there, request the same page number of TV listings here. If your contract with Rovi allows caching, we recommend caching channel data locally and updating TV listings as needed during the session.

## GET
This request requires the `data_service_schedules` ID for the television service, which is returned as a link in responses to a [data_service](/#reference/tv-schedule/dataservice) or [data_browse_service](/#reference/tv-schedule/databrowseservice) request. A `data_service_schedules` ID for a television service is the same as the `data_service` ID.

For US national television listings, however, use the following `data_service_schedules` IDs. These listings do not include channel numbers because they cover an entire time zone, but local viewers generally know the channels for these sources, which are the most popular national broadcast and cable sources, like HBO, CNBC, and CSPAN.
+ 341759807 â€” US Eastern Time Zone
+ 341759808 â€” US Central Time Zone
+ 341759810 â€” US Pacific Time Zone

+ Parameters
  + id (required, integer, `1063353154`)
    The `data_service_schedules` ID for the television service, which is returned as a link in responses to a [data_service](/#reference/tv-schedule/dataservice) or [data_browse_service](/#reference/tv-schedule/databrowseservice) request. A `data_service_schedules` ID for a television service is the same as the `data_service` ID.
  + date (required, string matching \d{4}-\d{2}-\d{2})
    UTC date of the TV listings you want, from the current UTC date up to a date two weeks in the future, in YYYY-MM-DD format. To determine the local time that a UTC date starts, add the local UTC offset to 12:00AM. For example, for San Francisco, with a UTC offset of -420 minutes during daylight savings time, the UTC date begins at 5:00PM local time.
    <br> &emsp; The UTC offset for a television service is returned by [data_service](/#reference/tv-schedule/dataservice). Because program times are returned in UTC, you also use the local UTC offset to calculate local program dates and times.
    <br> &emsp; **Note:**  When local daylight savings time begins and ends, the UTC offset also changes. You need to change time labels when those events occur and, if you want to maintain the same local time segments, make a second call for the next UTC time segment.
  + block (required, integer from 1 to 6, `1`)
    Which four-hour time segment of the day to return, from 1 to 6. The time segments correspond to UTC starting times of 12:00AM, 4:00AM, 8:00AM, 12:00PM, 4:00PM, and 8:00PM.
  + page (optional, integer, `1`)
    Page number of the list to return. The first page contains TV listings for the first 10 channels in the channel list, the second page contains channels 11 to 20 in the list, and so on. These are not channel numbers, but rather serve as an index of channels within the lineup. A page number greater than the number of available pages returns status code 404.

+ Response 200 (application/json)
```
    {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "title": "service_schedules",
        "description": "TV listings data that is designed for presentation in a grid format.",
        "properties": {
            "date": {
                "type": "string",
                "description": "UTC date of the schedule."
            },
            "links": {
                "type": "object",
                "properties": {
                    "data_service_schedules": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "ID to use in a data_service_schedules request for this data."
                            },
                            "date": {
                                "type": "string",
                                "description": "Date to use in a data_service_schedules request for this data."
                            }
                        },
                        "required": [
                            "id",
                            "date"
                        ]
                    },
                    "data_service": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "ID to use in a data_service request for information about this television service."
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                },
                "required": [
                    "data_service_schedules",
                    "data_service"
                ]
            },
            "page": {
                "type": "integer",
                "description": "Pagination index of the request."
            },
            "size": {
                "type": "integer",
                "description": "Number of elements returned."
            },
            "total": {
                "type": "integer",
                "description": "Number of total elements."
            },
            "schedule": {
                "type": "array",
                "items": [
                    {
                        "type": "object",
                        "properties": {
                            "channel": {
                                "type": "string",
                                "description":"Channel number."
                            },
                            "airings": {
                                "type": "array",
                                "items": [
                                    {
                                        "type": "object",
                                        "title": "airing",
                                        "description": "Information about a television broadcast.",
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "description": "Rovi ID for the broadcast."
                                            },
                                            "image": {
                                                "type": "object",
                                                "description": "Information about an original image related to the movie or program.",
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "description": "Rovi ID for the image."
                                                    },
                                                    "zoom": {
                                                        "type": "string",
                                                        "description": "How much of the subject appears in the picture: head, torso, body, framed, std."
                                                    }
                                                },
                                                "required": [
                                                    "id",
                                                    "zoom"
                                                ]
                                            },
                                            "content": {
                                                "type": "object",
                                                "properties": {
                                                    "series": {
                                                        "type": "object",
                                                        "description": "Information about the TV series if the broadcast is an episode.",
                                                        "properties": {
                                                            "title": {
                                                                "type": "string",
                                                                "description": "Title of the TV series."
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "source": {
                                                "type": "object",
                                                "description": "Information about the source of the broadcast."
                                            },
                                            "type": {
                                                "type": "string",
                                                "description": "Type of program: series, episode, movie, other."
                                            },
                                            "title": {
                                                "type": "string",
                                                "description": "Title of the program."
                                            },
                                            "start": {
                                                "type": "string",
                                                "description": "Date and time the broadcast starts, in UTC time. To calculate the local time, add the current UTC offset for the television service."
                                            },
                                            "end": {
                                                "type": "string",
                                                "description": "Date and time the broadcast ends, in UTC time."
                                            },
                                            "isBlackout": {
                                                "type": "boolean",
                                                "description": "True if the program is subject to blackout. Element is omitted otherwise."
                                            },
                                            "exhibition": {
                                                "type": "string",
                                                "description": "Type of broadcast: live, new, repeat, taped, none."
                                            },
                                            "showing": {
                                                "type": "string",
                                                "description": "Type of television show: Finale, Paid For, Premiere, Season Finale, Season Premiere, Series Finale, Series Premiere, None."
                                            },
                                            "category": {
                                                "type": "string",
                                                "description": "Program category: News, Movie, Music, Sports, Lifestyle, Children's, Other."
                                            },
                                            "caption": {
                                                "type": "string",
                                                "description": "Type of captions provided by the program: OC (open captions), CC (closed captions), SL (sign language), OC/SL (open captions or sign language), CC/SL (closed captions or sign language), None (no captions)."
                                            },
                                            "audio": {
                                                "type": "string",
                                                "description": "Audio standard used by the program: Stereo, Dolby 5.1, DSS Surround Sound, None (mono or unknown)."
                                            },
                                            "isHd": {
                                                "type": "boolean",
                                                "description": "True if the program is broadcast in high definition (HDTV). Element is omitted otherwise."
                                            },
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "data_airing": {
                                                        "type": "object",
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "description": "ID to use in a data_airing request to get localized information about the broadcast."
                                                            }
                                                        },
                                                        "required": [
                                                            "id"
                                                        ]
                                                    },
                                                    "data_airing_synopses": {
                                                        "type": "object",
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "description": "ID to use in a data_airing_synopsis request to get a localized synopsis of the program."
                                                            }
                                                        },
                                                        "required": [
                                                            "id"
                                                        ]
                                                    }
                                                },
                                                "required": [
                                                    "data_airing",
                                                    "data_airing_synopses"
                                                ]
                                            }
                                        },
                                        "required": [
                                            "id",
                                            "content",
                                            "source",
                                            "type",
                                            "title",
                                            "start",
                                            "end",
                                            "links"
                                        ]
                                    }
                                ]
                            }
                        },
                        "required": [
                            "channel",
                            "airings"
                        ]
                    }
                ]
            }
        },
        "required": [
            "id",
            "links",
            "schedule"
        ]
    }
```
+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_service_schedules/single [/data_service_schedules/single?id={id}&date={date}&page={page}] 
Returns one day of TV listings for a television service, at one channel per request.  Use this request to present information for a single channel in linear form, instead of a grid. Language of program titles is determined by the broadcast source.

**Design Note:** &nbsp; Partner this request with [data_service_channels/single](/#reference/tv-schedule/dataservicechannelssingle). For each page of channel data you get there, request the same page number of TV listings here. If your contract with Rovi allows caching, we recommend caching channel data locally and updating TV listings as needed during the session.
 
## GET
This request requires the `data_service_schedules` ID for the television service, which is returned as a link in responses to a [data_service](/#reference/tv-schedule/dataservice) or [data_browse_service](/#reference/tv-schedule/databrowseservice) request. A `data_service_schedules` ID for a television service is the same as the `data_service` ID.

For US national television listings, however, use the following `data_service_schedules` IDs. These listings do not include channel numbers because they cover an entire time zone, but local viewers generally know the channels for these sources, which are the most popular national broadcast and cable sources, like HBO, CNBC, and CSPAN.
+ 341759807 â€” US Eastern Time Zone
+ 341759808 â€” US Central Time Zone
+ 341759810 â€” US Pacific Time Zone

+ Parameters
  + id (required, integer, `1063353154`)
    The `data_service_schedules` ID for the television service, which is returned as a link in responses to a [data_service](/#reference/tv-schedule/dataservice) or [data_browse_service](/#reference/tv-schedule/databrowseservice) request. A `data_service_schedules` ID for a television service is the same as the `data_service` ID.
  + date (required, string matching \d{4}-\d{2}-\d{2})
    UTC date of the TV listings you want, from the current UTC date up to a date two weeks in the future, in YYYY-MM-DD format. To determine the local time that a UTC date starts, add the local UTC offset to 12:00AM. For example, for San Francisco, with a UTC offset of -420 minutes during daylight savings time, the UTC date begins at 5:00PM local time.
    <br> &emsp; The UTC offset for a television service is returned by [data_service](/#reference/tv-schedule/dataservice). Because program times are returned in UTC, you also use the local UTC offset to calculate local program dates and times.
    <br> &emsp; **Note:**  When local daylight savings time begins and ends, the UTC offset also changes. You need to change time labels when those events occur and, if you want to maintain the same local time segments, make a second call for the next UTC time segment.
  + page (optional, integer, `1`)
    Page number of the list to return. The first page contains TV listings for the first channel in the channel list, the second page contains the second channel in the channel list, and so on. These are not channel numbers, but rather serve as an index of channels within the lineup. A page number greater than the number of available channels returns status code 404.

+ Response 200 (application/json)
```
    {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "title": "service_schedules",
        "description": "TV listings data that is designed for presentation in a grid format.",
        "properties": {
            "date": {
                "type": "string",
                "description": "UTC date of the schedule."
            },
            "links": {
                "type": "object",
                "properties": {
                    "data_service_schedules": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "ID to use in a data_service_schedules request for this data."
                            },
                            "date": {
                                "type": "string",
                                "description": "Date to use in a data_service_schedules request for this data."
                            }
                        },
                        "required": [
                            "id",
                            "date"
                        ]
                    },
                    "data_service": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "ID to use in a data_service request for information about this television service."
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                },
                "required": [
                    "data_service_schedules",
                    "data_service"
                ]
            },
            "page": {
                "type": "integer",
                "description": "Pagination index of the request."
            },
            "size": {
                "type": "integer",
                "description": "Number of elements returned."
            },
            "total": {
                "type": "integer",
                "description": "Number of total elements."
            },
            "schedule": {
                "type": "array",
                "items": [
                    {
                        "type": "object",
                        "properties": {
                            "channel": {
                                "type": "string",
                                "description":"Channel number."
                            },
                            "airings": {
                                "type": "array",
                                "items": [
                                    {
                                        "type": "object",
                                        "title": "airing",
                                        "description": "Information about a television broadcast.",
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "description": "Rovi ID for the broadcast."
                                            },
                                            "image": {
                                                "type": "object",
                                                "description": "Information about an original image related to the movie or program.",
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "description": "Rovi ID for the image."
                                                    },
                                                    "zoom": {
                                                        "type": "string",
                                                        "description": "How much of the subject appears in the picture: head, torso, body, framed, std."
                                                    }
                                                },
                                                "required": [
                                                    "id",
                                                    "zoom"
                                                ]
                                            },
                                            "content": {
                                                "type": "object",
                                                "properties": {
                                                    "series": {
                                                        "type": "object",
                                                        "description": "Information about the TV series if the broadcast is an episode.",
                                                        "properties": {
                                                            "title": {
                                                                "type": "string",
                                                                "description": "Title of the TV series."
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "source": {
                                                "type": "object",
                                                "description": "Information about the source of the broadcast."
                                            },
                                            "type": {
                                                "type": "string",
                                                "description": "Type of program: series, episode, movie, other."
                                            },
                                            "title": {
                                                "type": "string",
                                                "description": "Title of the program."
                                            },
                                            "start": {
                                                "type": "string",
                                                "description": "Date and time the broadcast starts, in UTC time. To calculate the local time, add the current UTC offset for the television service."
                                            },
                                            "end": {
                                                "type": "string",
                                                "description": "Date and time the broadcast ends, in UTC time."
                                            },
                                            "isBlackout": {
                                                "type": "boolean",
                                                "description": "True if the program is subject to blackout. Element is omitted otherwise."
                                            },
                                            "exhibition": {
                                                "type": "string",
                                                "description": "Type of broadcast: live, new, repeat, taped, none."
                                            },
                                            "showing": {
                                                "type": "string",
                                                "description": "Type of television show: Finale, Paid For, Premiere, Season Finale, Season Premiere, Series Finale, Series Premiere, None."
                                            },
                                            "category": {
                                                "type": "string",
                                                "description": "Program category: News, Movie, Music, Sports, Lifestyle, Children's, Other."
                                            },
                                            "caption": {
                                                "type": "string",
                                                "description": "Type of captions provided by the program: OC (open captions), CC (closed captions), SL (sign language), OC/SL (open captions or sign language), CC/SL (closed captions or sign language), None (no captions)."
                                            },
                                            "audio": {
                                                "type": "string",
                                                "description": "Audio standard used by the program: Stereo, Dolby 5.1, DSS Surround Sound, None (mono or unknown)."
                                            },
                                            "isHd": {
                                                "type": "boolean",
                                                "description": "True if the program is broadcast in high definition (HDTV). Element is omitted otherwise."
                                            },
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "data_airing": {
                                                        "type": "object",
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "description": "ID to use in a data_airing request to get localized information about the broadcast."
                                                            }
                                                        },
                                                        "required": [
                                                            "id"
                                                        ]
                                                    },
                                                    "data_airing_synopses": {
                                                        "type": "object",
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "description": "ID to use in a data_airing_synopsis request to get a localized synopsis of the program."
                                                            }
                                                        },
                                                        "required": [
                                                            "id"
                                                        ]
                                                    }
                                                },
                                                "required": [
                                                    "data_airing",
                                                    "data_airing_synopses"
                                                ]
                                            }
                                        },
                                        "required": [
                                            "id",
                                            "content",
                                            "source",
                                            "type",
                                            "title",
                                            "start",
                                            "end",
                                            "links"
                                        ]
                                    }
                                ]
                            }
                        },
                        "required": [
                            "channel",
                            "airings"
                        ]
                    }
                ]
            }
        },
        "required": [
            "id",
            "links",
            "schedule"
        ]
    }
```
+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_source [/data_source?id={id}] 
Returns information about the source of the broadcast content and schedule for a television channel. Examples of sources include HBO, CNBC, and CSPAN.

## GET 
This request requires the `data_source` ID for the TV channel, which is returned in responses to the following requests:
+ [data_airing](/#reference/tv-schedule/datasairing)
+ [data_service_channels/bulk](/#reference/tv-schedule/dataservicechannelsbulk)
+ [data_service_channels/single](/#reference/tv-schedule/dataservicechannelssingle)
+ [data_service_channels/screen](/#reference/tv-schedule/dataservicechannelsscreen)
+ [data_series_appearances](/#reference/tv-schedule/dataseriesappearances)
+ [data_movie_appearances](/#reference/tv-schedule/datamovieappearances)
+ [data_other_appearances](/#reference/tv-schedule/dataotherappearances)
+ [data_episode_appearances](/#reference/tv-schedule/dataepisodeappearances)

+ Parameters
  + id (required, integer, `69049209`)
    The `data_source` ID for the TV channel, which is returned in responses to the following requests:
      + [data_airing](/#reference/tv-schedule/datasairing)
      + [data_service_channels/bulk](/#reference/tv-schedule/dataservicechannelsbulk)
      + [data_service_channels/single](/#reference/tv-schedule/dataservicechannelssingle)
      + [data_service_channels/screen](/#reference/tv-schedule/dataservicechannelsscreen)
      + [data_series_appearances](/#reference/tv-schedule/dataseriesappearances)
      + [data_movie_appearances](/#reference/tv-schedule/datamovieappearances)
      + [data_other_appearances](/#reference/tv-schedule/dataotherappearances)
      + [data_episode_appearances](/#reference/tv-schedule/dataepisodeappearances)

+ Response 200 (application/json)
```
    {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "title": "source",
        "description": "Information about a source of programming content to a television channel.",
        "properties": {
            "id": {
                "type": "integer",
                "description": "Rovi ID for the source."
            },
            "in": {
                "type": "string",
                "description": "Primary language the source broadcasts in, stated as a two-character ISO 639 language code."
            },
            "name": {
                "type": "string",
                "description": "Display name of the source."
            },
            "alts": {
                "type": "object",
                "description": "Names the source is known by.",
                "properties": {
                    "full": {
                        "type": "string",
                        "description": "Full name of the source."
                    },
                    "source": {
                        "type": "string",
                        "description": "A short name of the source."
                    }
                },
                "required": [
                    "source"
                ]
            },
            "logo": {
                "type": "object",
                "description": "Primary logo associated with the source.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Rovi ID for the source."
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "media_logo": {
                                "type": "object"
                                "properties": {
                                    "id": {
                                        "type": "integer",
                                        "description": "ID to use in a media_logo request to return the logo.",
                                    }
                                },
                                "required": [
                                    "id"
                                ]
                            }
                        },
                        "required": [
                            "media_logo"
                        ]
                    }
                },
                "required": [
                    "id",
                    "links"
                ]
            },
            "call": {
                "type": "string",
                "description": "Call letters for the source."
            },
            "city": {
                "type": "string",
                "description": "Home city of the source."
            },
            "state": {
                "type": "string",
                "description": "Home state of the source."
            },
            "country": {
                "type": "string",
                "description": "Home country of the source."
            },
            "type": {
                "type": "string",
                "description": "Type of source.",
                "oneOf": [
                    {
                        "enum": [
                            "basic"
                        ],
                        "description": "Basic subscription channel."
                    },
                    {
                        "enum": [
                            "broadcast"
                        ],
                        "description": "Over-the-air broadcast station."
                    },
                    {
                        "enum": [
                            "free"
                        ],
                        "description": "Free-to-air service (generally in the EU)."
                    },
                    {
                        "enum": [
                            "local"
                        ],
                        "description": "Local origination or local access station."
                    },
                    {
                        "enum": [
                            "network"
                        ],
                        "description": "Television network."
                    },
                    {
                        "enum": [
                            "pay"
                        ],
                        "description": "Pay TV channel."
                    },
                    {
                        "enum": [
                            "ppv"
                        ],
                        "description": "Pay-per-view channel."
                    },
                    {
                        "enum": [
                            "premium"
                        ],
                        "description": "Premium subscription channel."
                    },
                    {
                        "enum": [
                            "vod"
                        ],
                        "description": "Video on demand channel."
                    }
                ]
            },
            "is3D": {
                "type": "boolean",
                "description": "True if the source broadcasts in 3D. Element is omitted otherwise."
            },
            "isDigital": {
                "type": "boolean",
                "description": "True if the source broadcasts in digital. Element is omitted otherwise."
            },
            "isHdTv": {
                "type": "boolean",
                "description": "True if the source broadcasts in high definition (HDTV). Element is omitted otherwise."
            },
            "isPsip": {
                "type": "boolean",
                "description": "True if a digital TV (DTV) source transmits Program and System Information Protocol (PSIP) with Virtual Channel Table (VCT). Element is omitted otherwise."
            },
            "zone": {
                "type": "object",
                "properties": {
                    "zone": {
                        "type": "string",
                        "description": "Time zone the source broadcasts from."
                    },
                    "zoneWindows": {
                        "type": "object",
                        "properties": {
                            "start": {
                                "type": "string",
                                "description": "When the offset value begins, stated as a UTC date and time."
                            },
                            "end": {
                                "type": "string",
                                "description": "When the offset value ends, stated as a UTC date and time."
                            },
                            "offset": {
                                "type": "integer",
                                "description": "Value in minutes that the local time is offset from UTC. May be a positive or negative offset."
                            }
                        }
                    }
                },
                "required": [
                    "zone"
                ]
            },
            "synonyms": {
                "type": "array",
                "description": "Legacy IDs for the source.",
                "items": [
                    {
                        "type": "object",
                        "properties": {
                            "source": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "source"
                        ]
                    }
                ]
            },
            "links": {
                "type": "object",
                "properties": {
                    "data_source": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "ID to use in a data_source request to get information about the source."
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "data_source_logos": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "ID to use in a data_source_logos request to get logos for the source."
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                },
                "required": [
                    "data_source"
                ]
            }
        },
        "required": [
            "id",
            "in",
            "name",
            "alts",
            "logo",
            "zone",
            "links"
        ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_source_airings/single [/data_source_airings/single?id={id}&date={date}] 
Returns a 24-hour broadcast schedule for a source of programming on a television channel.

## GET 
This request requires the `data_source` ID for source of programming on the TV channel, which is returned in responses to the following requests:
+ [data_airing](/#reference/tv-schedule/datasairing)
+ [data_service_channels/bulk](/#reference/tv-schedule/dataservicechannelsbulk)
+ [data_service_channels/single](/#reference/tv-schedule/dataservicechannelssingle)
+ [data_service_channels/screen](/#reference/tv-schedule/dataservicechannelsscreen)
+ [data_series_appearances](/#reference/tv-schedule/dataseriesappearances)
+ [data_movie_appearances](/#reference/tv-schedule/datamovieappearances)
+ [data_other_appearances](/#reference/tv-schedule/dataotherappearances)
+ [data_episode_appearances](/#reference/tv-schedule/dataepisodeappearances)

+ Parameters
  + id (required, integer, `69049209`)
    The `data_source` ID for the TV channel, which is returned in responses to the following requests:
      + [data_airing](/#reference/tv-schedule/datasairing)
      + [data_service_channels/bulk](/#reference/tv-schedule/dataservicechannelsbulk)
      + [data_service_channels/single](/#reference/tv-schedule/dataservicechannelssingle)
      + [data_service_channels/screen](/#reference/tv-schedule/dataservicechannelsscreen)
      + [data_series_appearances](/#reference/tv-schedule/dataseriesappearances)
      + [data_movie_appearances](/#reference/tv-schedule/datamovieappearances)
      + [data_other_appearances](/#reference/tv-schedule/dataotherappearances)
      + [data_episode_appearances](/#reference/tv-schedule/dataepisodeappearances)
      
  + date (required, string matching \d{4}-\d{2}-\d{2}, `2015-08-30`)
    UTC date of the schedule, specified in YYYY-MM-DD format. To determine the local time that a UTC date starts, add the local UTC offset to 12:00AM. For example, for San Francisco, with a UTC offset of -420 minutes during daylight savings time, the UTC date begins at 5:00PM local time. Because program times are returned in UTC, you also use the local UTC offset to calculate local program dates and times. The UTC offset for a television service is returned by [data_service](/#reference/tv-schedule/dataservice).

+ Response 200 (application/json)

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_movie_appearances [/data_movie_appearances?id={id}&serviceId={serviceId}&date={date}&page={page}] 
Returns a schedule of local television broadcasts of a movie.

Execute this request if the user wants local broadcast times for a movie title returned by one of the availability requests:
+ [discover_available_similar_video/movie](/#reference/recommendations/discoveravailablesimilarvideomovie)
+ [discover_available_similar_video/content](/#reference/recommendations/discoveravailablesimilarvideocontent)
+ [discover_available_video_by_search/movie](/#reference/search/discoveravailablevideobysearchmovie)
+ [discover_available_video_by_search/content](/#reference/search/discoveravailablevideobysearchcontent)
+ [discover_available_video_by_genre/movie](/#reference/search/discoveravailablevideobygenremovie)
+ [discover_available_video_by_genre/content](/#reference/search/discoveravailablevideobygenrecontent)

## GET
This request requires the following IDs:
+ The `data_service` ID of the television service, returned by a response to the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
+ The `data_movie_appearances` ID, returned by a response to the availability request. A `data_movie_appearances` ID is the same as the `data_movie` ID for the movie.

+ Parameters
  + id (required, integer, `914511209`)
    The `data_movie_appearances` ID for the movie, which is returned by the following availability requests.  A `data_movie_appearances` ID is the same as the `data_movie` ID for the movie.
     + [discover_available_similar_video/movie](/#reference/recommendations/discoveravailablesimilarvideomovie)
     + [discover_available_similar_video/content](/#reference/recommendations/discoveravailablesimilarvideocontent)
     + [discover_available_video_by_search/movie](/#reference/search/discoveravailablevideobysearchmovie)
     + [discover_available_video_by_search/content](/#reference/search/discoveravailablevideobysearchcontent)
     + [discover_available_video_by_genre/movie](/#reference/search/discoveravailablevideobygenremovie)
     + [discover_available_video_by_genre/content](/#reference/search/discoveravailablevideobygenrecontent)
     
  + serviceId (required, integer, `528503608`)
    The `data_service` ID for the television service, returned by a response to the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + date (required, string matching \d{4}-\d{2}-\d{2}, `2015-08-28`)
    UTC date the schedule begins, specified in YYYY-MM-DD format. The returned schedule covers up to two weeks from the current date. To determine the local time that a UTC date starts, add the local UTC offset to 12:00AM. For example, for San Francisco, with a UTC offset of -420 minutes during daylight savings time, the UTC date begins at 5:00PM local time.
    <br> &emsp; The UTC offset for a television service is returned by [data_service](/#reference/tv-schedule/dataservice). Because program times are returned in UTC, you also use the local UTC offset to calculate local program dates and times.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.

+ Response 200 (application/json)
```
    {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "title": "movie_appearances",
        "description": "A schedule of local television broadcasts of a movie.",
        "properties": {
            "id": {
                "type": "integer",
                "description": "Rovi ID for the movie."
            },
            "links": {
                "type": "object",
                "properties": {
                    "data_movie_appearances": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "The ID used in the request for the movie."
                            },
                            "service": {
                                "type": "integer",
                                "description": "The serviceId used in the request."
                            },
                            "date": {
                                "type": "string",
                                "description": "The date used in the request."
                            }
                        },
                        "required": [
                            "id",
                            "service",
                            "date"
                        ]
                    },
                    "data_movie": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "ID to use in a data_movie request to get information about the movie."
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                },
                "required": [
                    "data_movie_appearances",
                    "data_movie"
                ]
            },
            "page": {
                "type": "integer",
                "description": "Pagination index of the request."
            },
            "size": {
                "type": "integer",
                "description": "Number of elements returned."
            },
            "total": {
                "type": "integer",
                "description": "Number of total elements."
            },
            "appearances": {
                "type": "array",
                "items": [
                    {
                        "type": "object",
                        "properties": {
                            "channels": {
                                "type": "array",
                                "description": "Channel numbers that broadcast the movie at the specified time.",
                                "items": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "channel": {
                                                "type": "string",
                                                "description":"Channel number."
                                            }
                                        },
                                        "required": [
                                            "channel"
                                        ]
                                    }
                                ]
                            },
                            "airing": {
                                "type": "object",
                                "title": "airing",
                                "description": "Information about a television broadcast.",
                                "properties": {
                                    "id": {
                                        "type": "integer",
                                        "description": "Rovi ID for the broadcast."
                                    },
                                    "image": {
                                        "type": "object",
                                        "description": "Information about the primary image associated with the movie.",
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "description": "Rovi ID for the image."
                                            },
                                            "zoom": {
                                                "type": "string",
                                                "description": "How much of the subject appears in the picture."
                                            }
                                        },
                                        "required": [
                                            "id",
                                            "zoom"
                                        ]
                                    },
                                    "source": {
                                        "type": "object"
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "description": "Rovi ID for the source of the broadcast."
                                            },
                                            "name": {
                                                "type": "string",
                                                "description": "Short name of the source of the broadcast."
                                            }
                                        },
                                        "required": [
                                            "id",
                                            "name"
                                        ]
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "Type of program: movie, series, season, episode, other."
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "Title of the program."
                                    },
                                    "start": {
                                        "type": "string",
                                        "description": "Date and time the broadcast starts, in UTC time. To calculate the local time, add the current UTC offset for the television service."
                                    },
                                    "end": {
                                        "type": "string",
                                        "description": "Date and time the broadcast ends, in UTC time."
                                    },
                                    "isBlackout": {
                                        "type": "boolean",
                                        "description": "True if the program is subject to blackout. Element is omitted otherwise."
                                    },
                                    "exhibition": {
                                        "type": "string",
                                        "description": "Type of broadcast: live, new, repeat, taped, none."
                                    },
                                    "showing": {
                                        "type": "string",
                                        "description": "Type of television show: Finale, Paid For, Premiere, Season Finale, Season Premiere, Series Finale, Series Premiere, or Unknown."
                                    },
                                    "category": {
                                        "type": "string",
                                        "description": "Program category: News, Movie, Music, Sports, Lifestyle, Children's, or Other."
                                    },
                                    "caption": {
                                        "type": "string",
                                        "description": "Type of captions provided by the program: OC (open captions), CC (closed captions), SL (sign language), OC/SL (open captions or sign language), CC/SL (closed captions or sign language), or None (no captions)."
                                    },
                                    "audio": {
                                        "type": "string",
                                        "description": "Audio standard used by the program: Stereo, Dolby 5.1, DSS Surround Sound, None (mono or unknown)."
                                    },
                                    "isHd": {
                                        "type": "boolean",
                                        "description": "True if the program is broadcast in high definition (HDTV). Element is omitted otherwise."
                                    },
                                    "links": {
                                        "type": "object",
                                        "properties": {
                                            "data_airing": {
                                                "type": "object",
                                                "description": "ID to use in a data_airing request to get information about the broadcast.",
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "id"
                                                ]
                                            },
                                            "data_airing_synopses": {
                                                "type": "object",
                                                "description": "ID to use in a data_airing_synopsis request to get a synopsis of the program.",
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "id"
                                                ]
                                            }
                                        },
                                        "required": [
                                            "data_airing",
                                            "data_airing_synopses"
                                        ]
                                    }
                                },
                                "required": [
                                    "id",
                                    "source",
                                    "type",
                                    "title",
                                    "start",
                                    "end",
                                    "links"
                                ]
                            }
                        },
                        "required": [
                            "channels",
                            "airing"
                        ]
                    }
                ]
            }
        },
        "required": [
            "id",
            "links",
            "appearances"
        ]
    }
```
+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_series_appearances [/data_series_appearances?id={id}&serviceId={serviceId}&date={date}&page={page}] 
Returns a schedule of local television broadcasts of a TV series.

Execute this request if the user wants local broadcast times for a TV series title returned by one of the availability requests:
+ [discover_available_similar_video/content](/#reference/recommendations/discoveravailablesimilarvideocontent)
+ [discover_available_video_by_search/content](/#reference/search/discoveravailablevideobysearchcontent)
+ [discover_available_video_by_genre/series](/#reference/search/discoveravailablevideobygenreseries)
+ [discover_available_video_by_genre/content](/#reference/search/discoveravailablevideobygenrecontent)

## GET
This request requires the following IDs:
+ The `data_service` ID for the television service, returned by a response to the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
+ The `data_series_appearances` ID, returned by a response to the availability request. A `data_series_appearances` ID is the same as the `data_series` ID for the series.

+ Parameters
  + id (required, integer, `916247613`)
    The `data_series_appearances` ID for the TV series, which is returned by the following availability requests.  A `data_series_appearances` ID is the same as the `data_series` ID for the series.
     + [discover_available_similar_video/content](/#reference/recommendations/discoveravailablesimilarvideocontent)
     + [discover_available_video_by_search/content](/#reference/search/discoveravailablevideobysearchcontent)
     + [discover_available_video_by_genre/series](/#reference/search/discoveravailablevideobygenreseries)
     + [discover_available_video_by_genre/content](/#reference/search/discoveravailablevideobygenrecontent)
     
  + serviceId (required, integer, `528503608`)
    The `data_service` ID for the television service, returned by a response to the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + date (required, string matching \d{4}-\d{2}-\d{2}, `2015-08-28`)
    UTC date the schedule begins, specified in YYYY-MM-DD format. The returned schedule covers up to two weeks from the current date. To determine the local time that a UTC date starts, add the local UTC offset to 12:00AM. For example, for San Francisco, with a UTC offset of -420 minutes during daylight savings time, the UTC date begins at 5:00PM local time.
    <br> &emsp; The UTC offset for a television service is returned by [data_service](/#reference/tv-schedule/dataservice). Because program times are returned in UTC, you also use the local UTC offset to calculate local program dates and times.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.

+ Response 200 (application/json)
```
    {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "title": "series_appearances",
        "description": "A schedule of local television broadcasts of a TV series.",
        "properties": {
            "id": {
                "type": "integer",
                "description": "Rovi ID for the TV series."
            },
            "links": {
                "type": "object",
                "properties": {
                    "data_series_appearances": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "The ID specified in the request for the series."
                            },
                            "service": {
                                "type": "integer",
                                "description": "The serviceId specified in the request."
                            },
                            "date": {
                                "type": "string",
                                "description": "The date specified in the request."
                            }
                        },
                        "required": [
                            "id",
                            "service",
                            "date"
                        ]
                    },
                    "data_series": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "ID to use in a data_series request to get information about the series."
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                },
                "required": [
                    "data_series_appearances",
                    "data_series"
                ]
            },
            "page": {
                "type": "integer",
                "description": "Pagination index of the request."
            },
            "size": {
                "type": "integer",
                "description": "Number of elements returned."
            },
            "total": {
                "type": "integer",
                "description": "Number of total elements."
            },
            "appearances": {
                "type": "array",
                "items": [
                    {
                        "type": "object",
                        "properties": {
                            "channels": {
                                "type": "array",
                                "description": "Channel numbers that broadcast the series at the specified time.",
                                "items": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "channel": {
                                                "type": "string",
                                                "description": "Channel number."
                                            }
                                        },
                                        "required": [
                                            "channel"
                                        ]
                                    }
                                ]
                            },
                            "airing": {
                                "type": "object",
                                "title": "airing",
                                "description": "Information about a television broadcast.",
                                "properties": {
                                    "id": {
                                        "type": "integer",
                                        "description": "Rovi ID for the broadcast."
                                    },
                                    "image": {
                                        "type": "object",
                                        "description": "Information about the primary image associated with the movie or program.",
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "description": "Rovi ID for the image."
                                            },
                                            "zoom": {
                                                "type": "string",
                                                "description": "How much of the subject appears in the picture."
                                            }
                                        },
                                        "required": [
                                            "id",
                                            "zoom"
                                        ]
                                    },
                                    "source": {
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "description": "Rovi ID for the source of the broadcast."
                                            },
                                            "name": {
                                                "type": "string",
                                                "description": "Short name of the source of the broadcast."
                                        },
                                        "required": [
                                            "id",
                                            "name"
                                        ]
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "Type of program: movie, series, season, episode, other."
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "Title of the program."
                                    },
                                    "start": {
                                        "type": "string",
                                        "description": "Date and time the broadcast starts, in UTC time. To calculate the local time, add the current UTC offset for the television service."
                                    },
                                    "end": {
                                        "type": "string",
                                        "description": "Date and time the broadcast ends, in UTC time."
                                    },
                                    "isBlackout": {
                                        "type": "boolean",
                                        "description": "True if the program is subject to blackout. Element is omitted otherwise."
                                    },
                                    "exhibition": {
                                        "type": "string",
                                        "description": "Type of broadcast: live, new, repeat, taped, none."
                                    },
                                    "showing": {
                                        "type": "string",
                                        "description": "Type of television show: Finale, Paid For, Premiere, Season Finale, Season Premiere, Series Finale, Series Premiere, or Unknown."
                                    },
                                    "category": {
                                        "type": "string",
                                        "description": "Program category: News, Movie, Music, Sports, Lifestyle, Children's, or Other."
                                    },
                                    "caption": {
                                        "type": "string",
                                        "description": "Type of captions provided by the program: OC (open captions), CC (closed captions), SL (sign language), OC/SL (open captions or sign language), CC/SL (closed captions or sign language), or None (no captions)."
                                    },
                                    "audio": {
                                        "type": "string",
                                        "description": "Audio standard used by the program: Stereo, Dolby 5.1, DSS Surround Sound, None (mono or unknown)."
                                    },
                                    "isHd": {
                                        "type": "boolean",
                                        "description": "True if the program is broadcast in high definition (HDTV). Element is omitted otherwise."
                                    },
                                    "links": {
                                        "type": "object",
                                        "properties": {
                                            "data_airing": {
                                                "type": "object",
                                                "description": "ID to use in a data_airing request to get information about the broadcast.",
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "id"
                                                ]
                                            },
                                            "data_airing_synopses": {
                                                "type": "object",
                                                "description": "ID to use in a data_airing_synopsis request to get a synopsis of the program.",
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "id"
                                                ]
                                            }
                                        },
                                        "required": [
                                            "data_airing",
                                            "data_airing_synopses"
                                        ]
                                    }
                                },
                                "required": [
                                    "id",
                                    "source",
                                    "type",
                                    "title",
                                    "start",
                                    "end",
                                    "links"
                                ]
                            }
                        },
                        "required": [
                            "channels",
                            "airing"
                        ]
                    }
                ]
            }
        },
        "required": [
            "id",
            "links",
            "appearances"
        ]
    }
```
+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_episode_appearances [/data_episode_appearances?id={id}&serviceId={serviceId}&date={date}&page={page}] 
Returns a schedule of local television broadcasts of an epidsode in a TV series.

Execute this request if the user wants local broadcast times for an episode title returned by one of the availability requests:
+ [discover_available_similar_video/content](/#reference/recommendations/discoveravailablesimilarvideocontent)
+ [discover_available_video_by_search/content](/#reference/search/discoveravailablevideobysearchcontent)
+ [discover_available_by_genre/content](/#reference/search/discoveravailablebygenre/content)

## GET
This request requires the following IDs:
+ The `data_service` ID for the television service, returned by a response to the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
+ The `data_episode_appearances` ID, returned by a response to the availability request. A `data_episode_appearances` ID is the same as the `data_episode` ID for the episode.

For US national television listings, however, use the following `data_service` IDs. These listings do not include channel numbers because they cover an entire time zone, but local viewers generally know the channels for these sources, which are the most popular national broadcast and cable sources, like HBO, CNBC, and CSPAN.
+ 341759807 â€” US Eastern Time Zone
+ 341759808 â€” US Central Time Zone
+ 341759810 â€” US Pacific Time Zone

+ Parameters
  + id (required, integer, `1443670807`)
    The `data_episode_appearances` ID for an episode in a TV series, which is returned by the following availability requests. A `data_episode_appearances` ID is the same as the `data_episode` ID for the episode.
     + [discover_available_similar_video/content](/#reference/recommendations/discoveravailablesimilarvideocontent)
     + [discover_available_video_by_search/content](/#reference/search/discoveravailablevideobysearchcontent)
     + [discover_available_video_by_genre/content](/#reference/search/discoveravailablevideobygenrecontent)
     
  + serviceId (required, integer, `528503608`)
    The `data_service` ID for the television service, returned by a response to the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + date (required, string matching \d{4}-\d{2}-\d{2}, `2015-08-28`)
    UTC date the schedule begins, specified in YYYY-MM-DD format. The returned schedule covers up to two weeks from the current date. To determine the local time that a UTC date starts, add the local UTC offset to 12:00AM. For example, for San Francisco, with a UTC offset of -420 minutes during daylight savings time, the UTC date begins at 5:00PM local time.
    <br> &emsp; The UTC offset for a television service is returned by [data_service](/#reference/tv-schedule/dataservice). Because program times are returned in UTC, you also use the local UTC offset to calculate local program dates and times.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.

+ Response 200 (application/json)
```
    {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "title": "episode_appearances",
        "description": "A schedule of local television broadcasts of an episode in a TV series.",
        "properties": {
            "id": {
                "type": "integer",
                "description": "Rovi ID for the episode."
            },
            "links": {
                "type": "object",
                "properties": {
                    "data_episode_appearances": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "The ID specified in the request for the episode."
                            },
                            "service": {
                                "type": "integer",
                                "description": "The serviceId specified in the request."
                            },
                            "date": {
                                "type": "string",
                                "description": "The date specified in the request."
                            }
                        },
                        "required": [
                            "id",
                            "service",
                            "date"
                        ]
                    },
                    "data_episode": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "ID to use in a data_episode request to get information about the episode."
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "data_series": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "ID to use in a data_series request to get information about the TV series."
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                },
                "required": [
                    "data_episode_appearances",
                    "data_episode",
                    "data_series"
                ]
            },
            "page": {
                "type": "integer",
                "description": "Pagination index of the request."
            },
            "size": {
                "type": "integer",
                "description": "Number of elements returned."
            },
            "total": {
                "type": "integer",
                "description": "Number of total elements."
            },
            "appearances": {
                "type": "array",
                "items": [
                    {
                        "type": "object",
                        "properties": {
                            "channels": {
                                "type": "array",
                                "description": "Channel numbers that broadcast the episode at the specified time.",
                                "items": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "channel": {
                                                "type": "string",
                                                "description": "Channel number."
                                            }
                                        },
                                        "required": [
                                            "channel"
                                        ]
                                    }
                                ]
                            },
                            "airing": {
                                "type": "object",
                                "title": "airing",
                                "description": "Information about a television broadcast.",
                                "properties": {
                                    "id": {
                                        "type": "integer",
                                        "description": "Rovi ID for the broadcast."
                                    },
                                    "image": {
                                        "type": "object",
                                        "description": "Information about the primary image associated with the program.",
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "description": "Rovi ID for the image."
                                            },
                                            "zoom": {
                                                "type": "string",
                                                "description": "How much of the subject appears in the picture."
                                            }
                                        },
                                        "required": [
                                            "id",
                                            "zoom"
                                        ]
                                    },
                                    "source": {
                                        "type": "object"
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "description": "ID to use in a data_source request to get information about the source of the broadcast."
                                            },
                                            "name": {
                                                "type": "string",
                                                "description": "Short name of the source of the broadcast."
                                            }
                                        },
                                        "required": [
                                            "id",
                                            "name"
                                        ]
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "Type of program: movie, series, season, episode, other."
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "Title of the program."
                                    },
                                    "start": {
                                        "type": "string",
                                        "description": "Date and time the broadcast starts, in UTC time. To calculate the local time, add the current UTC offset for the television service."
                                    },
                                    "end": {
                                        "type": "string",
                                        "description": "Date and time the broadcast ends, in UTC time."
                                    },
                                    "isBlackout": {
                                        "type": "boolean",
                                        "description": "True if the program is subject to blackout. Element is omitted otherwise."
                                    },
                                    "exhibition": {
                                        "type": "string",
                                        "description": "Type of broadcast: live, new, repeat, taped, none."
                                    },
                                    "showing": {
                                        "type": "string",
                                        "description": "Type of television show: Finale, Paid For, Premiere, Season Finale, Season Premiere, Series Finale, Series Premiere, or Unknown."
                                    },
                                    "category": {
                                        "type": "string",
                                        "description": "Program category: News, Movie, Music, Sports, Lifestyle, Children's, or Other."
                                    },
                                    "caption": {
                                        "type": "string",
                                        "description": "Type of captions provided by the program: OC (open captions), CC (closed captions), SL (sign language), OC/SL (open captions or sign language), CC/SL (closed captions or sign language), or None (no captions)."
                                    },
                                    "audio": {
                                        "type": "string",
                                        "description": "Audio standard used by the program: Stereo, Dolby 5.1, DSS Surround Sound, None (mono or unknown)."
                                    },
                                    "isHd": {
                                        "type": "boolean",
                                        "description": "True if the program is broadcast in high definition (HDTV). Element is omitted otherwise."
                                    },
                                    "links": {
                                        "type": "object",
                                        "properties": {
                                            "data_airing": {
                                                "type": "object",
                                                "description": "ID to use in a data_airing request to get information about the broadcast.",
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "id"
                                                ]
                                            },
                                            "data_airing_synopses": {
                                                "type": "object",
                                                "description": "ID to use in a data_airing_synopsis request to get a synopsis of the program.",
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "id"
                                                ]
                                            }
                                        },
                                        "required": [
                                            "data_airing",
                                            "data_airing_synopses"
                                        ]
                                    }
                                },
                                "required": [
                                    "id",
                                    "source",
                                    "type",
                                    "title",
                                    "start",
                                    "end",
                                    "links"
                                ]
                            }
                        },
                        "required": [
                            "channels",
                            "airing"
                        ]
                    }
                ]
            }
        },
        "required": [
            "id",
            "links",
            "appearances"
        ]
    }
```
+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_other_appearances [/data_other_appearances?id={id}&serviceId={serviceId}&date={date}&page={page}] 
Returns a schedule of local television broadcasts of a TV program that is not a movie or TV series.

Execute this request if the user wants local broadcast times for a program title returned by one of the availability requests:
+ [discover_available_similar_video/content](/#reference/recommendations/discoveravailablesimilarvideocontent)
+ [discover_available_video_by_search/content](/#reference/search/discoveravailablevideobysearchcontent)
+ [discover_available_video_by_genre/content](/#reference/search/discoveravailablevideobygenrecontent)

## GET
This request requires the following IDs:
+ The `data_service` ID for the television service, returned by a response to the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
+ The `data_other_appearances` ID, returned by a response to the availability request. A `data_other_appearances` ID is the same as the `data_other` ID for the program.

For US national television listings, however, use the following `data_service` IDs. These listings do not include channel numbers because they cover an entire time zone, but local viewers generally know the channels for these sources, which are the most popular national broadcast and cable sources, like HBO, CNBC, and CSPAN.
+ 341759807 â€” US Eastern Time Zone
+ 341759808 â€” US Central Time Zone
+ 341759810 â€” US Pacific Time Zone

+ Parameters
  + id (required, integer, `1546068448`)
    The `data_other_appearances` ID for a TV program that is not a movie or TV series, returned by the following availability requests. A `data_other_appearances` ID is the same as the `data_other` ID for the program.
     + [discover_available_similar_video/content](/#reference/recommendations/discoveravailablesimilarvideocontent)
     + [discover_available_video_by_search/content](/#reference/search/discoveravailablevideobysearchcontent)
     + [discover_available_video_by_genre/content](/#reference/search/discoveravailablevideobygenrecontent)
     
  + serviceId (required, integer, `1063353154`)
    The `data_service` ID for the television service, returned by a response to the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + date (required, string matching \d{4}-\d{2}-\d{2}, `2015-08-28`)
    UTC date the schedule begins, specified in YYYY-MM-DD format. The returned schedule covers up to two weeks from the current date. To determine the local time that a UTC date starts, add the local UTC offset to 12:00AM. For example, for San Francisco, with a UTC offset of -420 minutes during daylight savings time, the UTC date begins at 5:00PM local time.
    <br> &emsp; The UTC offset for a television service is returned by [data_service](/#reference/tv-schedule/dataservice). Because program times are returned in UTC, you also use the local UTC offset to calculate local program dates and times.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.

+ Response 200 (application/json)
```
    {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "title": "other_appearances",
        "description": "A schedule of local television broadcasts of a program that is not a movie or TV series.",
        "properties": {
            "id": {
                "type": "integer",
                "description": "Rovi ID for the program."
            },
            "links": {
                "type": "object",
                "properties": {
                    "data_other_appearances": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "The ID specified in the request for the program."
                            },
                            "service": {
                                "type": "integer",
                                "description": "The ID specified in the request for the television service."
                            },
                            "date": {
                                "type": "string",
                                "description": "The date specified in the request."
                            }
                        },
                        "required": [
                            "id",
                            "service",
                            "date"
                        ]
                    },
                    "data_other": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "ID to use in a data_other request to get information about the program."
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                },
                "required": [
                    "data_other_appearances",
                    "data_other"
                ]
            },
            "page": {
                "type": "integer",
                "description": "Pagination index of the request."
            },
            "size": {
                "type": "integer",
                "description": "Number of elements returned."
            },
            "total": {
                "type": "integer",
                "description": "Total number of elements."
            },
            "appearances": {
                "type": "array",
                "description":"Broadcasts of the program.",
                "items": [
                    {
                        "type": "object",
                        "properties": {
                            "channels": {
                                "type": "array",
                                "description": "Channel numbers that broadcast the program at the specified time.",
                                "items": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "channel": {
                                                "type": "string",
                                                "description":"Channel number."
                                            }
                                        },
                                        "required": [
                                            "channel"
                                        ]
                                    }
                                ]
                            },
                            "airing": {
                                "type": "object",
                                "title": "airing",
                                "description": "Information about a television broadcast.",
                                "properties": {
                                    "id": {
                                        "type": "integer",
                                        "description": "Rovi ID for the broadcast."
                                    },
                                    "image": {
                                        "type": "object",
                                        "description": "Information about an original image related to the program.",
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "description": "Rovi ID for the image."
                                            },
                                            "zoom": {
                                                "type": "string",
                                                "description": "How much of the subject appears in the picture."
                                            }
                                        },
                                        "required": [
                                            "id",
                                            "zoom"
                                        ]
                                    },
                                    "source": {
                                        "type": "object",
                                        "description": "Information about the source of the program.",
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "description": "ID to use in a data_source request to get information about the source of the program."
                                            },
                                            "name": {
                                                "type": "string",
                                                "description": "A short name of the source."
                                            }
                                        },
                                        "required": [
                                            "id",
                                            "name"
                                        ]
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "Type of program: movie, series, season, episode, other."
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "Title of the program."
                                    },
                                    "start": {
                                        "type": "string",
                                        "description": "Date and time the broadcast starts, in UTC time. To calculate the local time, add the current UTC offset for the television service."
                                    },
                                    "end": {
                                        "type": "string",
                                        "description": "Date and time the broadcast ends, in UTC time."
                                    },
                                    "isBlackout": {
                                        "type": "boolean",
                                        "description": "True if the program is subject to blackout. Element is omitted otherwise."
                                    },
                                    "exhibition": {
                                        "type": "string",
                                        "description": "Type of broadcast: live, new, repeat, taped, none."
                                    },
                                    "showing": {
                                        "type": "string",
                                        "description": "Type of television show: Finale, Paid For, Premiere, Season Finale, Season Premiere, Series Finale, Series Premiere, or Unknown."
                                    },
                                    "category": {
                                        "type": "string",
                                        "description": "Program category: News, Movie, Music, Sports, Lifestyle, Children's, or Other."
                                    },
                                    "caption": {
                                        "type": "string",
                                        "description": "Type of captions provided by the program: OC (open captions), CC (closed captions), SL (sign language), OC/SL (open captions or sign language), CC/SL (closed captions or sign language), or None (no captions)."
                                    },
                                    "audio": {
                                        "type": "string",
                                        "description": "Audio standard used by the program: Stereo, Dolby 5.1, DSS Surround Sound, None (mono or unknown)."
                                    },
                                    "isHd": {
                                        "type": "boolean",
                                        "description": "True if the program is broadcast in high definition (HDTV). Element is omitted otherwise."
                                    },
                                    "links": {
                                        "type": "object",
                                        "properties": {
                                            "data_airing": {
                                                "type": "object",
                                                "description": "ID to use in a data_airing request to get information about the broadcast.",
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "id"
                                                ]
                                            },
                                            "data_airing_synopses": {
                                                "type": "object",
                                                "description": "ID to use in a data_airing_synopsis request to get a synopsis of the program.",
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "id"
                                                ]
                                            }
                                        },
                                        "required": [
                                            "data_airing",
                                            "data_airing_synopses"
                                        ]
                                    }
                                },
                                "required": [
                                    "id",
                                    "source",
                                    "type",
                                    "title",
                                    "start",
                                    "end",
                                    "links"
                                ]
                            }
                        },
                        "required": [
                            "channels",
                            "airing"
                        ]
                    }
                ]
            }
        },
        "required": [
            "id",
            "links",
            "appearances"
        ]
    }
```
+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_person_appearances [/data_person_appearances?id={id}&serviceId={serviceId}&date={date}&page={page}] 
Returns a schedule of local television broadcast appearances of a person.

## GET
This request requires the following IDs:
+ The `data_service` ID for the television service, returned by a response to the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
+ The `data_person` ID for the person, returned by responses to the _credits requests.

For US national television listings, however, use the following `data_service` IDs. These listings do not include channel numbers because they cover an entire time zone, but local viewers generally know the channels for these sources, which are the most popular national broadcast and cable sources, like HBO, CNBC, and CSPAN.
+ 341759807 â€” US Eastern Time Zone
+ 341759808 â€” US Central Time Zone
+ 341759810 â€” US Pacific Time Zone

+ Parameters
  + id (required, integer, `6779289`)
    The `data_person` ID for the person, returned in responses to the following requests:
     + [data_airing_credits](/#reference/tv-and-movie-data/dataairingcreditscast)
     + [data_movie_credits](/#reference/movie/datamoviecreditscast)
     + [data_series_credits](/#reference/series/dataseriescreditscast)
     + [data_other_credits](/#reference/other/dataothercreditscast)
     
  + serviceId (required, integer, `1063353154`)
    The `data_service` ID for the television service, returned by a response to the [data_browse_service](/#reference/tv-schedule/databrowseservice) request.
  + date (required, string matching \d{4}-\d{2}-\d{2}, `2015-08-28`)
    UTC date the schedule begins, specified in YYYY-MM-DD format. The returned schedule covers up to two weeks from the current date. To determine the local time that a UTC date starts, add the local UTC offset to 12:00AM. For example, for San Francisco, with a UTC offset of -420 minutes during daylight savings time, the UTC date begins at 5:00PM local time.
    <br> &emsp; The UTC offset for a television service is returned by [data_service](/#reference/tv-schedule/dataservice). Because program times are returned in UTC, you also use the local UTC offset to calculate local program dates and times.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.

+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"person_appearances",
       "description":"A schedule of local television broadcasts that a person appears in.",
       "properties":{
          "id":{
             "type":"integer"
          },
          "links":{
             "type":"object",
             "properties":{
                "data_person_appearances":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer"
                      },
                      "service":{
                         "type":"integer"
                      },
                      "date":{
                         "type":"string"
                      }
                   },
                   "required":[
                      "id",
                      "service",
                      "date"
                   ]
                },
                "data_person":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_person_appearances",
                "data_person"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          },
          "appearances":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "properties":{
                      "channels":{
                         "type":"array",
                         "items":[
                            {
                               "type":"object",
                               "properties":{
                                  "channel":{
                                     "type":"string"
                                  }
                               },
                               "required":[
                                  "channel"
                               ]
                            }
                         ]
                      },
                      "airing":{
                         "type":"object",
                         "title":"airing",
                         "description":"Information about a television broadcast.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the broadcast."
                            },
                            "in":{
                               "type":"string",
                               "description":"Language of the broadcast, stated as a two-character ISO 639 language code."
                            },
                            "type":{
                               "type":"string",
                               "description":"Type of program: movie, series, season, episode, other.",
                               "oneOf":[
                                  {
                                     "enum":[
                                        "movie"
                                     ],
                                     "description":"Movie."
                                  },
                                  {
                                     "enum":[
                                        "season"
                                     ],
                                     "description":"Season in a TV series."
                                  },
                                  {
                                     "enum":[
                                        "episode"
                                     ],
                                     "description":"Episode in a TV series."
                                  },
                                  {
                                     "enum":[
                                        "series"
                                     ],
                                     "description":"TV series."
                                  },
                                  {
                                     "enum":[
                                        "other"
                                     ],
                                     "description":"A program other than a movie or TV series."
                                  }
                               ]
                            },
                            "title":{
                               "type":"string",
                               "description":"Title of the program."
                            },
                            "alts":{
                               "type":"object",
                               "description":"Subtitle and other titles you can use for the program in lengths that are limited to 8, 15, 30, and 50 characters.",
                               "properties":{
                                  "short15":{
                                     "type":"string",
                                     "description":"Title with up to 15 characters for a grid cell. Creative abbreviations used as needed."
                                  },
                                  "short30":{
                                     "type":"string",
                                     "description":"Title with up to 30 characters. Creative abbreviations used as needed."
                                  },
                                  "short8":{
                                     "type":"string",
                                     "description":"Title with up to 8 characters for a grid cell. Creative abbreviations used as needed."
                                  },
                                  "short50":{
                                     "type":"string",
                                     "description":"Title with up to 50 characters. Creative abbreviations used as needed."
                                  },
                                  "alias":{
                                     "type":"string",
                                     "description":"Alternate title by which a show has been distributed."
                                  },
                                  "alias2":{
                                     "type":"string",
                                     "description":"Another alternate title by which a show has been distributed."
                                  },
                                  "alias3":{
                                     "type":"string",
                                     "description":"Another alternate title by which a show has been distributed."
                                  },
                                  "alias4":{
                                     "type":"string",
                                     "description":"Another alternate title by which a show has been distributed."
                                  },
                                  "subtitle":{
                                     "type":"string",
                                     "description":"Subtitle of the show."
                                  }
                               }
                            },
                            "image":{
                               "type":"object",
                               "description":"Information about a primary image related to the movie or program.",
                               "properties":{
                                  "id":{
                                     "type":"integer",
                                     "description":"Rovi ID for the image."
                                  },
                                  "zoom":{
                                     "type":"string",
                                     "description":"How much of the subject appears in the picture.",
                                     "oneOf":[
                                        {
                                           "enum":[
                                              "head"
                                           ],
                                           "description":"Head or shoulders to top of head."
                                        },
                                        {
                                           "enum":[
                                              "torso"
                                           ],
                                           "description":"Chest or thigh to top of head."
                                        },
                                        {
                                           "enum":[
                                              "body"
                                           ],
                                           "description":"Body fills at least 80% of frame."
                                        },
                                        {
                                           "enum":[
                                              "framed"
                                           ],
                                           "description":"Full body fills 50% to 80% of frame."
                                        },
                                        {
                                           "enum":[
                                              "std"
                                           ],
                                           "description":"Full body fills 50% of frame or less."
                                        }
                                     ]
                                  },
                                  "links":{
                                     "type":"object",
                                     "properties":{
                                        "media_image":{
                                           "type":"object",
                                           "description":"ID to use in a media_image request to get the image file.",
                                           "properties":{
                                              "id":{
                                                 "type":"integer"
                                              }
                                           },
                                           "required":[
                                              "id"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "media_image"
                                     ]
                                  }
                               },
                               "required":[
                                  "id",
                                  "zoom",
                                  "links"
                               ]
                            },
                            "content":{
                               "type":"object",
                               "description":"Information about the movie or program.",
                               "properties":{
                                  "id":{
                                     "type":"integer",
                                     "description":"Rovi ID for the program."
                                  },
                                  "title":{
                                     "type":"string",
                                     "description":"Title of the program."
                                  },
                                  "series":{
                                     "type":"object",
                                     "description":"Series information if airing is an episode",
                                     "properties":{
                                        "id":{
                                           "type":"integer",
                                           "description":"Rovi ID for the TV series."
                                        },
                                        "title":{
                                           "type":"string",
                                           "description":"Title of the TV series."
                                        },
                                        "links":{
                                           "type":"object",
                                           "properties":{
                                              "data_series":{
                                                 "type":"object",
                                                 "description":"ID to use in a data_series request to get information about the TV series.",
                                                 "properties":{
                                                    "id":{
                                                       "type":"integer"
                                                    }
                                                 },
                                                 "required":[
                                                    "id"
                                                 ]
                                              }
                                           },
                                           "required":[
                                              "data_series"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "id",
                                        "links"
                                     ]
                                  },
                                  "links":{
                                     "type":"object",
                                     "properties":{
                                        "data_episode":{
                                           "type":"object",
                                           "description":"ID to use in a data_episode request to get information about the episode.",
                                           "properties":{
                                              "id":{
                                                 "type":"integer"
                                              }
                                           },
                                           "required":[
                                              "id"
                                           ]
                                        },
                                        "data_movie":{
                                           "type":"object",
                                           "description":"ID to use in a data_movie request to get information about the movie.",
                                           "properties":{
                                              "id":{
                                                 "type":"integer"
                                              }
                                           },
                                           "required":[
                                              "id"
                                           ]
                                        },
                                        "data_series":{
                                           "type":"object",
                                           "description":"ID to use in a data_series request to get information about the TV series.",
                                           "properties":{
                                              "id":{
                                                 "type":"integer"
                                              }
                                           },
                                           "required":[
                                              "id"
                                           ]
                                        },
                                        "data_other":{
                                           "type":"object",
                                           "description":"ID to use in a data_other request to get information about program.",
                                           "properties":{
                                              "id":{
                                                 "type":"integer"
                                              }
                                           },
                                           "required":[
                                              "id"
                                           ]
                                        },
                                        "data_content_images":{
                                           "type":"object",
                                           "description":"ID to use in a data_content_images request to get information about available images for the program.",
                                           "properties":{
                                              "id":{
                                                 "type":"integer"
                                              }
                                           },
                                           "required":[
                                              "id"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "data_content_images"
                                     ]
                                  }
                               },
                               "required":[
                                  "id",
                                  "links"
                               ]
                            },
                            "source":{
                               "type":"object",
                               "description":"Information about the source of the program.",
                               "properties":{
                                  "id":{
                                     "type":"integer",
                                     "description":"Rovi ID for the source of the broadcast."
                                  },
                                  "name":{
                                     "type":"string",
                                     "description":"Short name of the source of the broadcast."
                                  },
                                  "links":{
                                     "type":"object",
                                     "properties":{
                                        "data_source":{
                                           "type":"object",
                                           "description":"ID to use in a data_source request to get information about the source of the broadcast.",
                                           "properties":{
                                              "id":{
                                                 "type":"integer"
                                              }
                                           },
                                           "required":[
                                              "id"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "data_source"
                                     ]
                                  }
                               },
                               "required":[
                                  "id",
                                  "name",
                                  "links"
                               ]
                            },
                            "isApproximate":{
                               "type":"boolean",
                               "description":"True if the broadcast time is approximate. Element is omitted otherwise."
                            },
                            "start":{
                               "type":"string",
                               "description":"Date and time the broadcast starts, in UTC time. To calculate the local time, add the current UTC offset for the television service."
                            },
                            "end":{
                               "type":"string",
                               "description":"Date and time the broadcast ends, in UTC time."
                            },
                            "isBlackout":{
                               "type":"boolean",
                               "description":"True if the program is subject to blackout. Element is omitted otherwise."
                            },
                            "duration":{
                               "type":"integer",
                               "description":"Duration of the broadcast in seconds."
                            },
                            "exhibition":{
                               "type":"string",
                               "description":"Type of broadcast: live, new, repeat, taped, none.",
                               "oneOf":[
                                  {
                                     "enum":[
                                        "live"
                                     ],
                                     "description":"Live broadcast. Not prerecorded."
                                  },
                                  {
                                     "enum":[
                                        "new"
                                     ],
                                     "description":"New broadcast. Not broadcast before."
                                  },
                                  {
                                     "enum":[
                                        "none"
                                     ],
                                     "description":"Broadcast type unknown."
                                  },
                                  {
                                     "enum":[
                                        "repeat"
                                     ],
                                     "description":"Repeat broadcast."
                                  },
                                  {
                                     "enum":[
                                        "taped"
                                     ],
                                     "description":"Tape-delayed broadcast, such as for airing at the same time in all time zones."
                                  }
                               ]
                            },
                            "showing":{
                               "type":"string",
                               "description":"Type of television show:  Finale, Paid For, Premiere, Season Finale, Season Premiere, Series Finale, Series Premiere, or None."
                            },
                            "parts":{
                               "type":"object",
                               "description":"Sequence of the show in a multipart program.",
                               "properties":{
                                  "number":{
                                     "type":"integer",
                                     "description":"Part number of the show within a multipart program."
                                  },
                                  "total":{
                                     "type":"integer",
                                     "description":"Number of parts in a multipart program."
                                  }
                               },
                               "required":[
                                  "number",
                                  "total"
                               ]
                            },
                            "category":{
                               "type":"string",
                               "description":"Program category:  News, Movie, Music, Sports, Lifestyle, Children's, or Other."
                            },
                            "ratings":{
                               "type":"object",
                               "description":"Parental ratings for the program.",
                               "properties":{
                                  "movie":{
                                     "type":"array",
                                     "items":[
                                        {
                                           "type":"object",
                                           "description":"Theatrical film parental ratings.",
                                           "properties":{
                                              "in":{
                                                 "type":"string"
                                              },
                                              "type":{
                                                 "type":"string",
                                                 "description":"Source of the parental rating."
                                              },
                                              "rating":{
                                                 "type":"string",
                                                 "description":"The parental rating."
                                              },
                                              "medium":{
                                                 "type":"string",
                                                 "description":"Media that this rating applies to.",
                                                 "oneOf":[
                                                    {
                                                       "enum":[
                                                          "movie"
                                                       ],
                                                       "description":"Theatrical film."
                                                    },
                                                    {
                                                       "enum":[
                                                          "tv"
                                                       ],
                                                       "description":"Television."
                                                    },
                                                    {
                                                       "enum":[
                                                          "stars"
                                                       ],
                                                       "description":"TV series qualitative rating from 1 to 4 stars. Rated by Rovi."
                                                    },
                                                    {
                                                       "enum":[
                                                          "age"
                                                       ],
                                                       "description":"TV series youngest appropriate age rating. Rated by Rovi."
                                                    },
                                                    {
                                                       "enum":[
                                                          "family"
                                                       ],
                                                       "description":"TV series family friendly rating on a scale of 0 to 10."
                                                    }
                                                 ]
                                              },
                                              "countries":{
                                                 "type":"array",
                                                 "description":"Countries the parental rating applies to.",
                                                 "items":{
                                                    "type":"string"
                                                 }
                                              },
                                              "reasons":{
                                                 "type":"array",
                                                 "description":"Reasons for the rating.",
                                                 "items":{
                                                    "type":"string"
                                                 }
                                              },
                                              "subrating":{
                                                 "type":"string",
                                                 "description":"Content warning labels that apply to the program."
                                              }
                                           },
                                           "required":[
                                              "in",
                                              "type",
                                              "rating"
                                           ]
                                        }
                                     ]
                                  },
                                  "tv":{
                                     "type":"object",
                                     "description":"Television parental ratings.",
                                     "properties":{
                                        "in":{
                                           "type":"string"
                                        },
                                        "type":{
                                           "type":"string",
                                           "description":"Source of the parental rating."
                                        },
                                        "rating":{
                                           "type":"string",
                                           "description":"The parental rating."
                                        },
                                        "medium":{
                                           "type":"string",
                                           "description":"Media that this rating applies to.",
                                           "oneOf":[
                                              {
                                                 "enum":[
                                                    "movie"
                                                 ],
                                                 "description":"Theatrical film."
                                              },
                                              {
                                                 "enum":[
                                                    "tv"
                                                 ],
                                                 "description":"Television."
                                              },
                                              {
                                                 "enum":[
                                                    "stars"
                                                 ],
                                                 "description":"TV series qualitative rating from 1 to 4 stars. Rated by Rovi."
                                              },
                                              {
                                                 "enum":[
                                                    "age"
                                                 ],
                                                 "description":"TV series youngest appropriate age rating. Rated by Rovi."
                                              },
                                              {
                                                 "enum":[
                                                    "family"
                                                 ],
                                                 "description":"TV series family friendly rating on a scale of 0 to 10."
                                              }
                                           ]
                                        },
                                        "countries":{
                                           "type":"array",
                                           "description":"Countries the parental rating applies to.",
                                           "items":{
                                              "type":"string"
                                           }
                                        },
                                        "reasons":{
                                           "type":"array",
                                           "description":"Reasons for the rating.",
                                           "items":{
                                              "type":"string"
                                           }
                                        },
                                        "subrating":{
                                           "type":"string",
                                           "description":"Content warning labels that apply to the program."
                                        }
                                     },
                                     "required":[
                                        "in",
                                        "type",
                                        "rating"
                                     ]
                                  }
                               }
                            },
                            "tvAdvisory":{
                               "type":"string",
                               "description":"Content descriptors that apply to a parental guidance rating for the program:  V (violence), S (sexual content), L (coarse language), D (suggestive dialogue), FV (fantasy violence)."
                            },
                            "isCC":{
                               "type":"boolean",
                               "description":"True if closed captions are available for the program. Element is omitted otherwise."
                            },
                            "caption":{
                               "type":"string",
                               "description":"Type of captions provided by the program:  OC (open captions), CC (closed captions), SL (sign language), OC\/SL (open captions or sign language), CC\/SL (closed captions or sign language), or None (no captions)."
                            },
                            "audio":{
                               "type":"string",
                               "description":"Audio standard used by the program:  Stereo, Dolby 5.1, DSS Surround Sound, None (mono or unknown). "
                            },
                            "aspect":{
                               "type":"string",
                               "description":"Screen format of the program:  Letterbox, Unknown, 16:9 Letterbox, 16:9 Fullscreen, 16:9 Unknown, 4:3 Letterbox, 4:3 Fullscreen, 4:3 Unknown. "
                            },
                            "color":{
                               "type":"string",
                               "description":"Color category for the program:  Color, Colorized, Black and White, May be colorized, Color and B&W Episodes, Unknown. "
                            },
                            "letterbox":{
                               "type":"boolean",
                               "description":"True if the program is broadcast in letterbox format. Element is omitted otherwise."
                            },
                            "subtitle":{
                               "type":"string",
                               "description":"Language of program subtitles, stated as the two-character ISO 639 language code."
                            },
                            "isHd":{
                               "type":"boolean",
                               "description":"True if the program is broadcast in high definition (HDTV). Element is omitted otherwise."
                            },
                            "isHdTV":{
                               "type":"boolean",
                               "description":"True if the program is broadcast in high definition (HDTV). Element is omitted otherwise."
                            },
                            "hd":{
                               "type":"string",
                               "description":"HD resolution of the program:  480p, 720p, 1080i, 1080p, HD Level Unknown. "
                            },
                            "threeD":{
                               "type":"string",
                               "description":"The 3D level of the program:  None, Sequential, 3D Level Unknown, Side-by-side. "
                            },
                            "isDvs":{
                               "type":"boolean",
                               "description":"True if the program is broadcast with a video description for the visually impaired (Descriptive Video Service). Element is omitted otherwise."
                            },
                            "isSap":{
                               "type":"boolean",
                               "description":"True if the program offers secondary audio programming (SAP), providing an audio track in another language. Element is omitted otherwise."
                            },
                            "isSports":{
                               "type":"boolean",
                               "description":"True if the program is a sporting event. Element is omitted otherwise."
                            },
                            "isSyndicated":{
                               "type":"boolean",
                               "description":"True if the program is syndicated. Element is omitted otherwise."
                            },
                            "links":{
                               "type":"object",
                               "properties":{
                                  "data_airing":{
                                     "type":"object",
                                     "description":"ID to use in a data_airing request to get information about the broadcast.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  },
                                  "data_airing_credits":{
                                     "type":"object",
                                     "description":"ID to use in a data_airing_credits request to get cast and crew credits for the broadcast.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  },
                                  "data_airing_synopses":{
                                     "type":"object",
                                     "description":"ID to use in a data_airing_synopsis request to get a synopsis of the program.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  }
                               },
                               "required":[
                                  "data_airing",
                                  "data_airing_credits",
                                  "data_airing_synopses"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "in",
                            "type",
                            "title",
                            "content",
                            "source",
                            "start",
                            "end",
                            "duration",
                            "subtitle",
                            "links"
                         ]
                      }
                   },
                   "required":[
                      "channels",
                      "airing"
                   ]
                }
             ]
          }
       },
       "required":[
          "id",
          "links",
          "appearances"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_airing [/data_airing?id={id}] 
Returns information about a program in a current broadcast schedule. Language of titles is determined by the broadcast source.

## GET 
This request requires the `data_airing` ID for a program in a current broadcast schedule, which is returned in responses to the following requests. (Note: A `data_airing` ID expires when the program disappears from the current broadcast schedule.)
+ [data_service_schedules/bulk](/#reference/tv-schedule/dataserviceschedulesbulk)
+ [data_service_schedules/screen](/#reference/tv-schedule/dataserviceschedulesscreen)
+ [data_service_schedules/single](/#reference/tv-schedule/dataserviceschedulessingle)
+ [data_movie_appearances](/#reference/tv-schedule/datamovieappearances)
+ [data_series_appearances](/#reference/tv-schedule/dataseriesappearances)
+ [data_episode_appearances](/#reference/tv-schedule/dataepisodeappearances)
+ [data_other_appearances](/#reference/tv-schedule/dataotherappearances)

+ Parameters
  + id (required, integer)
    The `data_airing` ID for a television program in a current broadcast schedule, returned in responses to the following requests. (Note: A `data_airing` ID expires when the program disappears from the current broadcast schedule.)
        + [data_service_schedules/bulk](/#reference/tv-schedule/dataserviceschedulesbulk)
        + [data_service_schedules/screen](/#reference/tv-schedule/dataserviceschedulesscreen)
        + [data_service_schedules/single](/#reference/tv-schedule/dataserviceschedulessingle)
        + [data_movie_appearances](/#reference/tv-schedule/datamovieappearances)
        + [data_series_appearances](/#reference/tv-schedule/dataseriesappearances)
        + [data_episode_appearances](/#reference/tv-schedule/dataepisodeappearances)
        + [data_other_appearances](/#reference/tv-schedule/dataotherappearances)

+ Response 200 (application/json)
```
    {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "title": "airing",
        "description": "Information about a program in a television broadcast schedule.",
        "properties": {
            "id": {
                "type": "integer",
                "description": "Rovi ID for the airing."
            },
            "in": {
                "type": "string",
                "description": "Language of the airing, stated as a two-character ISO 639 language code."
            },
            "type": {
                "type": "string",
                "description": "Type of program.",
                "oneOf": [
                    {
                        "enum": [
                            "movie"
                        ],
                        "description": "Movie."
                    },
                    {
                        "enum": [
                            "episode"
                        ],
                        "description": "Episode in a TV series."
                    },
                    {
                        "enum": [
                            "series"
                        ],
                        "description": "TV series."
                    },
                    {
                        "enum": [
                            "other"
                        ],
                        "description": "A program other than a movie or TV series."
                    }
                ]
            },
            "title": {
                "type": "string",
                "description": "Title of the program."
            },
            "alts": {
                "type": "object",
                "description": "Subtitle and other titles you can use for the program in lengths that are limited to 8, 15, 30, and 50 characters.",
                "properties": {
                    "short15": {
                        "type": "string",
                        "description": "Title with up to 15 characters for a grid cell. Creative abbreviations used as needed."
                    },
                    "short30": {
                        "type": "string",
                        "description": "Title with up to 30 characters. Creative abbreviations used as needed."
                    },
                    "short8": {
                        "type": "string",
                        "description": "Title with up to 8 characters for a grid cell. Creative abbreviations used as needed."
                    },
                    "short50": {
                        "type": "string",
                        "description": "Title with up to 50 characters. Creative abbreviations used as needed."
                    },
                    "alias": {
                        "type": "string",
                        "description": "Alternate title by which a show has been distributed."
                    },
                    "alias2": {
                        "type": "string",
                        "description": "Another alternate title by which a show has been distributed."
                    },
                    "alias3": {
                        "type": "string",
                        "description": "Another alternate title by which a show has been distributed."
                    },
                    "alias4": {
                        "type": "string",
                        "description": "Another alternate title by which a show has been distributed."
                    },
                    "subtitle": {
                        "type": "string",
                        "description": "Language of program subtitles, stated as the two-character ISO 639 language code."
                    }
                }
            },
            "image": {
                "type": "object",
                "description": "Information about the primary image associated with the movie or program.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Rovi ID for the image."
                    },
                    "zoom": {
                        "type": "string",
                        "description": "How much of the subject appears in the picture. A value here indicates a closer zoom level may be available from the media_image request. A missing value indicates a std zoom.",
                        "oneOf": [
                            {
                                "enum": [
                                    "head"
                                ],
                                "description": "Head or shoulders to top of head."
                            },
                            {
                                "enum": [
                                    "torso"
                                ],
                                "description": "Chest or thigh to top of head."
                            },
                            {
                                "enum": [
                                    "body"
                                ],
                                "description": "Body fills at least 80% of frame."
                            },
                            {
                                "enum": [
                                    "framed"
                                ],
                                "description": "Full body fills 50% to 80% of frame."
                            },
                            {
                                "enum": [
                                    "std"
                                ],
                                "description": "Full body fills 50% of frame or less."
                            }
                        ]
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "media_image": {
                                "type": "object",
                                "description": "ID to use in a media_image request to get the image.",
                                "properties": {
                                    "id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "id"
                                ]
                            }
                        },
                        "required": [
                            "media_image"
                        ]
                    }
                },
                "required": [
                    "id",
                    "zoom",
                    "links"
                ]
            },
            "content": {
                "type": "object"
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Rovi ID for the program."
                    },
                    "title": {
                        "type": "string",
                        "description": "Title of the program."
                    },
                    "series": {
                        "type": "object",
                        "description": "Series information for an episode in a TV series.",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "Rovi ID for the TV series."
                            },
                            "title": {
                                "type": "string",
                                "description": "Title of the TV series."
                            },
                            "links": {
                                "type": "object",
                                "properties": {
                                    "data_series": {
                                        "type": "object",
                                        "description": "ID to use in a data_series request to get information about the TV series.",
                                        "properties": {
                                            "id": {
                                                "type": "integer"
                                            }
                                        },
                                        "required": [
                                            "id"
                                        ]
                                    }
                                },
                                "required": [
                                    "data_series"
                                ]
                            }
                        },
                        "required": [
                            "id",
                            "links"
                        ]
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "data_episode": {
                                "type": "object",
                                "description": "ID to use in a data_episode request to get information about the episode.",
                                "properties": {
                                    "id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "id"
                                ]
                            },
                            "data_movie": {
                                "type": "object",
                                "description": "ID to use in a data_movie request to get information about the movie.",
                                "properties": {
                                    "id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "id"
                                ]
                            },
                            "data_series": {
                                "type": "object",
                                "description": "ID to use in a data_series request to get information about the TV series.",
                                "properties": {
                                    "id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "id"
                                ]
                            },
                            "data_other": {
                                "type": "object",
                                "description": "ID to use in a data_other request to get information about program.",
                                "properties": {
                                    "id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "id"
                                ]
                            },
                            "data_content_images": {
                                "type": "object",
                                "description": "ID to use in a data_content_images request to get information about images related to the program.",
                                "properties": {
                                    "id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "id"
                                ]
                            }
                        },
                        "required": [
                            "data_content_images"
                        ]
                    }
                },
                "required": [
                    "id",
                    "links"
                ]
            },
            "source": {
                "type": "object",
                "description": "Information about the source of the broadcast.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Rovi ID for the source of the broadcast."
                    },
                    "name": {
                        "type": "string",
                        "description": "A short name of the source of the broadcast."
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "data_source": {
                                "type": "object",
                                "description": "ID to use in a data_source request to get information about the source of the broadcast.",
                                "properties": {
                                    "id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "id"
                                ]
                            }
                        },
                        "required": [
                            "data_source"
                        ]
                    }
                },
                "required": [
                    "id",
                    "name",
                    "links"
                ]
            },
            "isApproximate": {
                "type": "boolean",
                "description": "True if the broadcast time is approximate. Element is omitted otherwise."
            },
            "start": {
                "type": "string",
                "description": "Date and time the broadcast starts, in UTC time. To calculate the local time, add the current UTC offset for the television service."
            },
            "end": {
                "type": "string",
                "description": "Date and time the broadcast ends, in UTC time."
            },
            "isBlackout": {
                "type": "boolean",
                "description": "True if the program is subject to blackout. Element is omitted otherwise."
            },
            "duration": {
                "type": "integer",
                "description": "Duration of the broadcast in seconds."
            },
            "exhibition": {
                "type": "string",
                "description": "Type of television broadcast.",
                "oneOf": [
                    {
                        "enum": [
                            "live"
                        ],
                        "description": "Live broadcast. Not prerecorded."
                    },
                    {
                        "enum": [
                            "new"
                        ],
                        "description": "New broadcast. Not broadcast before."
                    },
                    {
                        "enum": [
                            "none"
                        ],
                        "description": "Broadcast type unknown."
                    },
                    {
                        "enum": [
                            "repeat"
                        ],
                        "description": "Repeat broadcast."
                    },
                    {
                        "enum": [
                            "taped"
                        ],
                        "description": "Tape-delayed broadcast, such as for airing at the same time in all time zones."
                    }
                ]
            },
            "showing": {
                "type": "string",
                "description": "Type of television show: Finale, Paid For, Premiere, Season Finale, Season Premiere, Series Finale, Series Premiere, or Unknown."
            },
            "parts": {
                "type": "object",
                "description": "Sequence of the show in a multipart program.",
                "properties": {
                    "number": {
                        "type": "integer",
                        "description": "Part number of the show within a multipart program."
                    },
                    "total": {
                        "type": "integer",
                        "description": "Number of parts in a multipart program."
                    }
                },
                "required": [
                    "number",
                    "total"
                ]
            },
            "category": {
                "type": "string",
                "description": "Program category: News, Movie, Music, Sports, Lifestyle, Children's, or Other."
            },
            "ratings": {
                "type": "object",
                "description": "Parental ratings for the program.",
                "properties": {
                    "movie": {
                        "type": "array",
                        "items": [
                            {
                                "type": "object",
                                "description": "Theatrical film parental ratings.",
                                "properties": {
                                    "in": {
                                        "type": "string"
                                    },
                                    "type": {
                                        "type": "string",
                                        "description": "Source of the parental rating."
                                    },
                                    "rating": {
                                        "type": "string",
                                        "description": "The parental rating."
                                    },
                                    "medium": {
                                        "type": "string",
                                        "description": "Media that this rating applies to.",
                                        "oneOf": [
                                            {
                                                "enum": [
                                                    "movie"
                                                ],
                                                "description": "Theatrical film."
                                            },
                                            {
                                                "enum": [
                                                    "tv"
                                                ],
                                                "description": "Television."
                                            },
                                            {
                                                "enum": [
                                                    "stars"
                                                ],
                                                "description": "TV series, qualitative rating from 1 to 4 stars. Rated by Rovi."
                                            },
                                            {
                                                "enum": [
                                                    "age"
                                                ],
                                                "description": "TV series, youngest appropriate age rating. Rated by Rovi."
                                            },
                                            {
                                                "enum": [
                                                    "family"
                                                ],
                                                "description": "TV series, family friendly rating on a scale of 0 to 10."
                                            }
                                        ]
                                    },
                                    "countries": {
                                        "type": "array",
                                        "description": "Countries the parental rating applies to.",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "reasons": {
                                        "type": "array",
                                        "description": "Reasons for the rating.",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "subrating": {
                                        "type": "string",
                                        "description": "Content warning labels that apply to the program."
                                    }
                                },
                                "required": [
                                    "in",
                                    "type",
                                    "rating"
                                ]
                            }
                        ]
                    },
                    "tv": {
                        "type": "object",
                        "description": "Television parental ratings.",
                        "properties": {
                            "in": {
                                "type": "string"
                            },
                            "type": {
                                "type": "string",
                                "description": "Source of the parental rating."
                            },
                            "rating": {
                                "type": "string",
                                "description": "The parental rating."
                            },
                            "medium": {
                                "type": "string",
                                "description": "Media that this rating applies to.",
                                "oneOf": [
                                    {
                                        "enum": [
                                            "movie"
                                        ],
                                        "description": "Theatrical film."
                                    },
                                    {
                                        "enum": [
                                            "tv"
                                        ],
                                        "description": "Television."
                                    },
                                    {
                                        "enum": [
                                            "stars"
                                        ],
                                        "description": "TV series, qualitative rating from 1 to 4 stars. Rated by Rovi."
                                    },
                                    {
                                        "enum": [
                                            "age"
                                        ],
                                        "description": "TV series, youngest appropriate age rating. Rated by Rovi."
                                    },
                                    {
                                        "enum": [
                                            "family"
                                        ],
                                        "description": "TV series, family friendly rating on a scale of 0 to 10."
                                    }
                                ]
                            },
                            "countries": {
                                "type": "array",
                                "description": "Countries the parental rating applies to.",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "reasons": {
                                "type": "array",
                                "description": "Reasons for the rating.",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "subrating": {
                                "type": "string",
                                "description": "Content warning labels that apply to the program."
                            }
                        },
                        "required": [
                            "in",
                            "type",
                            "rating"
                        ]
                    }
                }
            },
            "tvAdvisory": {
                "type": "string",
                "description": "Content descriptors that apply to a parental guidance rating for the program: V (violence), S (sexual content), L (coarse language), D (suggestive dialogue), FV (fantasy violence)."
            },
            "isCC": {
                "type": "boolean",
                "description": "True if closed captions are available for the program. Element is omitted otherwise."
            },
            "caption": {
                "type": "string",
                "description": "Type of captions provided by the program: OC (open captions), CC (closed captions), SL (sign language), OC/SL (open captions or sign language), CC/SL (closed captions or sign language), or None (no captions)."
            },
            "audio": {
                "type": "string",
                "description": "Audio standard used by the program: Stereo, Dolby 5.1, DSS Surround Sound, None (mono or unknown)."
            },
            "aspect": {
                "type": "string",
                "description": "Screen format of the program: Letterbox, Unknown, 16:9 Letterbox, 16:9 Fullscreen, 16:9 Unknown, 4:3 Letterbox, 4:3 Fullscreen, 4:3 Unknown. "
            },
            "color": {
                "type": "string",
                "description": "Color category for the program: Color, Colorized, Black and White, May be colorized, Color and B&W Episodes, Unknown. "
            },
            "letterbox": {
                "type": "boolean",
                "description": "True if the program is broadcast in letterbox format. Element is omitted otherwise."
            },
            "subtitle": {
                "type": "string",
                "description": "Language of program subtitles, stated as the two-character ISO 639 language code."
            },
            "isHd": {
                "type": "boolean",
                "description": "True if the program is broadcast in high definition (HDTV). Element is omitted otherwise."
            },
            "hd": {
                "type": "string",
                "description": "HD resolution of the program: 480p, 720p, 1080i, 1080p, HD Level Unknown."
            },
            "threeD": {
                "type": "string",
                "description": "The 3D level of the program: None, Sequential, 3D Level Unknown, Side-by-side."
            },
            "isDvs": {
                "type": "boolean",
                "description": "True if the program is broadcast with a video description for the visually impaired (Descriptive Video Service). Element is omitted otherwise."
            },
            "isSap": {
                "type": "boolean",
                "description": "True if the program offers secondary audio programming (SAP), providing an audio track in another language. Element is omitted otherwise."
            },
            "isSports": {
                "type": "boolean",
                "description": "True if the program is a sporting event. Element is omitted otherwise."
            },
            "isSyndicated": {
                "type": "boolean",
                "description": "True if the program is syndicated. Element is omitted otherwise."
            },
            "links": {
                "type": "object",
                "properties": {
                    "data_airing": {
                        "type": "object",
                        "description": "ID to use in a data_airing request to get information about the broadcast.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "data_airing_credits": {
                        "type": "object",
                        "description": "ID to use in a data_airing_credits request to get cast and crew credits for the broadcast.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "data_airing_synopses": {
                        "type": "object",
                        "description": "ID to use in a data_airing_synopsis request to get a synopsis of the program.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                },
                "required": [
                    "data_airing",
                    "data_airing_credits",
                    "data_airing_synopses"
                ]
            }
        },
        "required": [
            "id",
            "in",
            "type",
            "title",
            "content",
            "source",
            "start",
            "end",
            "duration",
            "subtitle",
            "links"
        ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_airing_credits/cast [/data_airing_credits/cast?id={id}&page={page}&by={by}] 
Returns cast credits for a program in a current broadcast schedule.

## GET
This request requires the `data_airing_credits` ID for a program in a current broadcast schedule, which is returned in response to a [data_airing](/#reference/tv-schedule/dataairing) request. A `data_airing_credits` ID is the same as the `data_airing` ID for the program and expires when the program disappears from the current broadcast schedule.

+ Parameters
  + id (required, integer)
    The `data_airing_credits` ID for a program in a current broadcast schedule, which is returned in response to a [data_airing](/#reference/tv-schedule/dataairing) request. A `data_airing_credits` ID is the same as the `data_airing` ID for the program and expires when the program disappears from the current broadcast schedule.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
  + by (optional, string, `role`)
    Response field or object.field to sort by. Child fields must be single-valued, that is, not within an array.
      +  For an ascending sort, replace {by} with the field name like this: __role__ or __person.alts.last__. For a descending sort, precede the field name with a minus (-) sign like this: __-role__.
      +  To start with items that contain a particular field, replace {by} with a field-equals-not-null, like this: __person.image=!null__. To start with items that are missing a particular field, specify a field-equals-null, like this: __person.image=null__. 
      +  To start with items that contain a particular value in a top-level field, replace {by} with field-equals-value, like this: __role=Tony Stark__. To end with items that contain a particular value, precede the value with an exclamation like this: __role=!Tony Stark__.
      +  Combine alpha and numeric sorts in a comma-separated list in left-to-right priority.
      
+ Response 200 (application/json)
```
    {
        "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
        "type":"object",
        "title":"airing_credits",
        "description":"Program credits.",
        "properties":{
            "id":{
                "type":"integer",
                "description":"Rovi ID for the broadcast."
            },
            "in":{
                "type":"string"
            },
            "credits":{
                "type":"array",
                "items":[
                    {
                    "type":"object",
                    "description":"Program credit.",
                    "properties":{
                        "credit":{
                            "type":"string",
                            "description":"The credit."
                        },
                        "type":{
                            "type":"string",
                            "description":"Type of credit.",
                            "oneOf":[
                                {
                                "enum":[
                                    "actor"
                                ],
                                "description":"Actor."
                                },
                                {
                                "enum":[
                                    "company"
                                ],
                                "description":"Production company."
                                },
                                {
                                "enum":[
                                    "creator"
                                ],
                                "description":"Creator."
                                },
                                {
                                "enum":[
                                    "director"
                                ],
                                "description":"Director."
                                },
                                {
                                "enum":[
                                    "producer"
                                ],
                                "description":"Producer."
                                },
                                {
                                "enum":[
                                    "studio"
                                ],
                                "description":"Studio."
                                },
                                {
                                "enum":[
                                    "subject"
                                ],
                                "description":"Person who is the subject of the movie or program."
                                },
                                {
                                "enum":[
                                    "writer"
                                ],
                                "description":"Writer."
                                }
                            ]
                        },
                        "isCast":{
                            "type":"boolean",
                            "description":"Whether the credit is a cast credit: true or false."
                        },
                        "role":{
                            "type":"string",
                            "description":"Character portrayed."
                        },
                        "person":{
                            "type":"object",
                            "properties":{
                                "id":{
                                "type":"integer",
                                "description":"Rovi ID for the person."
                                },
                                "name":{
                                "type":"string",
                                "description":"Name of the person."
                                },
                                "alts":{
                                "type":"object",
                                "properties":{
                                    "first":{
                                        "type":"string",
                                        "description":"First name of the person."
                                    },
                                    "last":{
                                        "type":"string",
                                        "description":"Last name of the person."
                                    }
                                }
                                },
                                "links":{
                                "type":"object",
                                "properties":{
                                    "data_person":{
                                        "type":"object",
                                        "description":"ID to use in a data_person request to get details about the person.",
                                        "properties":{
                                            "id":{
                                            "type":"integer"
                                            }
                                        },
                                        "required":[
                                            "id"
                                        ]
                                    }
                                },
                                "required":[
                                    "data_person"
                                ]
                                }
                            },
                            "required":[
                                "id",
                                "name",
                                "links"
                            ]
                        },
                        "organization":{
                            "type":"object",
                            "properties":{
                                "id":{
                                "type":"integer",
                                "description":"Rovi ID for the company that earned the credit."
                                },
                                "name":{
                                "type":"string",
                                "description":"Name of the company."
                                },
                                "links":{
                                "type":"object",
                                "properties":{
                                    "data_organization":{
                                        "type":"object",
                                        "description":"ID to use in a data_organization request to get details about the company.",
                                        "properties":{
                                            "id":{
                                            "type":"integer"
                                            }
                                        },
                                        "required":[
                                            "id"
                                        ]
                                    }
                                },
                                "required":[
                                    "data_organization"
                                ]
                                }
                            },
                            "required":[
                                "id",
                                "links"
                            ]
                        }
                    },
                    "required":[
                        "credit"
                    ]
                    }
                ]
            },
            "links":{
                "type":"object",
                "properties":{
                    "data_airing_credits":{
                    "type":"object",
                    "description":"ID to use in a data_airing_credits request to get the credits for a program.",
                    "properties":{
                        "id":{
                            "type":"integer"
                        }
                    },
                    "required":[
                        "id"
                    ]
                    },
                    "data_airing":{
                    "type":"object",
                    "description":"ID to use in an data_airing request to get information about the broadcast.",
                    "properties":{
                        "id":{
                            "type":"integer"
                        }
                    },
                    "required":[
                        "id"
                    ]
                    }
                },
                "required":[
                    "data_airing_credits",
                    "data_airing"
                ]
            },
            "page":{
                "type":"integer",
                "description":"Page number of the response."
            },
            "size":{
                "type":"integer",
                "description":"Number of elements in this page."
            },
            "total":{
                "type":"integer",
                "description":"Total number of elements available."
            }
        },
        "required":[
            "id",
            "in",
            "links"
        ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_airing_credits/crew [/data_airing_credits/crew?id={id}&page={page}&by={by}] 
Returns crew credits for a program in a current broadcast schedule.

## GET
This request requires the `data_airing_credits` ID for a program in a current broadcast schedule, which is returned in response to a [data_airing](/#reference/tv-schedule/dataairing) request. A `data_airing_credits` ID is the same as the `data_airing` ID for the program and expires when the program disappears from the current broadcast schedule.

+ Parameters
  + id (required, integer)
    The `data_airing_credits` ID for a program in a current broadcast schedule, which is returned in response to a [data_airing](/#reference/tv-schedule/dataairing) request. A `data_airing_credits` ID is the same as the `data_airing` ID for the program and expires when the program disappears from the current broadcast schedule.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
  + by (optional, string, `type`)
    Response field or object.field to sort by. Child fields must be single-valued, that is, not within an array.
      +  For an ascending sort, replace {by} with the field name like this: __credit__ or __person.alts.last__. For a descending sort, precede the field name with a minus (-) sign like this: __-credit__.
      +  To start with items that contain a particular field, replace {by} with a field-equals-not-null, like this: __person.image=!null__. To start with items that are missing a particular field, specify a field-equals-null, like this: __type=null__. 
      +  To start with items that contain a particular value in a top-level field, replace {by} with field-equals-value, like this: __type=director__. To end with items that contain a particular value, precede the value with an exclamation like this: __type=!company__.
      +  Combine alpha and numeric sorts in a comma-separated list in left-to-right priority.
    
+ Response 200 (application/json)
```
    {
        "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
        "type":"object",
        "title":"airing_credits",
        "description":"Program credits.",
        "properties":{
            "id":{
                "type":"integer",
                "description":"Rovi ID for the broadcast."
            },
            "in":{
                "type":"string"
            },
            "credits":{
                "type":"array",
                "items":[
                    {
                    "type":"object",
                    "description":"Program credit.",
                    "properties":{
                        "credit":{
                            "type":"string",
                            "description":"The credit."
                        },
                        "type":{
                            "type":"string",
                            "description":"Type of credit.",
                            "oneOf":[
                                {
                                "enum":[
                                    "actor"
                                ],
                                "description":"Actor."
                                },
                                {
                                "enum":[
                                    "company"
                                ],
                                "description":"Production company."
                                },
                                {
                                "enum":[
                                    "creator"
                                ],
                                "description":"Creator."
                                },
                                {
                                "enum":[
                                    "director"
                                ],
                                "description":"Director."
                                },
                                {
                                "enum":[
                                    "producer"
                                ],
                                "description":"Producer."
                                },
                                {
                                "enum":[
                                    "studio"
                                ],
                                "description":"Studio."
                                },
                                {
                                "enum":[
                                    "subject"
                                ],
                                "description":"Person who is the subject of the movie or program."
                                },
                                {
                                "enum":[
                                    "writer"
                                ],
                                "description":"Writer."
                                }
                            ]
                        },
                        "isCast":{
                            "type":"boolean",
                            "description":"Whether the credit is a cast credit: true or false."
                        },
                        "role":{
                            "type":"string",
                            "description":"Character portrayed."
                        },
                        "person":{
                            "type":"object",
                            "properties":{
                                "id":{
                                "type":"integer",
                                "description":"Rovi ID for the person."
                                },
                                "name":{
                                "type":"string",
                                "description":"Name of the person."
                                },
                                "alts":{
                                "type":"object",
                                "properties":{
                                    "first":{
                                        "type":"string",
                                        "description":"First name of the person."
                                    },
                                    "last":{
                                        "type":"string",
                                        "description":"Last name of the person."
                                    }
                                }
                                },
                                "links":{
                                "type":"object",
                                "properties":{
                                    "data_person":{
                                        "type":"object",
                                        "description":"ID to use in a data_person request to get details about the person.",
                                        "properties":{
                                            "id":{
                                            "type":"integer"
                                            }
                                        },
                                        "required":[
                                            "id"
                                        ]
                                    }
                                },
                                "required":[
                                    "data_person"
                                ]
                                }
                            },
                            "required":[
                                "id",
                                "name",
                                "links"
                            ]
                        },
                        "organization":{
                            "type":"object",
                            "properties":{
                                "id":{
                                "type":"integer",
                                "description":"Rovi ID for the company that earned the credit."
                                },
                                "name":{
                                "type":"string",
                                "description":"Name of the company."
                                },
                                "links":{
                                "type":"object",
                                "properties":{
                                    "data_organization":{
                                        "type":"object",
                                        "description":"ID to use in a data_organization request to get details about the company.",
                                        "properties":{
                                            "id":{
                                            "type":"integer"
                                            }
                                        },
                                        "required":[
                                            "id"
                                        ]
                                    }
                                },
                                "required":[
                                    "data_organization"
                                ]
                                }
                            },
                            "required":[
                                "id",
                                "links"
                            ]
                        }
                    },
                    "required":[
                        "credit"
                    ]
                    }
                ]
            },
            "links":{
                "type":"object",
                "properties":{
                    "data_airing_credits":{
                    "type":"object",
                    "description":"ID to use in a data_airing_credits request to get the credits for a program.",
                    "properties":{
                        "id":{
                            "type":"integer"
                        }
                    },
                    "required":[
                        "id"
                    ]
                    },
                    "data_airing":{
                    "type":"object",
                    "description":"ID to use in an data_airing request to get information about the broadcast.",
                    "properties":{
                        "id":{
                            "type":"integer"
                        }
                    },
                    "required":[
                        "id"
                    ]
                    }
                },
                "required":[
                    "data_airing_credits",
                    "data_airing"
                ]
            },
            "page":{
                "type":"integer",
                "description":"Page number of the response."
            },
            "size":{
                "type":"integer",
                "description":"Number of elements in this page."
            },
            "total":{
                "type":"integer",
                "description":"Total number of elements available."
            }
        },
        "required":[
            "id",
            "in",
            "links"
        ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_airing_credits/credits [/data_airing_credits/credits?id={id}&page={page}&by={by}] 
Returns both cast and crew credits for a program in a current broadcast schedule.

## GET
This request requires the `data_airing_credits` ID for a program in a current broadcast schedule, which is returned in response to a [data_airing](/#reference/tv-schedule/dataairing) request. A `data_airing_credits` ID is the same as the `data_airing` ID for the program and expires when the program disappears from the current broadcast schedule.

+ Parameters
  + id (required, integer)
    The `data_airing_credits` ID for a program in a current broadcast schedule, which is returned in response to a [data_airing](/#reference/tv-schedule/dataairing) request. A `data_airing_credits` ID is the same as the `data_airing` ID for the program and expires when the program disappears from the current broadcast schedule.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
  + by (optional, string, `credit`)
    Response field or object.field to sort by. Child fields must be single-valued, that is, not within an array.
      +  For an ascending sort, replace {by} with the field name like this: __credit__ or __person.alts.last__. For a descending sort, precede the field name with a minus (-) like this: __-credit__.
      +  To start with items that contain a particular field, replace {by} with field-equals-not-null, like this: __person.image=!null__. To start with items that are missing a particular field, specify field-equals-null, like this: __role=null__. 
      +  To start with items that contain a particular value in a top-level field, replace {by} with field-equals-value, like this: __type=director__. To end with items that contain a particular value, precede the value with an exclamation like this: __type=!company__.
      +  Combine alpha and numeric sorts in a comma-separated list in left-to-right priority.
    
+ Response 200 (application/json)
```
    {
        "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
        "type":"object",
        "title":"airing_credits",
        "description":"Program credits.",
        "properties":{
            "id":{
                "type":"integer",
                "description":"Rovi ID for the broadcast."
            },
            "in":{
                "type":"string"
            },
            "credits":{
                "type":"array",
                "items":[
                    {
                    "type":"object",
                    "description":"Program credit.",
                    "properties":{
                        "credit":{
                            "type":"string",
                            "description":"The credit."
                        },
                        "type":{
                            "type":"string",
                            "description":"Type of credit.",
                            "oneOf":[
                                {
                                "enum":[
                                    "actor"
                                ],
                                "description":"Actor."
                                },
                                {
                                "enum":[
                                    "company"
                                ],
                                "description":"Production company."
                                },
                                {
                                "enum":[
                                    "creator"
                                ],
                                "description":"Creator."
                                },
                                {
                                "enum":[
                                    "director"
                                ],
                                "description":"Director."
                                },
                                {
                                "enum":[
                                    "producer"
                                ],
                                "description":"Producer."
                                },
                                {
                                "enum":[
                                    "studio"
                                ],
                                "description":"Studio."
                                },
                                {
                                "enum":[
                                    "subject"
                                ],
                                "description":"Person who is the subject of the movie or program."
                                },
                                {
                                "enum":[
                                    "writer"
                                ],
                                "description":"Writer."
                                }
                            ]
                        },
                        "isCast":{
                            "type":"boolean",
                            "description":"Whether the credit is a cast credit: true or false."
                        },
                        "role":{
                            "type":"string",
                            "description":"Character portrayed."
                        },
                        "person":{
                            "type":"object",
                            "properties":{
                                "id":{
                                "type":"integer",
                                "description":"Rovi ID for the person."
                                },
                                "name":{
                                "type":"string",
                                "description":"Name of the person."
                                },
                                "alts":{
                                "type":"object",
                                "properties":{
                                    "first":{
                                        "type":"string",
                                        "description":"First name of the person."
                                    },
                                    "last":{
                                        "type":"string",
                                        "description":"Last name of the person."
                                    }
                                }
                                },
                                "links":{
                                "type":"object",
                                "properties":{
                                    "data_person":{
                                        "type":"object",
                                        "description":"ID to use in a data_person request to get details about the person.",
                                        "properties":{
                                            "id":{
                                            "type":"integer"
                                            }
                                        },
                                        "required":[
                                            "id"
                                        ]
                                    }
                                },
                                "required":[
                                    "data_person"
                                ]
                                }
                            },
                            "required":[
                                "id",
                                "name",
                                "links"
                            ]
                        },
                        "organization":{
                            "type":"object",
                            "properties":{
                                "id":{
                                "type":"integer",
                                "description":"Rovi ID for the company that earned the credit."
                                },
                                "name":{
                                "type":"string",
                                "description":"Name of the company."
                                },
                                "links":{
                                "type":"object",
                                "properties":{
                                    "data_organization":{
                                        "type":"object",
                                        "description":"ID to use in a data_organization request to get details about the company.",
                                        "properties":{
                                            "id":{
                                            "type":"integer"
                                            }
                                        },
                                        "required":[
                                            "id"
                                        ]
                                    }
                                },
                                "required":[
                                    "data_organization"
                                ]
                                }
                            },
                            "required":[
                                "id",
                                "links"
                            ]
                        }
                    },
                    "required":[
                        "credit"
                    ]
                    }
                ]
            },
            "links":{
                "type":"object",
                "properties":{
                    "data_airing_credits":{
                    "type":"object",
                    "description":"ID to use in a data_airing_credits request to get the credits for a program.",
                    "properties":{
                        "id":{
                            "type":"integer"
                        }
                    },
                    "required":[
                        "id"
                    ]
                    },
                    "data_airing":{
                    "type":"object",
                    "description":"ID to use in an data_airing request to get information about the broadcast.",
                    "properties":{
                        "id":{
                            "type":"integer"
                        }
                    },
                    "required":[
                        "id"
                    ]
                    }
                },
                "required":[
                    "data_airing_credits",
                    "data_airing"
                ]
            },
            "page":{
                "type":"integer",
                "description":"Page number of the response."
            },
            "size":{
                "type":"integer",
                "description":"Number of elements in this page."
            },
            "total":{
                "type":"integer",
                "description":"Total number of elements available."
            }
        },
        "required":[
            "id",
            "in",
            "links"
        ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_airing_synopses/collection [/data_airing_synopses/collection?id={id}&in={in}&in2={in2}&in3={in3}]
Returns a range of synopses for a program in a current broadcast schedule.

## GET
This request requires the `data_airing_synopses` ID for a program in a current broadcast schedule, returned in responses to the following requests. (Note:  A `data_airing_synopses` ID is the same as the `data_airing` ID for a program and expires when the program disappears from the broadcast schedule.)
+  [data_airing](/#reference/tv-schedule/dataairing)
+  [data_movie_appearances](/#reference/tv-schedule/datamovieappearances)
+  [data_series_appearances](/#reference/tv-schedule/dataseriesappearances)
+  [data_episode_appearances](/#reference/tv-schedule/dataepisodeappearances)
+  [data_other_appearances](/#reference/tv-schedule/dataotherappearances)
+  [data_service_schedules/bulk](/#reference/tv-schedule/dataserviceschedulesbulk)
+  [data_service_schedules/single](/#reference/tv-schedule/dataserviceschedulessingle)
+  [data_service_schedules/screen](/#reference/tv-schedule/dataserviceschedulesscreen)

+ Parameters
  + id (required, integer)
    The `data_airing_synopses` ID for a program in a current broadcast schedule, returned in responses to the following requests. Note:  A `data_airing_synopses` ID is the same as the `data_airing` ID for a program and expires when the program disappears from the broadcast schedule.
      +  [data_airing](/#reference/tv-schedule/dataairing)
      +  [data_movie_appearances](/#reference/tv-schedule/datamovieappearances)
      +  [data_series_appearances](/#reference/tv-schedule/dataseriesappearances)
      +  [data_episode_appearances](/#reference/tv-schedule/dataepisodeappearances)
      +  [data_other_appearances](/#reference/tv-schedule/dataotherappearances)
      +  [data_service_schedules/bulk](/#reference/tv-schedule/dataserviceschedulesbulk)
      +  [data_service_schedules/single](/#reference/tv-schedule/dataserviceschedulessingle)
      +  [data_service_schedules/screen](/#reference/tv-schedule/dataserviceschedulesscreen)
    
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_airing_synopses/best [/data_airing_synopses/best?id={id}&length={length}&length2={length2}&length3={length3}&length4={length4}&in={in}&in2={in2}&in3={in3}]
Returns the best available synopsis of a program in a current broadcast schedule, based on type:
+  `long` &mdash; Straightforward, objective description of the program in up to 420 characters.
+  `short` &mdash; A shorter version of the "long" description.
+  `plain` &mdash; A straightforward description without credits that is never critical.
+  `extended` &mdash; A more detailed description than the "long" description, up to 2000 characters.

## GET
This request requires the `data_airing_synopses` ID for a program in a current broadcast schedule, returned in responses to the following requests. (Note:  A `data_airing_synopses` ID is the same as the `data_airing` ID for a program and expires when the program disappears from the broadcast schedule.)
+  [data_airing](/#reference/tv-schedule/dataairing)
+  [data_movie_appearances](/#reference/tv-schedule/datamovieappearances)
+  [data_series_appearances](/#reference/tv-schedule/dataseriesappearances)
+  [data_episode_appearances](/#reference/tv-schedule/dataepisodeappearances)
+  [data_other_appearances](/#reference/tv-schedule/dataotherappearances)
+  [data_service_schedules/bulk](/#reference/tv-schedule/dataserviceschedulesbulk)
+  [data_service_schedules/single](/#reference/tv-schedule/dataserviceschedulessingle)
+  [data_service_schedules/screen](/#reference/tv-schedule/dataserviceschedulesscreen)

+ Parameters
  + id (required, integer)
    The `data_airing_synopses` ID for a program in a current broadcast schedule, returned in responses to the following requests. Note:  A `data_airing_synopses` ID is the same as the `data_airing` ID for a program and expires when the program disappears from the broadcast schedule.
      +  [data_airing](/#reference/tv-schedule/dataairing)
      +  [data_movie_appearances](/#reference/tv-schedule/datamovieappearances)
      +  [data_series_appearances](/#reference/tv-schedule/dataseriesappearances)
      +  [data_episode_appearances](/#reference/tv-schedule/dataepisodeappearances)
      +  [data_other_appearances](/#reference/tv-schedule/dataotherappearances)
      +  [data_service_schedules/bulk](/#reference/tv-schedule/dataserviceschedulesbulk)
      +  [data_service_schedules/single](/#reference/tv-schedule/dataserviceschedulessingle)
      +  [data_service_schedules/screen](/#reference/tv-schedule/dataserviceschedulesscreen)
      
  + length (required, string enum, `short`)
    First choice for type of description:
    <table>
    <tr><th>Value</th><th>Description</th>
    </tr><tr>
    <td>long</td><td><p>Straightforward, objective description of the program in up to 420 characters.</p></td>
    </tr><tr>
    <td>short</td><td><p>A shorter version of the "long" description.</p></td>
    </tr><tr>
    <td>plain</td><td><p>A straightforward description without credits that is never critical.</p></td>
    </tr><tr>
    <td>extended</td><td><p>A more detailed description than the "long" description, up to 2000 characters.</p></td>
    </tr>
    </table>
  + length2 (optional, string enum, `long`)
    Second choice for type of description.
  + length3 (optional, string enum, `plain`)
    Third choice for type of description.
  + length4 (optional, string enum, `extended`)
    Fourth choice for type of description.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_airing_synopsis [/data_airing_synopsis?id={id}&length={length}&length2={length2}&length3={length3}&length4={length4}]
Returns the best available synopsis of a program in a current broadcast schedule, based on type:
+  `long` &mdash; Straightforward, objective description of the program in up to 420 characters.
+  `short` &mdash; A shorter version of the "long" description.
+  `plain` &mdash; A straightforward description without credits that is never critical.
+  `extended` &mdash; A more detailed description than the "long" description, up to 2000 characters.

## GET
__NOTE: This request is now deprecated.__ Use one of the `data_airing_synopses` requests instead:
+  [data_airing_synopses/best](/#reference/tv-schedule/dataairingsynopsesbest)
+  [data_airing_synopses/collection](/#reference/tv-schedule/dataairingsynopsescollection)

+ Parameters
  + id (required, integer)
    The `data_airing_synopses` ID for a program in a current broadcast schedule, returned in responses to the following requests. Note:  A `data_airing_synopses` ID is the same as the `data_airing` ID for a program and expires when the program disappears from the broadcast schedule.
      +  [data_airing](/#reference/tv-schedule/dataairing)
      +  [data_movie_appearances](/#reference/tv-schedule/datamovieappearances)
      +  [data_series_appearances](/#reference/tv-schedule/dataseriesappearances)
      +  [data_episode_appearances](/#reference/tv-schedule/dataepisodeappearances)
      +  [data_other_appearances](/#reference/tv-schedule/dataotherappearances)
      +  [data_service_schedules/bulk](/#reference/tv-schedule/dataserviceschedulesbulk)
      +  [data_service_schedules/single](/#reference/tv-schedule/dataserviceschedulessingle)
      +  [data_service_schedules/screen](/#reference/tv-schedule/dataserviceschedulesscreen)
      
  + length (required, string enum, `short`)
    First choice for type of description:
    <table>
    <tr><th>Value</th><th>Description</th>
    </tr><tr>
    <td>long</td><td><p>Straightforward, objective description of the program in up to 420 characters.</p></td>
    </tr><tr>
    <td>short</td><td><p>A shorter version of the "long" description.</p></td>
    </tr><tr>
    <td>plain</td><td><p>A straightforward description without credits that is never critical.</p></td>
    </tr><tr>
    <td>extended</td><td><p>A more detailed description than the "long" description, up to 2000 characters.</p></td>
    </tr>
    </table>
  + length2 (optional, string enum, `long`)
    Second choice for type of description.
  + length3 (optional, string enum, `plain`)
    Third choice for type of description.
  + length4 (optional, string enum, `plain`)
    Fourth choice for type of description.
     
+ Response 200 (application/json)
```
    {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "title": "airing_synopses",
        "description": "Synopses of the program.",
        "properties": {
            "id": {
                "type": "integer",
                "description": "Rovi ID for the broadcast."
            },
            "synopses": {
                "type": "object",
                "description": "Synopses of the program.",
                "properties": {
                    "in": {
                        "type": "string"
                    },
                    "length": {
                        "type": "string",
                        "description": "Type of synopsis.",
                        "oneOf": [
                            {
                                "enum": [
                                    "long"
                                ],
                                "description": "Straightforward, objective plot synopsis with up to 420 characters."
                            },
                            {
                                "enum": [
                                    "short"
                                ],
                                "description": "Straightforward, objective plot synopsis with up to 150 characters."
                            },
                            {
                                "enum": [
                                    "plain"
                                ],
                                "description": "Straightforward description, without credits, that is never critical."
                            },
                            {
                                "enum": [
                                    "extended"
                                ],
                                "description": "Straightforward, objective plot synopsis with up to 2000 characters."
                            },
                            {
                                "enum": [
                                    "source"
                                ],
                                "description": "Synopsis supplied by the channel on which the show is broadcast."
                            },
                            {
                                "enum": [
                                    "review"
                                ],
                                "description": "Movie review."
                            }
                        ]
                    },
                    "synopsis": {
                        "type": "string",
                        "description": "Synopsis of the program."
                    },
                    "cuts": {
                        "type": "array",
                        "description": "Character positions at which you can end the synopsis to conserve space. A cut number is the number of the last character to include, not the first character to cut. Add a period after that point if there is no ending punctuation (a period or a period followed by a single of double quotation mark).",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "in",
                    "length",
                    "synopsis"
                ]
            },
            "links": {
                "type": "object",
                "properties": {
                    "data_airing_synopses": {
                        "type": "object",
                        "description": "ID to use in a data_airing_synopses request to get synopses for the program.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "data_airing": {
                        "type": "object",
                        "description": "ID to use in an data_airing request to get information about the broadcast.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                },
                "required": [
                    "data_airing_synopses",
                    "data_airing"
                ]
            },
            "page": {
                "type": "integer",
                "description": "Pagination index of the request."
            },
            "size": {
                "type": "integer",
                "description": "Number of elements returned."
            },
            "total": {
                "type": "integer",
                "description": "Total number of elements."
            }
        },
        "required": [
            "id",
            "links"
        ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# Group Image
This section documents the calls that return images and image metadata for shows, releases, people, and channel logos.

To review, let's summarize the procedures for returning images as described in the section [About Our APIs](http://docs.rovicloudapi.apiary.io/#introduction/about-our-apis).

__To Get Channel Logos__

There are two paths to a channel logo.

If you want the standard logo for a channel as returned by a [data_service_channels](/#reference/tv-schedule/dataservicechannelsbulk) response, just grab the `media_logo` ID there and call [media_logo](/#reference/image/medialogo) to select the size and get the logo file.

If you want a different logo, follow these steps:
+ Grab the `data_source_logos` ID for the channel from the [data_service_channels](/#reference/tv-schedule/dataservicechannelsbulk) response.
+ Then EITHER call [data_source_logos/collection](/#reference/image/datasourcelogoscollection) to return a list of the logos available and select the `media_logo` ID of the logo you want.
+ OR call [data_source_logos/best](/#reference/image/datasourcelogosbest) to return the `media_logo` ID of the best logo as determined by five possible filters.
+ Finally, when you have the `media_logo` ID, call [media_logo](/#reference/image/medialogo) to select the size and get the logo file.

__To Get Images for a Movie, Series, Season, Episode, or Other Show__

There are two paths to an image for a movie, series, season, episode, or other show. 

If you want the image that a response recommends, just grab the `media_image` ID there in the response and either call [media_image/sized](/#reference/image/mediaimagesized) to select the size and get the image file or call [media_image/master](/#reference/image/mediaimagemaster) to get the original image file.

If you want another image, follow these steps:
+ Grab the `data_content_images` ID from the response.
+ Then EITHER call [data_content_images/collection](/#reference/image/datacontentimagescollection) to return a list of the available images and select the `media_image` ID of the image you want.
+ OR call [data_content_images/best](/#reference/image/datacontentimagesbest) to return the `media_image` ID of the best image as determined by five possible filters.
+ Finally, EITHER call [media_image/master](/#reference/image/mediaimagemaster) to return the original image file.
+ OR call [media_image/sized](/#reference/image/mediaimagesized) to return the image file in the size you want.

__To Get Images for a Release of a Movie, Episode, or Other Show__

There are two paths to an image for a release of a movie, episode, or other show. 

If you want the image that a response recommends, just grab the `media_image` ID there in the response and either call [media_image/sized](/#reference/image/mediaimagesized) to select the size and get the image file or call [media_image/master](/#reference/image/mediaimagemaster) to get the original image file.

If you want another image, follow these steps:
+ Grab the `data_release_images` ID from the response (that ID is the same as the `data_release` ID).
+ Then EITHER call [data_release_images/collection](/#reference/image/datareleaseimagescollection) to return a list of the available images and select the `media_image` ID of the image you want.
+ OR call [data_release_images/best](/#reference/image/datareleaseimagesbest) to return the `media_image` ID of the best image as determined by five possible filters.
+ Finally, EITHER call [media_image/master](/#reference/image/mediaimagemaster) to return the original image file.
+ OR call [media_image/sized](/#reference/image/mediaimagesized) to return the image file in the size you want.

__To Get Images of a Person__

There are two paths to an image of a person. Both paths include premium celebrity images if your subscription allows access to those images.

If you want the image that a response recommends, just grab the `media_image` ID there in the response and either call [media_image/sized](/#reference/image/mediaimagesized) to select the size and get the image file or call [media_image/master](/#reference/image/mediaimagemaster) to get the original image file.

If you want another image, follow these steps:
+ Grab the `data_name_images` ID from the response.
+ Then EITHER call [data_name_images/collection](/#reference/image/datanameimagescollection) to return a list of the available images and select the `media_image` ID of the image you want.
+ OR call [data_name_images/best](/#reference/image/datanameimagesbest) to return the `media_image` ID of the best image as determined by five possible filters.
+ Finally, EITHER call [media_image/master](/#reference/image/mediaimagemaster) to return the original image file.
+ OR call [media_image/sized](/#reference/image/mediaimagesized) to return the image file in the size you want.

# data_source_logos/collection [/data_source_logos/collection?id={id}&in={in}&in2={in2}&in3={in3}&page={page}] 
Returns metadata about the available logos for a TV channel.

To deliver a logo specified by the response to this request, grab the `media_logo ID` for that logo and then call [media_logo](/#reference/image/medialogo).

## GET
This request requires the `data_source_logos` ID for the source of programming on the channel, which is returned by the following requests. A `data_source_logos` ID for a source is the same as the `data_source` ID.
+ [data_source](/#reference/tv-schedule/datasource)
+ [data_service_channels/bulk](/#reference/tv-schedule/dataservicechannelsbulk)
+ [data_service_channels/single](/#reference/tv-schedule/dataservicechannelssingle)
+ [data_service_channels/screen](/#reference/tv-schedule/dataservicechannelsscreen)

+ Parameters
  + id (required, integer, `69047095`)
    The `data_source_logos` ID for the source of programming on the channel, which is returned by the following requests. A `data_source_logos` ID for a source is the same as the `data_source` ID.
      + [data_source](/#reference/tv-schedule/datasource)
      + [data_service_channels/bulk](/#reference/tv-schedule/dataservicechannelsbulk)
      + [data_service_channels/single](/#reference/tv-schedule/dataservicechannelssingle)
      + [data_service_channels/screen](/#reference/tv-schedule/dataservicechannelsscreen)

  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.

+ Response 200 (application/json)
```
    {
    
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "title": "source_logos",
        "description": "Information about logo files associated with a source of programming on a television channel.",
        "properties": {
            "id": {
                "type": "integer",
                "description": "Rovi ID for the source that the logos apply to."
            },
            "logos": {
                "type": "array",
                "items": [
                    {
                        "type": "object",
                        "description": "Logos associated with the source.",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "Rovi ID for the logo file."
                            },
                            "in": {
                                "type": "string",
                                "description": "Language of the logo, stated as a two-character, ISO 639 language code."
                            },
                            "type": {
                                "type": "string",
                                "description": "Type of logo.",
                                "oneOf": [
                                    {
                                        "enum": [
                                            "jersey"
                                        ],
                                        "description": "Sports jersey logo."
                                    },
                                    {
                                        "enum": [
                                            "league"
                                        ],
                                        "description": "Sports league logo."
                                    },
                                    {
                                        "enum": [
                                            "mso"
                                        ],
                                        "description": "MSO branding logo."
                                    },
                                    {
                                        "enum": [
                                            "provider"
                                        ],
                                        "description": "MSO logo."
                                    },
                                    {
                                        "enum": [
                                            "source"
                                        ],
                                        "description": "Logo for the source of programming on a television channel."
                                    },
                                    {
                                        "enum": [
                                            "team"
                                        ],
                                        "description": "Sports team logo."
                                    },
                                    {
                                        "enum": [
                                            "generic"
                                        ],
                                        "description": "Generic channel logo."
                                    }
                                ]
                            },
                            "caption": {
                                "type": "string",
                                "description": "Caption for the image file, commonly the dimensions in pixels and the color category."
                            },
                            "credit": {
                                "type": "string",
                                "description": "Person or company credited with creating the logo, in up to 255 characters."
                            },
                            "owner": {
                                "type": "string",
                                "description": "Legal owner of the image."
                            },
                            "links": {
                                "type": "object",
                                "properties": {
                                    "media_logo": {
                                        "type": "object",
                                        "description": "ID to use in a media_logo request to return the logo file.",
                                        "properties": {
                                            "id": {
                                                "type": "integer"
                                            }
                                        },
                                        "required": [
                                            "id"
                                        ]
                                    }
                                },
                                "required": [
                                    "media_logo"
                                ]
                            }
                        },
                        "required": [
                            "id",
                            "links"
                        ]
                    }
                ]
            },
            "links": {
                "type": "object",
                "properties": {
                    "data_source_logos": {
                        "type": "object",
                        "description": "ID to use in a data_source_logos request to return information about logos for the source.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "data_source": {
                        "type": "object",
                        "description": "ID to use in a data_source request to return information about the source.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                },
                "required": [
                    "data_source_logos",
                    "data_source"
                ]
            },
            "page": {
                "type": "integer",
                "description": "Pagination index of the request."
            },
            "size": {
                "type": "integer",
                "description": "Number of elements returned."
            },
            "total": {
                "type": "integer",
                "description": "Number of total elements."
            }
        },
        "required": [
            "id",
            "links"
        ]
    }
```
+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_source_logos/best [/data_source_logos/best?id={id}&id2={id2}&id3={id3}&by={by}&by2={by2}&by3={by3}&by4={by4}&by5={by5}&in={in}&in2={in2}&in3={in3}] 
Returns metadata about the best logo for each of up to three TV channels, as determined by five possible image metadata filters.

To deliver a logo specified by the response to this request, grab the `media_logo ID` for that logo and then call [media_logo](/#reference/image/medialogo).

## GET
This request requires the `data_source_logos` ID for the source of programming on the channel, which is returned by the following requests. A `data_source_logos` ID for a source is the same as the `data_source` ID.
+ [data_source](/#reference/tv-schedule/datasource)
+ [data_service_channels/bulk](/#reference/tv-schedule/dataservicechannelsbulk)
+ [data_service_channels/single](/#reference/tv-schedule/dataservicechannelssingle)
+ [data_service_channels/screen](/#reference/tv-schedule/dataservicechannelsscreen)

Note: When specifying more than one `data_source_logos` ID, specify the IDs in ascending numerical order.

+ Parameters
  + id (required, integer, `69047711`)
    The `data_source_logos` ID for the source of programming on the channel, which is returned by the following requests. A `data_source_logos` ID for a source is the same as the `data_source` ID.
      + [data_source](/#reference/tv-schedule/datasource)
      + [data_service_channels/bulk](/#reference/tv-schedule/dataservicechannelsbulk)
      + [data_service_channels/single](/#reference/tv-schedule/dataservicechannelssingle)
      + [data_service_channels/screen](/#reference/tv-schedule/dataservicechannelsscreen)
    
  + id2 (optional, integer, `69048687`)
    The `data_source_logos` ID for a second TV channel. This ID must be greater than the value of {id}.
  + id3 (optional, integer, `69049209`)
    The `data_source_logos` ID for a third TV channel. This ID must be greater than the value of {id2}.
  + by (optional, string, `id`)
    Response field to sort by. Only top-level response fields are valid, not objects or fields in objects.
     +  For an ascending sort, replace {by} with the field name like this: *id*. For a descending sort, precede the field name with a minus (-) sign like this: *-id*.
     +  To insert a value at the top of the sort, replace {by} with the field and value, like this: "caption=122x66; black".
     +  To filter out a value, precede the value with an exclamation like this: "caption=!122x66; black".

  + by2 (optional, string, `caption`)
    Second level sort specification.
  + by3 (optional, string, `type`)
    Third level sort specification.
  + by4 (optional, string, `type`)
    Fourth level sort specification.
  + by5 (optional, string, `type`)
    Fifth level sort specification.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.

+ Response 200 (application/json)
```
    {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "title": "source_logos",
        "description": "Information about logo files associated with a source of programming on a television channel.",
        "additionalProperties": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Rovi ID for the source that the logos apply to."
                },
                "logos": {
                    "type": "object",
                    "description": "Logos associated with the source.",
                    "properties": {
                        "id": {
                            "type": "integer",
                            "description": "Rovi ID for the logo file."
                        },
                        "in": {
                            "type": "string",
                            "description": "Language of the logo, stated as a two-character, ISO 639 language code."
                        },
                        "type": {
                            "type": "string",
                            "description": "Type of logo.",
                            "oneOf": [
                                {
                                    "enum": [
                                        "jersey"
                                    ],
                                    "description": "Sports jersey logo."
                                },
                                {
                                    "enum": [
                                        "league"
                                    ],
                                    "description": "Sports league logo."
                                },
                                {
                                    "enum": [
                                        "mso"
                                    ],
                                    "description": "MSO branding logo."
                                },
                                {
                                    "enum": [
                                        "provider"
                                    ],
                                    "description": "MSO logo."
                                },
                                {
                                    "enum": [
                                        "source"
                                    ],
                                    "description": "Logo for the source of programming on a television channel."
                                },
                                {
                                    "enum": [
                                        "team"
                                    ],
                                    "description": "Sports team logo."
                                },
                                {
                                    "enum": [
                                        "generic"
                                    ],
                                    "description": "Generic channel logo."
                                }
                            ]
                        },
                        "caption": {
                            "type": "string",
                            "description": "Caption for the image file, commonly the dimensions in pixels and the color category."
                        },
                        "credit": {
                            "type": "string",
                            "description": "Person or company credited with creating the logo, in up to 255 characters."
                        },
                        "owner": {
                            "type": "string",
                            "description": "Legal owner of the image."
                        },
                        "links": {
                            "type": "object",
                            "properties": {
                                "media_logo": {
                                    "type": "object",
                                    "description": "ID to use in a media_logo request to return the logo file.",
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "id"
                                    ]
                                }
                            },
                            "required": [
                                "media_logo"
                            ]
                        }
                    },
                    "required": [
                        "id",
                        "links"
                    ]
                },
                "links": {
                    "type": "object",
                    "properties": {
                        "data_source_logos": {
                            "type": "object",
                            "description": "ID to use in a data_source_logos request to return information about logos for the source.",
                            "properties": {
                                "id": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "id"
                            ]
                        },
                        "data_source": {
                            "type": "object",
                            "description": "ID to use in a data_source request to return information about the source.",
                            "properties": {
                                "id": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "id"
                            ]
                        }
                    },
                    "required": [
                        "data_source_logos",
                        "data_source"
                    ]
                },
                "page": {
                    "type": "integer",
                    "description": "Pagination index of the request."
                },
                "size": {
                    "type": "integer",
                    "description": "Number of elements returned."
                },
                "total": {
                    "type": "integer",
                    "description": "Number of total elements."
                }
            },
            "required": [
                "id",
                "links"
            ]
        }
    }
```
+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# media_logo [/media_logo?id={id}&style={style}]
Returns a channel logo that has a transparent background in PNG file format.

## GET 
This request requires the `media_logo` ID for the logo, which is returned in responses to the following requests:
+ [data_source_logos/best](/#reference/image/datasourcelogosbest)
+ [data_source_logos/collection](/#reference/image/datasourcelogoscollection)

+ Parameters
  + id (required, string, `290840530`) ... 
    The `media_logo` ID for the logo, returned in a response to the following requests:
       + [data_source_logos/best](/#reference/image/datasourcelogosbest)
       + [data_source_logos/collection](/#reference/image/datasourcelogoscollection)
       
  + style (required, string, `large`)
    Preferred style, as shown in the following table. Width and height define a bounding box that logos fill in one or both dimensions.
    <table><tr>
    <th>Style</th>
    <th>Width</th>
    <th>Height</th>
    <th>Color</th>
    </tr><tr>
    <td>white</td>
    <td><p>122 pixels</p></td>
    <td><p>66 pixels</p></td>
    <td><p>white text</p></td>
    </tr><tr>
    <td>black</td>
    <td><p>122 pixels</p></td>
    <td><p>66 pixels</p></td>
    <td><p>black text</p></td>
    </tr><tr>
    <td>small</td>
    <td><p>92 pixels</p></td>
    <td><p>36 pixels</p></td>
    <td><p>color</p></td>
    </tr><tr>
    <td>medium</td>
    <td><p>122 pixels</p></td>
    <td><p>66 pixels</p></td>
    <td><p>black or white</p></td>
    </tr><tr>
    <td>large</td>
    <td><p>140 pixels</p></td>
    <td><p>140 pixels</p></td>
    <td><p>color</p></td>
    </tr></table>

+ Response 200 (application/json)

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_content_images/collection [/data_content_images/collection?id={id}&page={page}&in={in}&in2={in2}&in3={in3}]
Returns metadata about the images available for an airing, movie, series, season, episode, or other.

To deliver an image specified in the response, grab the `media_image` ID for the image you want from the response and then call one of these requests:
+ [media_image/sized](/#reference/image/mediaimagesized)
+ [media_image/master](/#reference/image/mediaimagemaster)

## GET 
This request requires a `data_content_images` ID, which is returned in links in responses to the following requests. A `data_content_images` ID is the same as the ID for each of these requests.
+  [data_other](/#reference/other/dataother)
+  [data_airing](/#reference/tv-schedule/dataairing)
+  [data_movie](/#reference/movie/datamovie)
+  [data_series](/#reference/series/dataseries)
+  [data_season](/#reference/season/dataseason)
+  [data_episode](/#reference/episode/dataepisode)

+ Parameters
  + id (required, integer, `914806985`)
    A `data_content_images` ID, returned in responses to the following requests:
      +  [data_other](/#reference/other/dataother)
      +  [data_airing](/#reference/tv-schedule/dataairing)
      +  [data_movie](/#reference/movie/datamovie)
      +  [data_series](/#reference/series/dataseries)
      +  [data_season](/#reference/season/dataseason)
      +  [data_episode](/#reference/episode/dataepisode)
      
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.

+ Response 200 (application/json)
```
    {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "title": "content_images",
        "description": "Information about images related to a movie or TV program.",
        "properties": {
            "id": {
                "type": "integer",
                "description": "Rovi ID of the movie or TV program."
            },
            "images": {
                "type": "array",
                "items": [
                    {
                        "type": "object",
                        "description": "Image information.",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "Rovi ID for the image."
                            },
                            "in": {
                                "type": "string"
                            },
                            "type": {
                                "type": "string",
                                "description": "Type of image.",
                                "oneOf": [
                                    {
                                        "enum": [
                                            "album"
                                        ],
                                        "description": "Album cover front."
                                    },
                                    {
                                        "enum": [
                                            "album2"
                                        ],
                                        "description": "Album cover back."
                                    },
                                    {
                                        "enum": [
                                            "box"
                                        ],
                                        "description": "VHS box cover."
                                    },
                                    {
                                        "enum": [
                                            "celebrity"
                                        ],
                                        "description": "Celebrity."
                                    },
                                    {
                                        "enum": [
                                            "dvd"
                                        ],
                                        "description": "DVD box cover."
                                    },
                                    {
                                        "enum": [
                                            "gallery"
                                        ],
                                        "description": "Key cast, no set."
                                    },
                                    {
                                        "enum": [
                                            "gallery2"
                                        ],
                                        "description": "Supporting cast, no set."
                                    },
                                    {
                                        "enum": [
                                            "generic"
                                        ],
                                        "description": "Placeholder iconography."
                                    },
                                    {
                                        "enum": [
                                            "generic2"
                                        ],
                                        "description": "Placeholder photograph."
                                    },
                                    {
                                        "enum": [
                                            "group"
                                        ],
                                        "description": "Over four cast members."
                                    },
                                    {
                                        "enum": [
                                            "head"
                                        ],
                                        "description": "One key cast member."
                                    },
                                    {
                                        "enum": [
                                            "head2"
                                        ],
                                        "description": "One supporting cast member."
                                    },
                                    {
                                        "enum": [
                                            "jersey"
                                        ],
                                        "description": "Sports jersey."
                                    },
                                    {
                                        "enum": [
                                            "key"
                                        ],
                                        "description": "Key cast or show image."
                                    },
                                    {
                                        "enum": [
                                            "league"
                                        ],
                                        "description": "Sports league logo."
                                    },
                                    {
                                        "enum": [
                                            "olympic"
                                        ],
                                        "description": "Olympics image."
                                    },
                                    {
                                        "enum": [
                                            "poster"
                                        ],
                                        "description": "Poster art."
                                    },
                                    {
                                        "enum": [
                                            "prod"
                                        ],
                                        "description": "Key cast on set."
                                    },
                                    {
                                        "enum": [
                                            "prod2"
                                        ],
                                        "description": "Supporting cast on set."
                                    },
                                    {
                                        "enum": [
                                            "program"
                                        ],
                                        "description": "Key cast from program."
                                    },
                                    {
                                        "enum": [
                                            "program2"
                                        ],
                                        "description": "Supporting cast from program."
                                    },
                                    {
                                        "enum": [
                                            "set"
                                        ],
                                        "description": "DVD box set cover."
                                    },
                                    {
                                        "enum": [
                                            "showcard"
                                        ],
                                        "description": "TV series poster."
                                    },
                                    {
                                        "enum": [
                                            "team"
                                        ],
                                        "description": "Sports team logo."
                                    },
                                    {
                                        "enum": [
                                            "trailer"
                                        ],
                                        "description": "Image for trailer, 16:9."
                                    },
                                    {
                                        "enum": [
                                            "video"
                                        ],
                                        "description": "Video box cover."
                                    }
                                ]
                            },
                            "caption": {
                                "type": "string",
                                "description": "Image caption."
                            },
                            "credit": {
                                "type": "string",
                                "description": "Person or company credited with taking the photograph."
                            },
                            "owner": {
                                "type": "string",
                                "description": "Legal owner of the image."
                            },
                            "zoom": {
                                "type": "string",
                                "description": "How much of the subject appears in the picture.",
                                "oneOf": [
                                    {
                                        "enum": [
                                            "head"
                                        ],
                                        "description": "Head or shoulders to top of head."
                                    },
                                    {
                                        "enum": [
                                            "torso"
                                        ],
                                        "description": "Chest or thigh to top of head."
                                    },
                                    {
                                        "enum": [
                                            "body"
                                        ],
                                        "description": "Body fills at least 80% of frame."
                                    },
                                    {
                                        "enum": [
                                            "framed"
                                        ],
                                        "description": "Full body fills 50% to 80% of frame."
                                    },
                                    {
                                        "enum": [
                                            "std"
                                        ],
                                        "description": "Full body fills 50% of frame or less."
                                    }
                                ]
                            },
                            "people": {
                                "type": "integer",
                                "description": "Number of people in the image."
                            },
                            "weight": {
                                "type": "number",
                                "description": "Relative importance of the image based on relevance and prominance of cast members in the image. A higher number means a lower weight (fewer cast members and less prominent cast members). A lower number means a greater weight (more cast members and more prominent cast members). Zero (0) means no cast members in the image."
                            },
                            "links": {
                                "type": "object",
                                "properties": {
                                    "media_image": {
                                        "type": "object",
                                        "description": "ID to use in a /media_image request to get the image.",
                                        "properties": {
                                            "id": {
                                                "type": "integer"
                                            }
                                        },
                                        "required": [
                                            "id"
                                        ]
                                    }
                                },
                                "required": [
                                    "media_image"
                                ]
                            }
                        },
                        "required": [
                            "id",
                            "zoom",
                            "links"
                        ]
                    }
                ]
            },
            "links": {
                "type": "object",
                "properties": {
                    "data_content_images": {
                        "type": "object",
                        "description": "ID to use in a data_content_images request to get information about images related to the movie or program.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "data_movie": {
                        "type": "object",
                        "description": "ID to use in a data_movie request to get information about the movie.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "data_series": {
                        "type": "object",
                        "description": "ID to use in a data_series request to get information about the TV series.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "data_episode": {
                        "type": "object",
                        "description": "ID to use in a data_episode request to get information about the episode.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "data_other": {
                        "type": "object",
                        "description": "ID to use in a data_other request to get information about the program.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                },
                "required": [
                    "data_content_images"
                ]
            },
            "page": {
                "type": "integer",
                "description": "Pagination index of the request."
            },
            "size": {
                "type": "integer",
                "description": "Number of elements returned."
            },
            "total": {
                "type": "integer",
                "description": "Total number of elements."
            }
        },
        "required": [
            "id",
            "links"
        ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_content_images/best [/data_content_images/best?id={id}&id2={id2}&id3={id3}&by={by}&by2={by2}&by3={by3}&by4={by4}&by5={by5}&in={in}&in2={in2}&in3={in3}]
Returns metadata about the best image for each of up to three airings, movies, series, seasons, episodes, or other, as determined by five possible image metadata filters.

To deliver an image specified in the response, grab the `media_image` ID for the image you want from the response and then call one these requests:
+ [media_image/sized](/#reference/image/mediaimagesized)
+ [media_image/master](/#reference/image/mediaimagemaster)

## GET 
This request requires one or more `data_content_images` IDs, which are returned in links in responses to the following requests. A `data_content_images` ID is the same as the ID for each of these requests.
+  [data_other](/#reference/other/dataother)
+  [data_airing](/#reference/tv-schedule/dataairing)
+  [data_movie](/#reference/movie/datamovie)
+  [data_series](/#reference/series/dataseries)
+  [data_season](/#reference/season/dataseason)
+  [data_episode](/#reference/episode/dataepisode)

Note:  The {by} parameters can sort results by value of response fields. The most useful response fields to sort are:

`people` &emsp; Number of people in the image.

`weight` &emsp; Prominance of cast members in the image, where:
+  zero means no cast members
+  a higher number means fewer and less prominent cast members
+  a lower number means more and more prominent cast members

`zoom` &emsp; Maximum zoom level, or close-up level, of the image:

| Zoom Level | Description                           |
| ---------- | ------------------------------------- |
| head       | Head or shoulders to top of head.     |
| torso      | Chest or thigh to top of head.        |
| body       | Body fills at least 80% of frame.     |
| framed     | Full body fills 50% to 80% of frame.  |
| std        | Full body fills 50% of frame or less. |

`type` &emsp; Type of image:

| Image Type | Description                | Image Type | Description                  |
| ---------- | -------------------------- | ---------- | --------------------------   |
| album      | Album cover front          | key        | Key cast or show image       |
| album2     | Album cover back           | league     | Sports league logo           |
| box        | VHS box cover              | olympic    | Olympic image                |
| celebrity  | Celebrity                  | poster     | Poster art                   |
| dvd        | DVD box cover              | prod       | Key cast on set              |
| gallery    | Key cast, no set           | prod2      | Supporting cast on set       |
| gallery2   | Supporting cast, no set    | program    | Key cast from program        |
| generic    | Placeholder iconography    | program2   | Supporting cast from program |
| generic2   | Placeholder photograph     | set        | DVD box set cover            |
| group      | Over four cast members     | showcard   | TV series poster             |
| head       | One key cast member        | team       | Sports team logo             |
| head2      | One supporting cast member | trailer    | Image for trailer, 16:9      |
| jersey     | Sports jersey              | video      | Video box cover              |

+ Parameters
  + id (required, integer, `914806985`)
    A `data_content_images` ID, returned in responses to the following requests. A `data_content_images` ID is the same as the ID for each of these requests.
      +  [data_other](/#reference/other/dataother)
      +  [data_airing](/#reference/tv-schedule/dataairing)
      +  [data_movie](/#reference/movie/datamovie)
      +  [data_series](/#reference/series/dataseries)
      +  [data_season](/#reference/season/dataseason)
      +  [data_episode](/#reference/episode/dataepisode)
      
  + id2 (optional, integer, `916717280`)
    A second `data_content_images` ID for a movie or TV program.
  + id3 (optional, integer, `916638563`)
    A third `data_content_images` ID for a movie or TV program.
  + by (optional, string, `people`)
    Response field to sort by. Only top-level response fields are valid, not objects or fields in objects.
      +  For an ascending sort, replace {by} with the field name like this: *people*. For a descending sort, precede the field name with a minus (-) sign like this: *-people*.
      +  To insert a value at the top of the sort, replace {by} with the field and value, like this: *zoom=head*.
      +  To filter out a value, precede the value with an exclamation like this: "weight=!0".
      
  + by2 (optional, string, `type=key`)
    Second level sort specification.
  + by3 (optional, string, `type`)
    Third level sort specification.
  + by4 (optional, string, `zoom`)
    Fourth level sort specification.
  + by5 (optional, string, `zoom`)
    Fifth level sort specification.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.

+ Response 200 (application/json)
```
    {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "title": "content_images",
        "description": "Information about images related to a movie or TV program.",
        "additionalProperties": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Rovi ID of the movie or TV program."
                },
                "images": {
                    "type": "object",
                    "description": "Images information.",
                    "properties": {
                        "id": {
                            "type": "integer",
                            "description": "Rovi ID for the image."
                        },
                        "in": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string",
                            "description": "Type of image.",
                            "oneOf": [
                                {
                                    "enum": [
                                        "album"
                                    ],
                                    "description": "Album cover front."
                                },
                                {
                                    "enum": [
                                        "album2"
                                    ],
                                    "description": "Album cover back."
                                },
                                {
                                    "enum": [
                                        "box"
                                    ],
                                    "description": "VHS box cover."
                                },
                                {
                                    "enum": [
                                        "celebrity"
                                    ],
                                    "description": "Celebrity."
                                },
                                {
                                    "enum": [
                                        "dvd"
                                    ],
                                    "description": "DVD box cover."
                                },
                                {
                                    "enum": [
                                        "gallery"
                                    ],
                                    "description": "Key cast, no set."
                                },
                                {
                                    "enum": [
                                        "gallery2"
                                    ],
                                    "description": "Supporting cast, no set."
                                },
                                {
                                    "enum": [
                                        "generic"
                                    ],
                                    "description": "Placeholder iconography."
                                },
                                {
                                    "enum": [
                                        "generic2"
                                    ],
                                    "description": "Placeholder photograph."
                                },
                                {
                                    "enum": [
                                        "group"
                                    ],
                                    "description": "Over four cast members."
                                },
                                {
                                    "enum": [
                                        "head"
                                    ],
                                    "description": "One key cast member."
                                },
                                {
                                    "enum": [
                                        "head2"
                                    ],
                                    "description": "One supporting cast member."
                                },
                                {
                                    "enum": [
                                        "jersey"
                                    ],
                                    "description": "Sports jersey."
                                },
                                {
                                    "enum": [
                                        "key"
                                    ],
                                    "description": "Key cast or show image."
                                },
                                {
                                    "enum": [
                                        "league"
                                    ],
                                    "description": "Sports league logo."
                                },
                                {
                                    "enum": [
                                        "olympic"
                                    ],
                                    "description": "Olympics image."
                                },
                                {
                                    "enum": [
                                        "poster"
                                    ],
                                    "description": "Poster art."
                                },
                                {
                                    "enum": [
                                        "prod"
                                    ],
                                    "description": "Key cast on set."
                                },
                                {
                                    "enum": [
                                        "prod2"
                                    ],
                                    "description": "Supporting cast on set."
                                },
                                {
                                    "enum": [
                                        "program"
                                    ],
                                    "description": "Key cast from program."
                                },
                                {
                                    "enum": [
                                        "program2"
                                    ],
                                    "description": "Supporting cast from program."
                                },
                                {
                                    "enum": [
                                        "set"
                                    ],
                                    "description": "DVD box set cover."
                                },
                                {
                                    "enum": [
                                        "showcard"
                                    ],
                                    "description": "TV series poster."
                                },
                                {
                                    "enum": [
                                        "team"
                                    ],
                                    "description": "Sports team logo."
                                },
                                {
                                    "enum": [
                                        "trailer"
                                    ],
                                    "description": "Image for trailer, 16:9."
                                },
                                {
                                    "enum": [
                                        "video"
                                    ],
                                    "description": "Video box cover."
                                }
                            ]
                        },
                        "caption": {
                            "type": "string",
                            "description": "Image caption."
                        },
                        "credit": {
                            "type": "string",
                            "description": "Person or company credited with taking the photograph."
                        },
                        "owner": {
                            "type": "string",
                            "description": "Legal owner of the image."
                        },
                        "zoom": {
                            "type": "string",
                            "description": "How much of the subject appears in the picture.",
                            "oneOf": [
                                {
                                    "enum": [
                                        "head"
                                    ],
                                    "description": "Head or shoulders to top of head."
                                },
                                {
                                    "enum": [
                                        "torso"
                                    ],
                                    "description": "Chest or thigh to top of head."
                                },
                                {
                                    "enum": [
                                        "body"
                                    ],
                                    "description": "Body fills at least 80% of frame."
                                },
                                {
                                    "enum": [
                                        "framed"
                                    ],
                                    "description": "Full body fills 50% to 80% of frame."
                                },
                                {
                                    "enum": [
                                        "std"
                                    ],
                                    "description": "Full body fills 50% of frame or less."
                                }
                            ]
                        },
                        "people": {
                            "type": "integer",
                            "description": "Number of people in the image."
                        },
                        "weight": {
                            "type": "number",
                            "description": "Relative importance of the image based on relevance and prominance of cast members in the image. A higher number means a lower weight (fewer cast members and less prominent cast members). A lower number means a greater weight (more cast members and more prominent cast members). Zero (0) means no cast members in the image."
                        },
                        "links": {
                            "type": "object",
                            "properties": {
                                "media_image": {
                                    "type": "object",
                                    "description": "ID to use in a media_image request to get the image file.",
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "id"
                                    ]
                                }
                            },
                            "required": [
                                "media_image"
                            ]
                        }
                    },
                    "required": [
                        "id",
                        "zoom",
                        "links"
                    ]
                },
                "links": {
                    "type": "object",
                    "properties": {
                        "data_content_images": {
                            "type": "object",
                            "description": "ID to use in a data_content_images request to get information about images related to the movie or program.",
                            "properties": {
                                "id": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "id"
                            ]
                        },
                        "data_movie": {
                            "type": "object",
                            "description": "ID to use in a data_movie request to get information about the movie.",
                            "properties": {
                                "id": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "id"
                            ]
                        },
                        "data_series": {
                            "type": "object",
                            "description": "ID to use in a data_series request to get information about the TV series.",
                            "properties": {
                                "id": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "id"
                            ]
                        },
                        "data_episode": {
                            "type": "object",
                            "description": "ID to use in a data_episode request to get information about the episode.",
                            "properties": {
                                "id": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "id"
                            ]
                        },
                        "data_other": {
                            "type": "object",
                            "description": "ID to use in a data_other request to get information about the program.",
                            "properties": {
                                "id": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "id"
                            ]
                        }
                    },
                    "required": [
                        "data_content_images"
                    ]
                },
                "page": {
                    "type": "integer",
                    "description": "Pagination index of the request."
                },
                "size": {
                    "type": "integer",
                    "description": "Number of elements returned."
                },
                "total": {
                    "type": "integer",
                    "description": "Total number elements."
                }
            },
            "required": [
                "id",
                "links"
            ]
        }
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_release_images/collection [/data_release_images/collection?id={id}&page={page}&in={in}&in2={in2}&in3={in3}]
Returns metadata about the images available for a release of a movie, episode, or other show.

To deliver an image specified in the response, grab the `media_image` ID for the image you want from the response and then call one of these requests:
+ [media_image/sized](/#reference/image/mediaimagesized)
+ [media_image/master](/#reference/image/mediaimagemaster)

## GET 
This request requires a `data_release_images` ID for a release. A `data_release_images` ID is the same as the `data_release` ID for the release.

+ Parameters
  + id (required, integer, `982759625`)
    A `data_release_images` ID for a release of a movie, episode, or other show. A `data_release_images` ID is the same as the `data_release` ID for the release.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.

+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"release_images",
       "description":"Information about images related to a release of a movie, episode, or other show.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the release."
          },
          "images":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Image information.",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"Rovi ID for the image."
                      },
                      "in":{
                         "type":"string"
                      },
                      "type":{
                         "type":"string",
                         "description":"Type of image.",
                         "oneOf":[
                            {
                               "enum":[
                                  "album"
                               ],
                               "description":"Album cover front."
                            },
                            {
                               "enum":[
                                  "album2"
                               ],
                               "description":"Album cover back."
                            },
                            {
                               "enum":[
                                  "box"
                               ],
                               "description":"VHS box cover."
                            },
                            {
                               "enum":[
                                  "celebrity"
                               ],
                               "description":"Celebrity."
                            },
                            {
                               "enum":[
                                  "dvd"
                               ],
                               "description":"DVD box cover."
                            },
                            {
                               "enum":[
                                  "gallery"
                               ],
                               "description":"Key cast, no set."
                            },
                            {
                               "enum":[
                                  "gallery2"
                               ],
                               "description":"Supporting cast, no set."
                            },
                            {
                               "enum":[
                                  "generic"
                               ],
                               "description":"Placeholder iconography or photograph."
                            },
                            {
                               "enum":[
                                  "group"
                               ],
                               "description":"Over four cast members."
                            },
                            {
                               "enum":[
                                  "head"
                               ],
                               "description":"One key cast member."
                            },
                            {
                               "enum":[
                                  "head2"
                               ],
                               "description":"One supporting cast member."
                            },
                            {
                               "enum":[
                                  "jersey"
                               ],
                               "description":"Sports jersey."
                            },
                            {
                               "enum":[
                                  "key"
                               ],
                               "description":"Key cast or show image."
                            },
                            {
                               "enum":[
                                  "league"
                               ],
                               "description":"Sports league logo."
                            },
                            {
                               "enum":[
                                  "olympic"
                               ],
                               "description":"Olympics image."
                            },
                            {
                               "enum":[
                                  "poster"
                               ],
                               "description":"Poster art."
                            },
                            {
                               "enum":[
                                  "prod"
                               ],
                               "description":"Key cast on set."
                            },
                            {
                               "enum":[
                                  "prod2"
                               ],
                               "description":"Supporting cast on set."
                            },
                            {
                               "enum":[
                                  "program"
                               ],
                               "description":"Key cast from program."
                            },
                            {
                               "enum":[
                                  "program2"
                               ],
                               "description":"Supporting cast from program."
                            },
                            {
                               "enum":[
                                  "set"
                               ],
                               "description":"DVD box set cover."
                            },
                            {
                               "enum":[
                                  "showcard"
                               ],
                               "description":"TV series poster."
                            },
                            {
                               "enum":[
                                  "team"
                               ],
                               "description":"Sports team logo."
                            },
                            {
                               "enum":[
                                  "trailer"
                               ],
                               "description":"Image for trailer, 16:9."
                            },
                            {
                               "enum":[
                                  "video"
                               ],
                               "description":"Video box cover."
                            }
                         ]
                      },
                      "caption":{
                         "type":"string",
                         "description":"Image caption."
                      },
                      "credit":{
                         "type":"string",
                         "description":"Person or company credited with taking the photograph."
                      },
                      "owner":{
                         "type":"string",
                         "description":"Legal owner of the image."
                      },
                      "zoom":{
                         "type":"string",
                         "description":"How much of the subject appears in the picture.",
                         "oneOf":[
                            {
                               "enum":[
                                  "head"
                               ],
                               "description":"Head or shoulders to top of head."
                            },
                            {
                               "enum":[
                                  "torso"
                               ],
                               "description":"Chest or thigh to top of head."
                            },
                            {
                               "enum":[
                                  "body"
                               ],
                               "description":"Body fills at least 80% of frame."
                            },
                            {
                               "enum":[
                                  "framed"
                               ],
                               "description":"Full body fills 50% to 80% of frame."
                            },
                            {
                               "enum":[
                                  "std"
                               ],
                               "description":"Full body fills 50% of frame or less."
                            }
                         ]
                      },
                      "people":{
                         "type":"integer",
                         "description":"Number of people in the image."
                      },
                      "weight":{
                         "type":"number",
                         "description":"Relative importance of the image based on relevance and prominance of cast members in the image. A higher number means a lower weight (fewer cast members and less prominent cast members). A lower number means a greater weight (more cast members and more prominent cast members). Zero (0) means no cast members in the image."
                      },
                      "ref":{
                         "type":"object",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"ID to use to get information about this resource."
                            },
                            "me":{
                               "type":"string",
                               "description":"URI template to use to get information about this resource."
                            },
                            "parent":{
                               "type":"string",
                               "description":"URI template for information about the parent resource."
                            },
                            "children":{
                               "type":"array",
                               "description":"URI templates for child resources."
                            }
                         },
                         "required":[
                            "id",
                            "me"
                         ]
                      }
                   },
                   "required":[
                      "id",
                      "zoom",
                      "ref"
                   ]
                }
             ]
          },
          "ref":{
             "type":"object",
             "properties":{
                "id":{
                   "type":"integer",
                   "description":"ID to use to get information about this resource."
                },
                "me":{
                   "type":"string",
                   "description":"URI template to use to get information about this resource."
                },
                "parent":{
                   "type":"string",
                   "description":"URI template for information about the parent resource."
                },
                "children":{
                   "type":"array",
                   "description":"URI templates for child resources."
                }
             },
             "required":[
                "id",
                "me"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "ref"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_release_images/best [/data_release_images/best?id={id}&id2={id2}&id3={id3}&by={by}&by2={by2}&by3={by3}&by4={by4}&by5={by5}&in={in}&in2={in2}&in3={in3}]
Returns metadata about the best image for each of up to three releases, as determined by five possible image metadata filters.

To deliver an image specified in the response, grab the `media_image` ID for the image you want from the response and then call one these requests:
+ [media_image/sized](/#reference/image/mediaimagesized)
+ [media_image/master](/#reference/image/mediaimagemaster)

## GET 
This request requires one or more `data_release_images` IDs. A `data_release_images` ID is the same as the `data_release` ID for a release.

Note:  The {by} parameters can sort results by value of response fields. The most useful response fields to sort are:

`people` &emsp; Number of people in the image.

`weight` &emsp; Prominance of cast members in the image, where:
+  zero means no cast members
+  a higher number means fewer and less prominent cast members
+  a lower number means more and more prominent cast members

`zoom` &emsp; Maximum zoom level, or close-up level, of the image:

| Zoom Level | Description                           |
| ---------- | ------------------------------------- |
| head       | Head or shoulders to top of head.     |
| torso      | Chest or thigh to top of head.        |
| body       | Body fills at least 80% of frame.     |
| framed     | Full body fills 50% to 80% of frame.  |
| std        | Full body fills 50% of frame or less. |

`type` &emsp; Type of image:

| Image Type | Description                | Image Type | Description                  |
| ---------- | -------------------------- | ---------- | --------------------------   |
| album      | Album cover front          | key        | Key cast or show image       |
| album2     | Album cover back           | league     | Sports league logo           |
| box        | VHS box cover              | olympic    | Olympic image                |
| celebrity  | Celebrity                  | poster     | Poster art                   |
| dvd        | DVD box cover              | prod       | Key cast on set              |
| gallery    | Key cast, no set           | prod2      | Supporting cast on set       |
| gallery2   | Supporting cast, no set    | program    | Key cast from program        |
| generic    | Placeholder iconography    | program2   | Supporting cast from program |
| generic2   | Placeholder photograph     | set        | DVD box set cover            |
| group      | Over four cast members     | showcard   | TV series poster             |
| head       | One key cast member        | team       | Sports team logo             |
| head2      | One supporting cast member | trailer    | Image for trailer, 16:9      |
| jersey     | Sports jersey              | video      | Video box cover              |

+ Parameters
  + id (required, integer, `13554857`)
    A `data_release_images` ID for a release of a movie, episode, or other show. A `data_release_images` ID is the same as the `data_release` ID for the release.
  + id2 (optional, integer, `373544356`)
    A second `data_release_images` ID for a release.
  + id3 (optional, integer, `982759625`)
    A third `data_release_images` ID for a release.
  + by (optional, string, `people`)
    Response field to sort by. Only top-level response fields are valid, not objects or fields in objects.
      +  For an ascending sort, replace {by} with the field name like this: *people*. For a descending sort, precede the field name with a minus (-) sign like this: *-people*.
      +  To insert a value at the top of the sort, replace {by} with the field and value, like this: *zoom=head*.
      +  To filter out a value, precede the value with an exclamation like this: "weight=!0".
      
  + by2 (optional, string, `type=key`)
    Second level sort specification.
  + by3 (optional, string, `type`)
    Third level sort specification.
  + by4 (optional, string, `zoom`)
    Fourth level sort specification.
  + by5 (optional, string, `zoom`)
    Fifth level sort specification.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.

+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"name_images",
       "description":"Information about images related to a person, team, or organization.",
       "additionalProperties":{
          "type":"object",
          "properties":{
             "id":{
                "type":"integer",
                "description":"Rovi ID for the person, team, or organization."
             },
             "images":{
                "type":"object",
                "description":"Information about images related to the person, team, or organization.",
                "properties":{
                   "id":{
                      "type":"integer",
                      "description":"Rovi ID for the image."
                   },
                   "in":{
                      "type":"string"
                   },
                   "type":{
                      "type":"string",
                      "description":"Type of image.",
                      "oneOf":[
                         {
                            "enum":[
                               "album"
                            ],
                            "description":"Album cover front."
                         },
                         {
                            "enum":[
                               "album2"
                            ],
                            "description":"Album cover back."
                         },
                         {
                            "enum":[
                               "athlete"
                            ],
                            "description":"Athlete image."
                         },
                         {
                            "enum":[
                               "box"
                            ],
                            "description":"VHS box cover."
                         },
                         {
                            "enum":[
                               "celebrity"
                            ],
                            "description":"Celebrity."
                         },
                         {
                            "enum":[
                               "dvd"
                            ],
                            "description":"DVD box cover."
                         },
                         {
                            "enum":[
                               "gallery"
                            ],
                            "description":"Key cast, no set."
                         },
                         {
                            "enum":[
                               "gallery2"
                            ],
                            "description":"Supporting cast, no set."
                         },
                         {
                            "enum":[
                               "generic"
                            ],
                            "description":"Placeholder iconography or photograph."
                         },
                         {
                            "enum":[
                               "group"
                            ],
                            "description":"Over four cast members."
                         },
                         {
                            "enum":[
                               "head"
                            ],
                            "description":"One key cast member."
                         },
                         {
                            "enum":[
                               "head2"
                            ],
                            "description":"One supporting cast member."
                         },
                         {
                            "enum":[
                               "jersey"
                            ],
                            "description":"Sports jersey."
                         },
                         {
                            "enum":[
                               "key"
                            ],
                            "description":"Key cast or show image."
                         },
                         {
                            "enum":[
                               "league"
                            ],
                            "description":"Sports league logo."
                         },
                         {
                            "enum":[
                               "olympic"
                            ],
                            "description":"Olympic image."
                         },
                         {
                            "enum":[
                               "poster"
                            ],
                            "description":"Poster art."
                         },
                         {
                            "enum":[
                               "prod"
                            ],
                            "description":"Key cast on set."
                         },
                         {
                            "enum":[
                               "prod2"
                            ],
                            "description":"Supporting cast on set."
                         },
                         {
                            "enum":[
                               "program"
                            ],
                            "description":"Key cast from program."
                         },
                         {
                            "enum":[
                               "program2"
                            ],
                            "description":"Supporting cast from program."
                         },
                         {
                            "enum":[
                               "set"
                            ],
                            "description":"DVD box set cover."
                         },
                         {
                            "enum":[
                               "showcard"
                            ],
                            "description":"TV series poster."
                         },
                         {
                            "enum":[
                               "team"
                            ],
                            "description":"Sports team logo."
                         },
                         {
                            "enum":[
                               "team2"
                            ],
                            "description":"Sports team secondary logo."
                         },
                         {
                            "enum":[
                               "trailer"
                            ],
                            "description":"Image for trailer, 16:9."
                         },
                         {
                            "enum":[
                               "video"
                            ],
                            "description":"Video box cover."
                         }
                      ]
                   },
                   "caption":{
                      "type":"string",
                      "description":"Image caption."
                   },
                   "credit":{
                      "type":"string",
                      "description":"Person or company credited with taking the photograph."
                   },
                   "owner":{
                      "type":"string",
                      "description":"Legal owner of the image."
                   },
                   "zoom":{
                      "type":"string",
                      "description":"How much of the subject appears in the picture.",
                      "oneOf":[
                         {
                            "enum":[
                               "head"
                            ],
                            "description":"Head or shoulders to top of head."
                         },
                         {
                            "enum":[
                               "torso"
                            ],
                            "description":"Chest or thigh to top of head."
                         },
                         {
                            "enum":[
                               "body"
                            ],
                            "description":"Body fills at least 80% of frame."
                         },
                         {
                            "enum":[
                               "framed"
                            ],
                            "description":"Full body fills 50% to 80% of frame."
                         },
                         {
                            "enum":[
                               "std"
                            ],
                            "description":"Full body fills 50% of frame or less."
                         }
                      ]
                   },
                   "people":{
                      "type":"integer",
                      "description":"Number of people in the image."
                   },
                   "weight":{
                      "type":"number",
                      "description":"Relative importance of the image based on relevance and prominance of cast members in the image. A higher number means a lower weight (fewer cast members and less prominent cast members). A lower number means a greater weight (more cast members and more prominent cast members). Zero (0) means no cast members in the image."
                   },
                   "ref":{
                      "type":"object",
                      "properties":{
                         "id":{
                            "type":"integer",
                            "description": "ID to use to get information about this resource."
                         },
                         "me":{
                            "type":"string",
                            "description": "URI template to use to get information about this resource."
                         },
                         "parent":{
                            "type":"string",
                            "description": "URI template for information about the parent resource."
                         },
                         "children":{
                            "type":"array",
                            "description": "URI templates for child resources."
                         }
                      },
                      "required":[
                         "id",
                         "me"
                      ]
                   }
                },
                "required":[
                   "id",
                   "zoom",
                   "ref"
                ]
             },
             "ref":{
                "type":"object",
                "properties":{
                   "id":{
                      "type":"integer",
                      "description": "ID to use to get information about this resource."
                   },
                   "me":{
                      "type":"string",
                      "description": "URI template to use to get information about this resource."
                   },
                   "parent":{
                      "type":"string",
                      "description": "URI template for information about the parent resource."
                   },
                   "children":{
                      "type":"array",
                      "description": "URI templates for child resources."
                   }
                },
                "required":[
                   "id",
                   "me"
                ]
             },
             "page":{
                "type":"integer",
                "description":"Page number of the response."
             },
             "size":{
                "type":"integer",
                "description":"Number of elements in this page."
             },
             "total":{
                "type":"integer",
                "description":"Total number of elements available."
             }
          },
          "required":[
             "id",
             "ref"
          ]
       }
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_name_images/collection [/data_name_images/collection?id={id}&page={page}&in={in}&in2={in2}&in3={in3}]
Returns metadata about images of a team, person, or organization.

To deliver an image specified in the response, grab the `media_image` ID for the image you want from the response and then call one of these requests.
+ [media_image/sized](/#reference/image/mediaimagesized)
+ [media_image/master](/#reference/image/mediaimagemaster)

## GET 
This request requires a `data_name_images` ID, which is returned in links in responses to [data_person](/#reference/tv-and-movie-data/dataperson) requests. A `data_name_images` ID is the same as the `data_person` ID for a person.

+ Parameters
  + id (required, integer, `6779589`)
    A `data_name_images` ID, returned in a response to a [data_person](/#reference/tv-and-movie-data/dataperson) request. A `data_name_images` ID is the same as the `data_person` ID for a person.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.

+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"name_images",
       "description":"Information about images related to a person, team, or organization.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the person, team, or organization."
          },
          "images":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Information about images related to the person, team, or organization.",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"Rovi ID for the image."
                      },
                      "in":{
                         "type":"string"
                      },
                      "type":{
                         "type":"string",
                         "description":"Type of image.",
                         "oneOf":[
                            {
                               "enum":[
                                  "album"
                               ],
                               "description":"Album cover front."
                            },
                            {
                               "enum":[
                                  "album2"
                               ],
                               "description":"Album cover back."
                            },
                            {
                               "enum":[
                                  "athlete"
                               ],
                               "description":"Athlete image."
                            },
                            {
                               "enum":[
                                  "box"
                               ],
                               "description":"VHS box cover."
                            },
                            {
                               "enum":[
                                  "celebrity"
                               ],
                               "description":"Celebrity."
                            },
                            {
                               "enum":[
                                  "dvd"
                               ],
                               "description":"DVD box cover."
                            },
                            {
                               "enum":[
                                  "gallery"
                               ],
                               "description":"Key cast, no set."
                            },
                            {
                               "enum":[
                                  "gallery2"
                               ],
                               "description":"Supporting cast, no set."
                            },
                            {
                               "enum":[
                                  "generic"
                               ],
                               "description":"Placeholder iconography or photograph."
                            },
                            {
                               "enum":[
                                  "group"
                               ],
                               "description":"Over four cast members."
                            },
                            {
                               "enum":[
                                  "head"
                               ],
                               "description":"One key cast member."
                            },
                            {
                               "enum":[
                                  "head2"
                               ],
                               "description":"One supporting cast member."
                            },
                            {
                               "enum":[
                                  "jersey"
                               ],
                               "description":"Sports jersey."
                            },
                            {
                               "enum":[
                                  "key"
                               ],
                               "description":"Key cast or show image."
                            },
                            {
                               "enum":[
                                  "league"
                               ],
                               "description":"Sports league logo."
                            },
                            {
                               "enum":[
                                  "olympic"
                               ],
                               "description":"Olympic image."
                            },
                            {
                               "enum":[
                                  "poster"
                               ],
                               "description":"Poster art."
                            },
                            {
                               "enum":[
                                  "prod"
                               ],
                               "description":"Key cast on set."
                            },
                            {
                               "enum":[
                                  "prod2"
                               ],
                               "description":"Supporting cast on set."
                            },
                            {
                               "enum":[
                                  "program"
                               ],
                               "description":"Key cast from program."
                            },
                            {
                               "enum":[
                                  "program2"
                               ],
                               "description":"Supporting cast from program."
                            },
                            {
                               "enum":[
                                  "set"
                               ],
                               "description":"DVD box set cover."
                            },
                            {
                               "enum":[
                                  "showcard"
                               ],
                               "description":"TV series poster."
                            },
                            {
                               "enum":[
                                  "team"
                               ],
                               "description":"Sports team logo."
                            },
                            {
                               "enum":[
                                  "team2"
                               ],
                               "description":"Sports team secondary logo."
                            },
                            {
                               "enum":[
                                  "trailer"
                               ],
                               "description":"Image for trailer, 16:9."
                            },
                            {
                               "enum":[
                                  "video"
                               ],
                               "description":"Video box cover."
                            }
                         ]
                      },
                      "caption":{
                         "type":"string",
                         "description":"Image caption."
                      },
                      "credit":{
                         "type":"string",
                         "description":"Person or company credited with taking the photograph."
                      },
                      "owner":{
                         "type":"string",
                         "description":"Legal owner of the image."
                      },
                      "zoom":{
                         "type":"string",
                         "description":"How much of the subject appears in the picture.",
                         "oneOf":[
                            {
                               "enum":[
                                  "head"
                               ],
                               "description":"Head or shoulders to top of head."
                            },
                            {
                               "enum":[
                                  "torso"
                               ],
                               "description":"Chest or thigh to top of head."
                            },
                            {
                               "enum":[
                                  "body"
                               ],
                               "description":"Body fills at least 80% of frame."
                            },
                            {
                               "enum":[
                                  "framed"
                               ],
                               "description":"Full body fills 50% to 80% of frame."
                            },
                            {
                               "enum":[
                                  "std"
                               ],
                               "description":"Full body fills 50% of frame or less."
                            }
                         ]
                      },
                      "people":{
                         "type":"integer",
                         "description":"Number of people in the image."
                      },
                      "weight":{
                         "type":"number",
                         "description":"Relative importance of the image based on relevance and prominance of cast members in the image. A higher number means a lower weight (fewer cast members and less prominent cast members). A lower number means a greater weight (more cast members and more prominent cast members). Zero (0) means no cast members in the image."
                      },
                      "ref":{
                         "type":"object",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description": "ID to use to get information about this resource."
                            },
                            "me":{
                               "type":"string",
                               "description": "URI template to use to get information about this resource."
                            },
                            "parent":{
                               "type":"string",
                               "description": "URI template for information about the parent resource."
                            },
                            "children":{
                               "type":"array",
                               "description": "URI templates for child resources."
                            }
                         },
                         "required":[
                            "id",
                            "me"
                         ]
                      }
                   },
                   "required":[
                      "id",
                      "zoom",
                      "ref"
                   ]
                }
             ]
          },
          "ref":{
             "type":"object",
             "properties":{
                "id":{
                   "type":"integer",
                   "description": "ID to use to get information about this resource."
                },
                "me":{
                   "type":"string",
                   "description": "URI template to use to get information about this resource."
                },
                "parent":{
                   "type":"string",
                   "description": "URI template for information about the parent resource."
                },
                "children":{
                   "type":"array",
                   "description": "URI templates for child resources."
                }
             },
             "required":[
                "id",
                "me"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "ref"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_name_images/best [/data_name_images/best?id={id}&id2={id2}&id3={id3}&by={by}&id2={by2}&id3={by3}&id4={by4}&id5={by5}&in={in}&in2={in2}&in3={in3}]
Returns metadata about the best image for each of up to three teams, people, or organizations, as determined by five possible image metadata filters.

## GET 
This request requires one or more `data_name_images` IDs, which are returned in links in responses to [data_person](/#reference/tv-and-movie-data/dataperson) requests. A `data_name_images` ID is the same as the `data_person` ID for a person.

The {by} parameters filter results by response fields. The most useful response fields to filter with this parameter are:

`people` &emsp; Number of people in the image.

`zoom` &emsp; Maximum zoom level, or close-up level, of the image:

| Zoom Level | Description                           |
| ---------- | ------------------------------------- |
| head       | Head or shoulders to top of head.     |
| torso      | Chest or thigh to top of head.        |
| body       | Body fills at least 80% of frame.     |
| framed     | Full body fills 50% to 80% of frame.  |
| std        | Full body fills 50% of frame or less. |

`type` &emsp; Type of image:

| Image Type | Description                | Image Type | Description                  |
| ---------- | -------------------------- | ---------- | --------------------------   |
| album      | Album cover front          | key        | Key cast or show image       |
| album2     | Album cover back           | league     | Sports league logo           |
| box        | VHS box cover              | olympic    | Olympic image                |
| celebrity  | Celebrity                  | poster     | Poster art                   |
| dvd        | DVD box cover              | prod       | Key cast on set              |
| gallery    | Key cast, no set           | prod2      | Supporting cast on set       |
| gallery2   | Supporting cast, no set    | program    | Key cast from program        |
| generic    | Placeholder iconography    | program2   | Supporting cast from program |
| generic2   | Placeholder photograph     | set        | DVD box set cover            |
| group      | Over four cast members     | showcard   | TV series poster             |
| head       | One key cast member        | team       | Sports team logo             |
| head2      | One supporting cast member | trailer    | Image for trailer, 16:9      |
| jersey     | Sports jersey              | video      | Video box cover              |

+ Parameters
  + id (required, integer, `6778528`)
    A `data_name_images` ID, returned in a response to a [data_person](/#reference/person/dataperson) request. A `data_name_images` ID is the same as the `data_person` ID for a person.
  + id2 (optional, integer, `6779589`)
    The `data_name_images` ID for a second person, team, or organization.
  + id3 (optional, integer, `6781337`)
    The `data_name_images` ID for a second person, team, or organization.
  + by (optional, string, `people`)
    Response field to sort by. Only top-level response fields are valid, not objects or fields in objects.
      +  For an ascending sort, replace {by} with the field name like this: __people__. For a descending sort, precede the field name with a minus (-) sign like this: __-people__.
      +  To insert a value at the top of the sort, replace {by} with the field and value, like this: __zoom=head__.
      +  To filter out a value, precede the value with an exclamation like this: __zoom=!std__.
      
  + by2 (optional, string, `people`)
    Second level sort specification.
  + by3 (optional, string, `people`)
    Third level sort specification.
  + by4 (optional, string, `people`)
    Fourth level sort specification.
  + by5 (optional, string, `people`)
    Fifth level sort specification.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.

+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"name_images",
       "description":"Information about images related to a person, team, or organization.",
       "additionalProperties":{
          "type":"object",
          "properties":{
             "id":{
                "type":"integer",
                "description":"Rovi ID for the person, team, or organization."
             },
             "images":{
                "type":"object",
                "description":"Information about images related to the person, team, or organization.",
                "properties":{
                   "id":{
                      "type":"integer",
                      "description":"Rovi ID for the image."
                   },
                   "in":{
                      "type":"string"
                   },
                   "type":{
                      "type":"string",
                      "description":"Type of image.",
                      "oneOf":[
                         {
                            "enum":[
                               "album"
                            ],
                            "description":"Album cover front."
                         },
                         {
                            "enum":[
                               "album2"
                            ],
                            "description":"Album cover back."
                         },
                         {
                            "enum":[
                               "athlete"
                            ],
                            "description":"Athlete image."
                         },
                         {
                            "enum":[
                               "box"
                            ],
                            "description":"VHS box cover."
                         },
                         {
                            "enum":[
                               "celebrity"
                            ],
                            "description":"Celebrity."
                         },
                         {
                            "enum":[
                               "dvd"
                            ],
                            "description":"DVD box cover."
                         },
                         {
                            "enum":[
                               "gallery"
                            ],
                            "description":"Key cast, no set."
                         },
                         {
                            "enum":[
                               "gallery2"
                            ],
                            "description":"Supporting cast, no set."
                         },
                         {
                            "enum":[
                               "generic"
                            ],
                            "description":"Placeholder iconography or photograph."
                         },
                         {
                            "enum":[
                               "group"
                            ],
                            "description":"Over four cast members."
                         },
                         {
                            "enum":[
                               "head"
                            ],
                            "description":"One key cast member."
                         },
                         {
                            "enum":[
                               "head2"
                            ],
                            "description":"One supporting cast member."
                         },
                         {
                            "enum":[
                               "jersey"
                            ],
                            "description":"Sports jersey."
                         },
                         {
                            "enum":[
                               "key"
                            ],
                            "description":"Key cast or show image."
                         },
                         {
                            "enum":[
                               "league"
                            ],
                            "description":"Sports league logo."
                         },
                         {
                            "enum":[
                               "olympic"
                            ],
                            "description":"Olympic image."
                         },
                         {
                            "enum":[
                               "poster"
                            ],
                            "description":"Poster art."
                         },
                         {
                            "enum":[
                               "prod"
                            ],
                            "description":"Key cast on set."
                         },
                         {
                            "enum":[
                               "prod2"
                            ],
                            "description":"Supporting cast on set."
                         },
                         {
                            "enum":[
                               "program"
                            ],
                            "description":"Key cast from program."
                         },
                         {
                            "enum":[
                               "program2"
                            ],
                            "description":"Supporting cast from program."
                         },
                         {
                            "enum":[
                               "set"
                            ],
                            "description":"DVD box set cover."
                         },
                         {
                            "enum":[
                               "showcard"
                            ],
                            "description":"TV series poster."
                         },
                         {
                            "enum":[
                               "team"
                            ],
                            "description":"Sports team logo."
                         },
                         {
                            "enum":[
                               "team2"
                            ],
                            "description":"Sports team secondary logo."
                         },
                         {
                            "enum":[
                               "trailer"
                            ],
                            "description":"Image for trailer, 16:9."
                         },
                         {
                            "enum":[
                               "video"
                            ],
                            "description":"Video box cover."
                         }
                      ]
                   },
                   "caption":{
                      "type":"string",
                      "description":"Image caption."
                   },
                   "credit":{
                      "type":"string",
                      "description":"Person or company credited with taking the photograph."
                   },
                   "owner":{
                      "type":"string",
                      "description":"Legal owner of the image."
                   },
                   "zoom":{
                      "type":"string",
                      "description":"How much of the subject appears in the picture.",
                      "oneOf":[
                         {
                            "enum":[
                               "head"
                            ],
                            "description":"Head or shoulders to top of head."
                         },
                         {
                            "enum":[
                               "torso"
                            ],
                            "description":"Chest or thigh to top of head."
                         },
                         {
                            "enum":[
                               "body"
                            ],
                            "description":"Body fills at least 80% of frame."
                         },
                         {
                            "enum":[
                               "framed"
                            ],
                            "description":"Full body fills 50% to 80% of frame."
                         },
                         {
                            "enum":[
                               "std"
                            ],
                            "description":"Full body fills 50% of frame or less."
                         }
                      ]
                   },
                   "people":{
                      "type":"integer",
                      "description":"Number of people in the image."
                   },
                   "weight":{
                      "type":"number",
                      "description":"Relative importance of the image based on relevance and prominance of cast members in the image. A higher number means a lower weight (fewer cast members and less prominent cast members). A lower number means a greater weight (more cast members and more prominent cast members). Zero (0) means no cast members in the image."
                   },
                   "ref":{
                      "type":"object",
                      "properties":{
                         "id":{
                            "type":"integer",
                            "description": "ID to use to get information about this resource."
                         },
                         "me":{
                            "type":"string",
                            "description": "URI template to use to get information about this resource."
                         },
                         "parent":{
                            "type":"string",
                            "description": "URI template for information about the parent resource."
                         },
                         "children":{
                            "type":"array",
                            "description": "URI templates for child resources."
                         }
                      },
                      "required":[
                         "id",
                         "me"
                      ]
                   }
                },
                "required":[
                   "id",
                   "zoom",
                   "ref"
                ]
             },
             "ref":{
                "type":"object",
                "properties":{
                   "id":{
                      "type":"integer",
                      "description": "ID to use to get information about this resource."
                   },
                   "me":{
                      "type":"string",
                      "description": "URI template to use to get information about this resource."
                   },
                   "parent":{
                      "type":"string",
                      "description": "URI template for information about the parent resource."
                   },
                   "children":{
                      "type":"array",
                      "description": "URI templates for child resources."
                   }
                },
                "required":[
                   "id",
                   "me"
                ]
             },
             "page":{
                "type":"integer",
                "description":"Page number of the response."
             },
             "size":{
                "type":"integer",
                "description":"Number of elements in this page."
             },
             "total":{
                "type":"integer",
                "description":"Total number of elements available."
             }
          },
          "required":[
             "id",
             "ref"
          ]
       }
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# media_image/master [/media_image/master?id={id}]
The original image file, in the original file format. This image is the highest available resolution of an image.

## GET 
This request requires the `media_image` ID for the image, which is returned in responses to the following requests:
+  [data_other](/#reference/other/dataother)
+  [data_airing](/#reference/tv-schedule/dataairing)
+  [data_movie](/#reference/movie/datamovie)
+  [data_series](/#reference/series/dataseries)
+  [data_season](/#reference/season/dataseason)
+  [data_episode](/#reference/episode/dataepisode)
+  [data_name_images/best](/#reference/image/datanameimagesbest) (in this section)
+  [data_name_images/collection](/#reference/image/datanameimagescollection) (in this section)
+  [data_content_images/best](/#reference/image/datacontentimagesbest) (in this section)
+  [data_content_images/collection](/#reference/image/datacontentimagescollection) (in this section)

+ Parameters
  + id (required, integer, `172343929`)
    The `media_image` ID for the image, returned in responses to the following requests:
      +  [data_other](/#reference/other/dataother)
      +  [data_airing](/#reference/tv-schedule/dataairing)
      +  [data_movie](/#reference/movie/datamovie)
      +  [data_series](/#reference/series/dataseries)
      +  [data_season](/#reference/season/dataseason)
      +  [data_episode](/#reference/episode/dataepisode)
      +  [data_name_images/best](/#reference/image/datanameimagesbest) (in this section)
      +  [data_name_images/collection](/#reference/image/datanameimagescollection) (in this section)
      +  [data_content_images/best](/#reference/image/datacontentimagesbest) (in this section)
      +  [data_content_images/collection](/#reference/image/datacontentimagescollection) (in this section)
    
+ Response 200 (application/json)

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# media_image/sized [/media_image/sized?id={id}&aspect={aspect}&size={size}&zoom={zoom}]
Best JPG image available for a person, movie, or TV program, as determined by size, shape, and zoom level of your choice. 

## GET 
This request requires the `media_image` ID for the image, which is returned in responses to the following requests:
+  [data_other](/#reference/other/dataother)
+  [data_airing](/#reference/tv-schedule/dataairing)
+  [data_movie](/#reference/movie/datamovie)
+  [data_series](/#reference/series/dataseries)
+  [data_season](/#reference/season/dataseason)
+  [data_episode](/#reference/episode/dataepisode)
+  [data_name_images/best](/#reference/image/datanameimagesbest) (in this section)
+  [data_name_images/collection](/#reference/image/datanameimagescollection) (in this section)
+  [data_content_images/best](/#reference/image/datacontentimagesbest) (in this section)
+  [data_content_images/collection](/#reference/image/datacontentimagescollection) (in this section)

+ Parameters
  + id (required, string, `172343929`)
    The `media_image` ID for the image, returned in responses to the following requests:
      +  [data_other](/#reference/other/dataother)
      +  [data_airing](/#reference/tv-schedule/dataairing)
      +  [data_movie](/#reference/movie/datamovie)
      +  [data_series](/#reference/series/dataseries)
      +  [data_season](/#reference/season/dataseason)
      +  [data_episode](/#reference/episode/dataepisode)
      +  [data_name_images/best](/#reference/image/datanameimagesbest) (in this section)
      +  [data_name_images/collection](/#reference/image/datanameimagescollection) (in this section)
      +  [data_content_images/best](/#reference/image/datacontentimagesbest) (in this section)
      +  [data_content_images/collection](/#reference/image/datacontentimagescollection) (in this section)

  + aspect (required, string, `3x4`)
    Preferred aspect ratio (width:height) of the image: *3x4* or *4x3*.
    <table>
    <tr><th>Value</th><th>Description</th>
    </tr><tr>
    <td>3x4</td>
    <td><p>A common portrait orientation with 4 pixels in height for every 3 pixels in width. This is the orientation of the iPad and Kindle.</p></td>
    </tr><tr>
    <td>4x3</td>
    <td><p>A common landscape orientation with 3 pixels in height for every 4 pixels in width. This is the orientation of standard definition television.</p></td>
    </tr>
    </table>

  + size (required, string, `large`)
    Preferred height of the image: *small*, *medium*, or *large*. The following table shows the image dimensions for each in both 3:4 and 4:3 aspect ratios.
    <table><tr>
    <th>Size</th>
    <th>Height</th>
    <th>3:4 Width</th>
    <th>4:3 Width</th>
    </tr><tr>
    <td>small</td>
    <td><p>144 pixels</p></td>
    <td><p>108 pixels</p></td>
    <td><p>192 pixels</p></td>
    </tr><tr>
    <td>medium</td>
    <td><p>324 pixels</p></td>
    <td><p>243 pixels</p></td>
    <td><p>432 pixels</p></td>
    </tr><tr>
    <td>large</td>
    <td><p>504 pixels</p></td>
    <td><p>378 pixels</p></td>
    <td><p>672 pixels</p></td>
    </tr></table>

  + zoom (required, string, `std`)
    Preferred zoom level, or closeup level, of the image. Use a value from the following table, listed from closest to most distant. If an image with the preferred zoom level is unavailable, a more distant zoom level is returned.
    <table>
    <tr><th>Value</th><th>Description</th>
    </tr><tr>
    <td>head</td>
    <td><p>Head, or head and shoulders, fills image height.</p></td>
    </tr><tr>
    <td>torso</td>
    <td><p>Upper body fills image height.</p></td>
    </tr><tr>
    <td>body</td>
    <td><p>Body fills at least 80% of the image height.</p></td>
    </tr><tr>
    <td>framed</td>
    <td><p>Full body fills 50% to 80% of the image height.</p></td>
    </tr><tr>
    <td>std</td>
    <td><p>Standard. Full body fills up to 50% of the image height.</p></td>
    </tr>
    </table>

+ Response 200 (application/json)

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# Group Movie
This section documents the calls that return data about a movie.

*Design Note:* The `data_movie` ID for a movie identifies the movie in all of the following API calls.
- [data_movie](/#reference/movie/datamovie)
- [data_delta_movie](/#reference/movie/datadeltamovie)
- [data_movie_aired](/#reference/movie/datamovieaired)
- [data_movie_credits/cast](/#reference/movie/datamoviecreditscast)
- [data_movie_credits/crew](/#reference/movie/datamoviecreditscrew)
- [data_movie_credits/credits](/#reference/movie/datamoviecreditscredits)
- [data_movie_ratings](/#reference/movie/datamovieratings)
- [data_movie_related](/#reference/movie/datamovierelated)
- [data_movie_releases](/#reference/movie/datamoviereleases)
- [data_movie_review](/#reference/movie/datamoviereview)
- [data_movie_synopses/collection](/#reference/movie/datamoviesynopsescollection)
- [data_movie_synopses/best](/#reference/movie/datamoviesynopsesbest)
- [data_movie_synopsis](/#reference/movie/datamoviesynopsis)
- [data_movie_theatricals](/#reference/movie/datamovietheatricals)
- [data_movie_awards](/#reference/awards/datamovieawards) (in the Awards section)
- [data_content_images/best](/#reference/image/datacontentimagesbest) (in the Image section)
- [data_content_images/collection](/#reference/image/datacontentimagescollection) (in the Image section)
- [data_movie_appearances](/#reference/tv-schedule/datamovieappearances) (in the TV Schedule section)

# data_movie [/data_movie?id={id}&in={in}&in2={in2}&in3={in3}]
Returns information about a movie, including editorial content, related social media resources, and Rotten Tomatoes score.

## GET
This request requires the `data_movie` ID for the movie, which is returned in responses to the following requests:
+  [data_airing](/#reference/tv-schedule/dataairing)
+  [data_movie_appearances](/#reference/tv-schedule/datamovieappearances)
+  [discover_all_similar_video/movie](/#reference/recommendations/discoverallsimilarvideomovie)
+  [discover_all_video_by_genre/movie](/#reference/search/discoverallvideobygenremovie)
+  [discover_all_video_by_search/movie](/#reference/search/discoverallvideobysearchmovie)
+  [discover_all_similar_video/content](/#reference/recommendations/discoverallsimilarvideocontent)
+  [discover_all_video_by_genre/content](/#reference/search/discoverallvideobygenrecontent)
+  [discover_all_video_by_search/content](/#reference/search/discoverallvideobysearchcontent)

+ Parameters
  + id (required, integer, `914806985`)
    The `data_movie` ID for the movie, returned in responses to the following requests:
      +  [data_airing](/#reference/tv-schedule/dataairing)
      +  [data_movie_appearances](/#reference/tv-schedule/datamovieappearances)
      +  [discover_all_similar_video/movie](/#reference/recommendations/discoverallsimilarvideomovie)
      +  [discover_all_video_by_genre/movie](/#reference/search/discoverallvideobygenremovie)
      +  [discover_all_video_by_search/movie](/#reference/search/discoverallvideobysearchmovie)
      +  [discover_all_similar_video/content](/#reference/recommendations/discoverallsimilarvideocontent)
      +  [discover_all_video_by_genre/content](/#reference/search/discoverallvideobygenrecontent)
      +  [discover_all_video_by_search/content](/#reference/search/discoverallvideobysearchcontent)
      
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)
```
    {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "title": "movie",
        "description": "Information about a movie.",
        "properties": {
            "id": {
                "type": "integer",
                "description": "Rovi ID for the movie."
            },
            "in": {
                "type": "string",
                "description": "Language code."
            },
            "title": {
                "type": "string",
                "description": "Title of the movie."
            },
            "alts": {
                "type": "object",
                "description": "Alternate titles for the movie.",
                "properties": {
                    "short15": {
                        "type": "string",
                        "description": "Title with up to 15 characters for a grid cell. Creative abbreviations used as needed."
                    },
                    "short30": {
                        "type": "string",
                        "description": "Title with up to 30 characters. Creative abbreviations used as needed."
                    },
                    "short8": {
                        "type": "string",
                        "description": "Title with up to 8 characters for a grid cell. Creative abbreviations used as needed."
                    },
                    "short50": {
                        "type": "string",
                        "description": "Title with up to 50 characters. Creative abbreviations used as needed."
                    },
                    "alias": {
                        "type": "string",
                        "description": "Alternate title by which a show has been distributed."
                    },
                    "alias2": {
                        "type": "string",
                        "description": "Another alternate title by which a show has been distributed."
                    },
                    "alias3": {
                        "type": "string",
                        "description": "Another alternate title by which a show has been distributed."
                    },
                    "alias4": {
                        "type": "string",
                        "description": "Another alternate title by which a show has been distributed."
                    },
                    "subtitle": {
                        "type": "string",
                        "description": "Subtitle of the show."
                    }
                }
            },
            "image": {
                "type": "object",
                "description": "Information about the primary image associated with the movie.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Rovi ID for the image."
                    },
                    "zoom": {
                        "type": "string",
                        "description": "How much of the subject appears in the picture.",
                        "oneOf": [
                            {
                                "enum": [
                                    "head"
                                ],
                                "description": "Head or shoulders to top of head."
                            },
                            {
                                "enum": [
                                    "torso"
                                ],
                                "description": "Chest or thigh to top of head."
                            },
                            {
                                "enum": [
                                    "body"
                                ],
                                "description": "Body fills at least 80% of frame."
                            },
                            {
                                "enum": [
                                    "framed"
                                ],
                                "description": "Full body fills 50% to 80% of frame."
                            },
                            {
                                "enum": [
                                    "std"
                                ],
                                "description": "Full body fills 50% of frame or less."
                            }
                        ]
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "media_image": {
                                "type": "object",
                                "description": "ID to use in a media_image request to get the image.",
                                "properties": {
                                    "id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "id"
                                ]
                            }
                        },
                        "required": [
                            "media_image"
                        ]
                    }
                },
                "required": [
                    "id",
                    "zoom",
                    "links"
                ]
            },
            "year": {
                "type": "integer",
                "description": "Year the movie was first released. Element is omitted if the year is unknown."
            },
            "runtime": {
                "type": "integer",
                "description": "Duration of the movie in seconds. Element is omitted if the duration is unknown."
            },
            "locations": {
                "type": "array",
                "description": "Locations where the movie was filmed.",
                "items": {
                    "type": "string"
                }
            },
            "category": {
                "type": "string",
                "description": "Program category: News, Movie, Music, Sports, Lifestyle, Children's, Other."
            },
            "genres": {
                "type": "array",
                "description": "Genres the movie fits in.",
                "items": {
                    "type": "string"
                }
            },
            "subGenres": {
                "type": "array",
                "description": "Subgenres the movie fits in.",
                "items": {
                    "type": "string"
                }
            },
            "links": {
                "type": "object",
                "properties": {
                    "data_movie": {
                        "type": "object",
                        "description": "ID to use in a data_movie request to get information about the movie.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "data_movie_credits": {
                        "type": "object",
                        "description": "ID to use in a data_movie_credits request to get the movie credits.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "data_movie_ratings": {
                        "type": "object",
                        "description": "ID to use in a data_movie_ratings request to get parental ratings for the movie.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "data_movie_synopses": {
                        "type": "object",
                        "description": "ID to use in a data_movie_synopses request to get plot synopses for the movie.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "data_content_images": {
                        "type": "object",
                        "description": "ID to use in a data_content_images request to get images for the movie.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                },
                "required": [
                    "data_movie",
                    "data_content_images"
                ]
            }
        },
        "required": [
            "id",
            "in",
            "links"
        ]
    
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_delta_movie [/data_delta_movie?day={day}&next={next}]
Returns IDs and Etags for [data_movie](/#reference/movie/datamovie) response data that changed during a single UTC date one to four days ago.

Use this request as a first step toward updating your cached [data_movie](/#reference/movie/datamovie) response data.

## GET
If more than 100 results are available, the response includes a __next__ field to identify the starting point of the next page of results.

+ Parameters
  + day (required, string matching \d{4}-\d{2}-\d{2}, `2015-08-23`)
    A UTC date, specified in YYYY-MM-DD format, that is one to four days before the current UTC date.
  + next (optional, integer)
    The starting point for the next page of results, returned in the __next__ field in a response to this request if another page of results is available.
    
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"movie",
       "properties":{
          "date":{
             "type":"string",
             "description":"UTC date requested."
          },
          "links":{
             "type":"object",
             "data_delta_movie":{
                "type":"object",
                "properties":{
                   "date":{
                      "type":"string",
                      "description":"UTC date requested."
                   },
                   "next":{
                      "type":"string",
                      "description":"Starting point for the next page of results."
                   }
                }
             }
          },
          "type":{
             "type":"string",
             "description":"Type of changed data."
          },
          "size":{
             "type":"integer",
             "description":"Number of items in this response."
          },
          "deltas":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"Rovi ID for data that changed."
                      },
                      "links":{
                         "type":"object",
                         "data_movie":{
                            "type":"object",
                            "properties":{
                               "id":{
                                  "type":"integer",
                                  "description":"ID to use in a data_movie request to get the changed data."
                               }
                            }
                         }
                      },
                      "etag":{
                         "type":"string",
                         "description":"ETag for the latest data for that ID."
                      }
                   }
                }
             ]
          }
       }
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_movie_aired [/data_movie_aired?id={id}&country={country}&page={page}]
Returns the original television broadcast date of a movie in a country.

## GET
Available codes for the **country** parameter are:

| Code | Country                 | Code | Country                          |
| ---- | ----------------------- | ---- | -------------------------------- |
| AD   | Andorra                 | IN   | India                            |
| AI   | Anguilla                | IE   | Ireland                          |
| AG   | Antigua & Barbuda&emsp; | IT   | Italy                            |
| AR   | Argentina               | JM   | Jamaica                          |
| AW   | Aruba                   | LI   | Lichtenstein                     |
| AU   | Australia&emsp;         | LU   | Luxembourg                       |
| AT   | Austria                 | MY   | Malaysia                         |
| BS   | Bahamas                 | MT   | Malta                            |
| BB   | Barbados                | MX   | Mexico                           |
| BE   | Belgium                 | MC   | Monaco                           |
| BM   | Bermuda                 | MS   | Montserrat                       |
| BO   | Bolivia                 | NL   | Netherlands                      |
| BR   | Brazil                  | NI   | Nicaragua                        |
| VG   | British Virgin Islands&emsp; | NO   | Norway                      |
| CA   | Canada                  | PA   | Panama                           |
| CL   | Chile                   | PE   | Peru                             |
| CN   | China                   | PH   | Philippines                      |
| CO   | Colombia                | PL   | Poland                           |
| CR   | Costa Rica              | PT   | Portugal                         |
| CW   | Curacao                 | RU   | Russia                           |
| DK   | Denmark                 | KN   | Saint Kitts & Nevis              |
| DO   | Dominican Republic&emsp; | LC   | Saint Lucia                     |
| EC   | Ecuador                 | MF   | Saint Martin                     |
| SV   | El Salvador&emsp;       | VC   | Saint Vincent and the Grenadines |
| FO   | Faroe Islands&emsp;     | SG   | Singapore                        |
| FI   | Finland                 | ES   | Spain                            |
| FR   | France                  | SE   | Sweden                           |
| DE   | Germany                 | CH   | Switzerland                      |
| GI   | Gibraltar               | TW   | Taiwan                           |
| GD   | Grenada                 | TT   | Trinidad & Tobago                |
| GT   | Guatemala               | TR   | Turkey                           |
| GY   | Guyana                  | TC   | Turks & Caicos                   |
| HN   | Honduras                | GB   | United Kingdom*                  |
| HK   | Hong Kong               | US   | United States                    |
| IS   | Iceland                 | VE   | Venezuela                        |
\* Includes Wales, Scotland, and Northern Ireland.

+ Parameters
  + id (required, integer, `904412159`)
    The `data_movie_aired` ID for the movie, returned in responses to [data_movie](/#reference/movie/datamovie) requests. A `data_movie_aired` ID is the same as the `data_movie` ID for the movie.
  + country (optional, string, `US`)
    Country, stated as one of the uppercase, ISO 3166-1, country codes in the table in the middle panel. If not specified, original broadcast dates for all countries are returned.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
     
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"movie_aired",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the show."
          },
          "aired":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "properties":{
                      "country":{
                         "type":"string",
                         "description":"Country."
                      },
                      "date":{
                         "type":"string",
                         "description":"Date the show was first broadcast in the country."
                      }
                   },
                   "required":[
                      "country",
                      "date"
                   ]
                }
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_episode":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"ID to use in a data_episode request to return information about the episode."
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_episode_aired":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"ID to use in a data_episode_aired request to return the date the episode was first broadcast."
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_movie":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"ID to use in a data_movie request to return information about the movie."
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_movie_aired":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"ID to use in a data_movie_aired request to return the date the movie was first broadcast."
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_other":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"ID to use in a data_other request to return information about the program."
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_other_aired":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"ID to use in a data_other_aired request to return the date the program was first broadcast."
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             }
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "aired",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_movie_credits/cast [/data_movie_credits/cast?id={id}&in={in}&in2={in2}&in3={in3}&page={page}&by={by}] 
Returns cast credits for a movie.

## GET
This request requires the `data_movie_credits` ID for the movie, which is returned in responses to the [data_movie](/#reference/movie/datamovie) request. A `data_movie_credits` ID is the same as the `data_movie` ID for the movie.

+ Parameters
  + id (required, integer, `914806985`)
    The `data_movie_credits` ID for the movie, returned in responses to the [data_movie](/#reference/movie/datamovie) request. A `data_movie_credits` ID is the same as the `data_movie` ID for the movie.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
  + by (optional, string, `role`)
    Response field or object.field to sort by. Child fields must be single-valued, that is, not within an array.
      +  For an ascending sort, replace {by} with the field name like this: __role__ or __person.alts.last__. For a descending sort, precede the field name with a minus (-) sign like this: __-role__.
      +  To start with items that contain a particular field, replace {by} with a field-equals-not-null, like this: __person.image=!null__. To start with items that are missing a particular field, specify a field-equals-null, like this: __person.image=null__. 
      +  To start with items that contain a particular value in a top-level field, replace {by} with field-equals-value, like this: __role=Tony Stark__. To end with items that contain a particular value, precede the value with an exclamation like this: __role=!Tony Stark__.
      +  Combine alpha and numeric sorts in a comma-separated list in left-to-right priority.
    
+ Response 200 (application/json)
```
    {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "title": "movie_credits",
        "description": "Credits for a movie.",
        "properties": {
            "id": {
                "type": "integer",
                "description": "Rovi ID for the movie."
            },
            "credits": {
                "type": "array",
                "items": [
                    {
                        "type": "object",
                        "description": "Credits for the movie.",
                        "properties": {
                            "in": {
                                "type": "string"
                            },
                            "role": {
                                "type": "string",
                                "description": "Character portrayed."
                            },
                            "credit": {
                                "type": "string",
                                "description": "The credit."
                            },
                            "type": {
                                "type": "string",
                                "description": "Category of the credit.",
                                "oneOf": [
                                    {
                                        "enum": [
                                            "actor"
                                        ],
                                        "description": "Actor."
                                    },
                                    {
                                        "enum": [
                                            "company"
                                        ],
                                        "description": "Production company."
                                    },
                                    {
                                        "enum": [
                                            "creator"
                                        ],
                                        "description": "Creator."
                                    },
                                    {
                                        "enum": [
                                            "director"
                                        ],
                                        "description": "Director."
                                    },
                                    {
                                        "enum": [
                                            "producer"
                                        ],
                                        "description": "Producer."
                                    },
                                    {
                                        "enum": [
                                            "studio"
                                        ],
                                        "description": "Studio."
                                    },
                                    {
                                        "enum": [
                                            "subject"
                                        ],
                                        "description": "Person who is the subject of the movie or program."
                                    },
                                    {
                                        "enum": [
                                            "writer"
                                        ],
                                        "description": "Writer."
                                    }
                                ]
                            },
                            "isCast": {
                                "type": "boolean",
                                "description": "Whether the credit is a cast credit: true or false."
                            },
                            "person": {
                                "type": "object",
                                "description": "Information about the person who earned the credit.",
                                "properties": {
                                    "id": {
                                        "type": "integer",
                                        "description": "Rovi ID for the person."
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "Name of the person."
                                    },
                                    "alts": {
                                        "type": "object",
                                        "properties": {
                                            "first": {
                                                "type": "string",
                                                "description": "First name of the person."
                                            },
                                            "last": {
                                                "type": "string",
                                                "description": "Last name of the person."
                                            }
                                        }
                                    },
                                    "links": {
                                        "type": "object",
                                        "properties": {
                                            "data_person": {
                                                "type": "object",
                                                "description": "ID to use in a data_person request to get details about the person.",
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "id"
                                                ]
                                            }
                                        },
                                        "required": [
                                            "data_person"
                                        ]
                                    }
                                },
                                "required": [
                                    "id",
                                    "name",
                                    "links"
                                ]
                            },
                            "organization": {
                                "type": "object",
                                "description": "Information about the company that earned the credit.",
                                "properties": {
                                    "id": {
                                        "type": "integer",
                                        "description": "Rovi ID for the company that earned the credit."
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "Name of the company."
                                    },
                                    "links": {
                                        "type": "object",
                                        "properties": {
                                            "data_organization": {
                                                "type": "object",
                                                "description": "ID to use in a data_organization request to get details about the company.",
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "id"
                                                ]
                                            }
                                        },
                                        "required": [
                                            "data_organization"
                                        ]
                                    }
                                },
                                "required": [
                                    "id",
                                    "links"
                                ]
                            }
                        },
                        "required": [
                            "in",
                            "credit"
                        ]
                    }
                ]
            },
            "links": {
                "type": "object",
                "properties": {
                    "data_movie_credits": {
                        "type": "object",
                        "description": "ID to use in a data_movie_credits request to get credits for the movie.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "data_movie": {
                        "type": "object",
                        "description": "ID to use in a data_movie request to get information about the movie.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                },
                "required": [
                    "data_movie_credits",
                    "data_movie"
                ]
            },
            "page": {
                "type": "integer",
                "description": "Pagination index of the request."
            },
            "size": {
                "type": "integer",
                "description": "Number of elements returned."
            },
            "total": {
                "type": "integer",
                "description": "Total number of elements."
            }
        },
        "required": [
            "id",
            "links"
        ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_movie_credits/crew [/data_movie_credits/crew?id={id}&in={in}&in2={in2}&in3={in3}&page={page}&by={by}] 
Returns crew credits for a movie.

## GET
This request requires the `data_movie_credits` ID for the movie, which is returned in responses to the [data_movie](/#reference/movie/datamovie) request. A `data_movie_credits` ID is the same as the `data_movie` ID for the movie.

+ Parameters
  + id (required, integer, `914806985`)
    The `data_movie_credits` ID for the movie, returned in responses to the [data_movie](/#reference/movie/datamovie) request. A `data_movie_credits` ID is the same as the `data_movie` ID for the movie.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
  + by (optional, string, `type`)
    Response field or object.field to sort by. Child fields must be single-valued, that is, not within an array.
      +  For an ascending sort, replace {by} with the field name like this: __credit__ or __person.alts.last__. For a descending sort, precede the field name with a minus (-) sign like this: __-credit__.
      +  To start with items that contain a particular field, replace {by} with a field-equals-not-null, like this: __person.image=!null__. To start with items that are missing a particular field, specify a field-equals-null, like this: __type=null__. 
      +  To start with items that contain a particular value in a top-level field, replace {by} with field-equals-value, like this: __type=director__. To end with items that contain a particular value, precede the value with an exclamation like this: __type=!company__.
      +  Combine alpha and numeric sorts in a comma-separated list in left-to-right priority.
         
+ Response 200 (application/json)
```
    {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "title": "movie_credits",
        "description": "Credits for a movie.",
        "properties": {
            "id": {
                "type": "integer",
                "description": "Rovi ID for the movie."
            },
            "credits": {
                "type": "array",
                "items": [
                    {
                        "type": "object",
                        "description": "Credits for the movie.",
                        "properties": {
                            "in": {
                                "type": "string"
                            },
                            "role": {
                                "type": "string",
                                "description": "Character portrayed."
                            },
                            "credit": {
                                "type": "string",
                                "description": "The credit."
                            },
                            "type": {
                                "type": "string",
                                "description": "Category of the credit.",
                                "oneOf": [
                                    {
                                        "enum": [
                                            "actor"
                                        ],
                                        "description": "Actor."
                                    },
                                    {
                                        "enum": [
                                            "company"
                                        ],
                                        "description": "Production company."
                                    },
                                    {
                                        "enum": [
                                            "creator"
                                        ],
                                        "description": "Creator."
                                    },
                                    {
                                        "enum": [
                                            "director"
                                        ],
                                        "description": "Director."
                                    },
                                    {
                                        "enum": [
                                            "producer"
                                        ],
                                        "description": "Producer."
                                    },
                                    {
                                        "enum": [
                                            "studio"
                                        ],
                                        "description": "Studio."
                                    },
                                    {
                                        "enum": [
                                            "subject"
                                        ],
                                        "description": "Person who is the subject of the movie or program."
                                    },
                                    {
                                        "enum": [
                                            "writer"
                                        ],
                                        "description": "Writer."
                                    }
                                ]
                            },
                            "isCast": {
                                "type": "boolean",
                                "description": "Whether the credit is a cast credit: true or false."
                            },
                            "person": {
                                "type": "object",
                                "description": "Information about the person who earned the credit.",
                                "properties": {
                                    "id": {
                                        "type": "integer",
                                        "description": "Rovi ID for the person."
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "Name of the person."
                                    },
                                    "alts": {
                                        "type": "object",
                                        "properties": {
                                            "first": {
                                                "type": "string",
                                                "description": "First name of the person."
                                            },
                                            "last": {
                                                "type": "string",
                                                "description": "Last name of the person."
                                            }
                                        }
                                    },
                                    "links": {
                                        "type": "object",
                                        "properties": {
                                            "data_person": {
                                                "type": "object",
                                                "description": "ID to use in a data_person request to get details about the person.",
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "id"
                                                ]
                                            }
                                        },
                                        "required": [
                                            "data_person"
                                        ]
                                    }
                                },
                                "required": [
                                    "id",
                                    "name",
                                    "links"
                                ]
                            },
                            "organization": {
                                "type": "object",
                                "description": "Information about the company that earned the credit.",
                                "properties": {
                                    "id": {
                                        "type": "integer",
                                        "description": "Rovi ID for the company that earned the credit."
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "Name of the company."
                                    },
                                    "links": {
                                        "type": "object",
                                        "properties": {
                                            "data_organization": {
                                                "type": "object",
                                                "description": "ID to use in a data_organization request to get details about the company.",
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "id"
                                                ]
                                            }
                                        },
                                        "required": [
                                            "data_organization"
                                        ]
                                    }
                                },
                                "required": [
                                    "id",
                                    "links"
                                ]
                            }
                        },
                        "required": [
                            "in",
                            "credit"
                        ]
                    }
                ]
            },
            "links": {
                "type": "object",
                "properties": {
                    "data_movie_credits": {
                        "type": "object",
                        "description": "ID to use in a data_movie_credits request to get credits for the movie.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "data_movie": {
                        "type": "object",
                        "description": "ID to use in a data_movie request to get information about the movie.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                },
                "required": [
                    "data_movie_credits",
                    "data_movie"
                ]
            },
            "page": {
                "type": "integer",
                "description": "Pagination index of the request."
            },
            "size": {
                "type": "integer",
                "description": "Number of elements returned."
            },
            "total": {
                "type": "integer",
                "description": "Total number of elements."
            }
        },
        "required": [
            "id",
            "links"
        ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_movie_credits/credits [/data_movie_credits/credits?id={id}&in={in}&in2={in2}&in3={in3}&page={page}&by={by}] 
Returns both cast and crew credits for movie.

## GET
This request requires the `data_movie_credits` ID for the movie, which is returned in responses to the [data_movie](/#reference/movie/datamovie) request. A `data_movie_credits` ID is the same as the `data_movie` ID for the movie.

+ Parameters
  + id (required, integer, `914806985`)
    The `data_movie_credits` ID for the movie, returned in responses to the [data_movie](/#reference/movie/datamovie) request. A `data_movie_credits` ID is the same as the `data_movie` ID for the movie.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
  + by (optional, string, `credit`)
    Response field or object.field to sort by. Child fields must be single-valued, that is, not within an array.
      +  For an ascending sort, replace {by} with the field name like this: __credit__ or __person.alts.last__. For a descending sort, precede the field name with a minus (-) like this: __-credit__.
      +  To start with items that contain a particular field, replace {by} with field-equals-not-null, like this: __person.image=!null__. To start with items that are missing a particular field, specify field-equals-null, like this: __role=null__. 
      +  To start with items that contain a particular value in a top-level field, replace {by} with field-equals-value, like this: __type=director__. To end with items that contain a particular value, precede the value with an exclamation like this: __type=!company__.
      +  Combine alpha and numeric sorts in a comma-separated list in left-to-right priority.
    
+ Response 200 (application/json)
```
    {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "title": "movie_credits",
        "description": "Credits for a movie.",
        "properties": {
            "id": {
                "type": "integer",
                "description": "Rovi ID for the movie."
            },
            "credits": {
                "type": "array",
                "items": [
                    {
                        "type": "object",
                        "description": "Credits for the movie.",
                        "properties": {
                            "in": {
                                "type": "string"
                            },
                            "role": {
                                "type": "string",
                                "description": "Character portrayed."
                            },
                            "credit": {
                                "type": "string",
                                "description": "The credit."
                            },
                            "type": {
                                "type": "string",
                                "description": "Category of the credit.",
                                "oneOf": [
                                    {
                                        "enum": [
                                            "actor"
                                        ],
                                        "description": "Actor."
                                    },
                                    {
                                        "enum": [
                                            "company"
                                        ],
                                        "description": "Production company."
                                    },
                                    {
                                        "enum": [
                                            "creator"
                                        ],
                                        "description": "Creator."
                                    },
                                    {
                                        "enum": [
                                            "director"
                                        ],
                                        "description": "Director."
                                    },
                                    {
                                        "enum": [
                                            "producer"
                                        ],
                                        "description": "Producer."
                                    },
                                    {
                                        "enum": [
                                            "studio"
                                        ],
                                        "description": "Studio."
                                    },
                                    {
                                        "enum": [
                                            "subject"
                                        ],
                                        "description": "Person who is the subject of the movie or program."
                                    },
                                    {
                                        "enum": [
                                            "writer"
                                        ],
                                        "description": "Writer."
                                    }
                                ]
                            },
                            "isCast": {
                                "type": "boolean",
                                "description": "Whether the credit is a cast credit: true or false."
                            },
                            "person": {
                                "type": "object",
                                "description": "Information about the person who earned the credit.",
                                "properties": {
                                    "id": {
                                        "type": "integer",
                                        "description": "Rovi ID for the person."
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "Name of the person."
                                    },
                                    "alts": {
                                        "type": "object",
                                        "properties": {
                                            "first": {
                                                "type": "string",
                                                "description": "First name of the person."
                                            },
                                            "last": {
                                                "type": "string",
                                                "description": "Last name of the person."
                                            }
                                        }
                                    },
                                    "links": {
                                        "type": "object",
                                        "properties": {
                                            "data_person": {
                                                "type": "object",
                                                "description": "ID to use in a data_person request to get details about the person.",
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "id"
                                                ]
                                            }
                                        },
                                        "required": [
                                            "data_person"
                                        ]
                                    }
                                },
                                "required": [
                                    "id",
                                    "name",
                                    "links"
                                ]
                            },
                            "organization": {
                                "type": "object",
                                "description": "Information about the company that earned the credit.",
                                "properties": {
                                    "id": {
                                        "type": "integer",
                                        "description": "Rovi ID for the company that earned the credit."
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "Name of the company."
                                    },
                                    "links": {
                                        "type": "object",
                                        "properties": {
                                            "data_organization": {
                                                "type": "object",
                                                "description": "ID to use in a data_organization request to get details about the company.",
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "id"
                                                ]
                                            }
                                        },
                                        "required": [
                                            "data_organization"
                                        ]
                                    }
                                },
                                "required": [
                                    "id",
                                    "links"
                                ]
                            }
                        },
                        "required": [
                            "in",
                            "credit"
                        ]
                    }
                ]
            },
            "links": {
                "type": "object",
                "properties": {
                    "data_movie_credits": {
                        "type": "object",
                        "description": "ID to use in a data_movie_credits request to get credits for the movie.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "data_movie": {
                        "type": "object",
                        "description": "ID to use in a data_movie request to get information about the movie.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                },
                "required": [
                    "data_movie_credits",
                    "data_movie"
                ]
            },
            "page": {
                "type": "integer",
                "description": "Pagination index of the request."
            },
            "size": {
                "type": "integer",
                "description": "Number of elements returned."
            },
            "total": {
                "type": "integer",
                "description": "Total number of elements."
            }
        },
        "required": [
            "id",
            "links"
        ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_movie_ratings [/data_movie_ratings?id={id}&country={country}] 
Returns parental ratings for a movie.

## GET
This request requires the `data_movie_ratings` ID for the movie, which is returned in responses to the [data_movie](/#reference/movie/datamovie) request. A `data_movie_ratings` ID is the same as the `data_movie` ID for the movie.

+ Parameters
  + id (required, integer, `914806985`)
    The `data_movie_ratings` ID for the movie, returned in responses to the [data_movie](/#reference/movie/datamovie) request. A `data_movie_ratings` ID is the same as the `data_movie` ID for the movie.
  + country (required, string, `US`)
    Country for which you want parental ratings, specified as one of the following ISO 3166-1 alpha-2 codes:
    <table><tr>
    <th>Code</th><th>Country</th><th>Code</th><th>Country</th>
    </tr><tr>
    <td>AR</td><td><p>Argentina</p></td><td>MX</td><td><p>Mexico</p></td>
    </tr><tr>
    <td>AT</td><td><p>Austria</p></td><td>NL</td><td><p>Netherlands</p></td>
    </tr><tr>
    <td>BE</td><td><p>Belgium</p></td><td>NO</td><td><p>Norway</p></td>
    </tr><tr>
    <td>BR</td><td><p>Brazil</p></td><td>PE</td><td><p>Peru</p></td>
    </tr><tr>
    <td>CA</td><td><p>Canada</p></td><td>PL</td><td><p>Poland</p></td>
    </tr><tr>
    <td>CL</td><td><p>Chile</p></td><td>PT</td><td><p>Portugal</p></td>
    </tr><tr>
    <td>CO</td><td><p>Colombia</p></td><td>ES</td><td><p>Spain</p></td>
    </tr><tr>
    <td>DK</td><td><p>Denmark</p></td><td>SE</td><td><p>Sweden</p></td>
    </tr><tr>
    <td>FI</td><td><p>Finland</p></td><td>CH</td><td><p>Switzerland</p></td>
    </tr><tr>
    <td>FR</td><td><p>France</p></td><td>TC</td><td><p>Turks & Caicos</p></td>
    </tr><tr>
    <td>DE</td><td><p>Germany</p></td><td>GB</td><td><p>United Kingdom*</p></td>
    </tr><tr>
    <td>IE</td><td><p>Ireland</p></td><td>US</td><td><p>United States</p></td>
    </tr><tr>
    <td>IT</td><td><p>Italy</p></td><td>VE</td><td><p>Venezuela</p></td>
    </tr></table><br/>*Includes Wales, Scotland, and Northern Ireland.
    
+ Response 200 (application/json)
```
    {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "title": "movie_ratings",
        "description": "Parental ratings for a movie.",
        "properties": {
            "id": {
                "type": "integer",
                "description": "Rovi ID for the movie."
            },
            "ratings": {
                "type": "array",
                "items": [
                    {
                        "type": "object",
                        "description": "Parental rating for the movie.",
                        "properties": {
                            "in": {
                                "type": "string",
                                "description": "Language code."
                            },
                            "type": {
                                "type": "string",
                                "description": "Source of the parental rating."
                            },
                            "rating": {
                                "type": "string",
                                "description": "The parental rating."
                            },
                            "medium": {
                                "type": "string",
                                "description": "Media that this rating applies to.",
                                "oneOf": [
                                    {
                                        "enum": [
                                            "movie"
                                        ],
                                        "description": "Theatrical film."
                                    },
                                    {
                                        "enum": [
                                            "tv"
                                        ],
                                        "description": "Television."
                                    },
                                    {
                                        "enum": [
                                            "stars"
                                        ],
                                        "description": "TV series, qualitative rating from 1 to 4 stars. Rated by Rovi."
                                    },
                                    {
                                        "enum": [
                                            "age"
                                        ],
                                        "description": "TV series, youngest appropriate age rating. Rated by Rovi."
                                    },
                                    {
                                        "enum": [
                                            "family"
                                        ],
                                        "description": "TV series, family friendly rating on a scale of 0 to 10."
                                    }
                                ]
                            },
                            "countries": {
                                "type": "array",
                                "description": "Countries the parental rating applies to.",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "reasons": {
                                "type": "array",
                                "description": "Reasons for the rating.",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "subrating": {
                                "type": "string",
                                "description": "Content warning labels that apply to the program."
                            }
                        },
                        "required": [
                            "in",
                            "type",
                            "rating"
                        ]
                    }
                ]
            },
            "links": {
                "type": "object",
                "properties": {
                    "data_movie_ratings": {
                        "type": "object",
                        "description": "ID to use in a data_movie_ratings request to get parental ratings for the movie.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "data_movie": {
                        "type": "object",
                        "description": "ID to use in a data_movie request to get information about the movie.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                },
                "required": [
                    "data_movie_ratings",
                    "data_movie"
                ]
            },
            "page": {
                "type": "integer",
                "description": "Pagination index of the request."
            },
            "size": {
                "type": "integer",
                "description": "Number of elements returned."
            },
            "total": {
                "type": "integer",
                "description": "Total number of elements."
            }
        },
        "required": [
            "id",
            "links"
        ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_movie_related [/data_movie_related?id={id}&relation={relation}&in={in}&in2={in2}&in3={in3}&page={page}]
Returns titles of related programs and movies:
+ series in
+ similar to
+ related to
+ spoofed or spoofed by
+ remake of or remade as
+ features or featured in
+ re-edit of or re-edited by
+ spin-off of or spun-off as
+ preceeded by or preceeded
+ influenced by or influenced

## GET
This request requires the `data_movie_related` ID for the movie, which is returned in responses to [data_movie](/#reference/movie/datamovie) requests. A `data_movie_related` ID is the same as the `data_movie` ID for the movie.

+ Parameters
  + id (required, integer, `915165185`)
    The `data_movie_related` ID for the movie, returned in responses to [data_movie](/#reference/movie/datamovie) requests. A `data_movie_related` ID is the same as the `data_movie` ID for the movie.
  + relation (optional, string, `similar`)
    The relationship, specified as one of the following. Leave this value empty to return titles for all relationships.
      +  featured
      +  influenced
      +  predecessor
      +  re-edit
      +  related
      +  remake
      +  similar
      +  series
      +  spin-off
      +  spoof
      
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.

+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"movie_related",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the movie."
          },
          "related":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "properties":{
                      "relation":{
                         "type":"string",
                         "description":"Type of relation.",
                         "oneOf":[
                            {
                               "enum":[
                                  "featured"
                               ],
                               "description":"Features or featured in."
                            },
                            {
                               "enum":[
                                  "influenced"
                               ],
                               "description":"Influenced by or influenced."
                            },
                            {
                               "enum":[
                                  "related"
                               ],
                               "description":"Related to."
                            },
                            {
                               "enum":[
                                  "predecessor"
                               ],
                               "description":"Preceeded by or preceeded."
                            },
                            {
                               "enum":[
                                  "re-edit"
                               ],
                               "description":"Re-edit of or re-edited by."
                            },
                            {
                               "enum":[
                                  "remake"
                               ],
                               "description":"Remake of or remade as."
                            },
                            {
                               "enum":[
                                  "similar"
                               ],
                               "description":"Similar to."
                            },
                            {
                               "enum":[
                                  "series"
                               ],
                               "description":"Series in."
                            },
                            {
                               "enum":[
                                  "spin-off"
                               ],
                               "description":"Spin-off of or spun-off as."
                            },
                            {
                               "enum":[
                                  "spoof"
                               ],
                               "description":"Spoofed or spoofed by."
                            }
                         ]
                      },
                      "content":{
                         "type":"object",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the show."
                            },
                            "type":{
                               "type":"string",
                               "description":"Type of show.",
                               "oneOf":[
                                  {
                                     "enum":[
                                        "movie"
                                     ],
                                     "description":"Movie."
                                  },
                                  {
                                     "enum":[
                                        "season"
                                     ],
                                     "description":"Season in a TV series."
                                  },
                                  {
                                     "enum":[
                                        "episode"
                                     ],
                                     "description":"Episode in a TV series."
                                  },
                                  {
                                     "enum":[
                                        "series"
                                     ],
                                     "description":"TV series."
                                  },
                                  {
                                     "enum":[
                                        "other"
                                     ],
                                     "description":"A program other than a movie or TV series."
                                  }
                               ]
                            },
                            "in":{
                               "type":"string",
                               "description":"Language of the show."
                            },
                            "title":{
                               "type":"string",
                               "description":"Title of the show."
                            },
                            "image":{
                               "type":"object",
                               "description":"Information about the primary image associated with the show.",
                               "properties":{
                                  "id":{
                                     "type":"integer",
                                     "description":"Rovi ID for the primary image associated with the show."
                                  },
                                  "zoom":{
                                     "type":"string",
                                     "description":"How much of the subject appears in the picture. A value here indicates a closer zoom level may be available from the media_image request. A missing value indicates a std zoom.",
                                     "oneOf":[
                                        {
                                           "enum":[
                                              "head"
                                           ],
                                           "description":"Head or shoulders to top of head."
                                        },
                                        {
                                           "enum":[
                                              "torso"
                                           ],
                                           "description":"Chest or thigh to top of head."
                                        },
                                        {
                                           "enum":[
                                              "body"
                                           ],
                                           "description":"Body fills at least 80% of frame."
                                        },
                                        {
                                           "enum":[
                                              "framed"
                                           ],
                                           "description":"Full body fills 50% to 80% of frame."
                                        },
                                        {
                                           "enum":[
                                              "std"
                                           ],
                                           "description":"Full body fills 50% of frame or less."
                                        }
                                     ]
                                  },
                                  "links":{
                                     "type":"object",
                                     "properties":{
                                        "media_image":{
                                           "type":"object",
                                           "description":"ID to use in a media_image request to get the primary image for the show.",
                                           "properties":{
                                              "id":{
                                                 "type":"integer"
                                              }
                                           },
                                           "required":[
                                              "id"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "media_image"
                                     ]
                                  }
                               },
                               "required":[
                                  "id",
                                  "zoom",
                                  "links"
                               ]
                            },
                            "year":{
                               "type":"integer",
                               "description":"Year the show was released."
                            },
                            "synonyms":{
                               "type":"array",
                               "description":"Other IDs that have been assigned to the show.",
                               "items":[
                                  {
                                     "type":"object",
                                     "properties":{
                                        "program":{
                                           "type":"integer",
                                           "description":"Cosmo ID."
                                        },
                                        "iguide":{
                                           "type":"integer",
                                           "description":"iGuide ID."
                                        },
                                        "amg":{
                                           "type":"string",
                                           "description":"AMG ID."
                                        },
                                        "eidr":{
                                           "type":"integer",
                                           "description":"EIDR ID."
                                        },
                                        "in":{
                                           "type":"string",
                                           "description":"Language of the show."
                                        },
                                        "title":{
                                           "type":"Title of the show."
                                        }
                                     },
                                     "required":[
                                        "in",
                                        "title"
                                     ]
                                  }
                               ]
                            },
                            "links":{
                               "type":"object",
                               "properties":{
                                  "data_content":{
                                     "type":"object",
                                     "description":"ID to use in a data_content_images request to get images for the related show.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  },
                                  "data_movie":{
                                     "type":"object",
                                     "description":"ID to use in a data_movie request to get information about the related movie.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  },
                                  "data_series":{
                                     "type":"object",
                                     "description":"ID to use in a data_series request to get information about the related series.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  },
                                  "data_season":{
                                     "type":"object",
                                     "description":"ID to use in a data_season request to get information about the related series season.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  },
                                  "data_episode":{
                                     "type":"object",
                                     "description":"ID to use in a data_episode request to get information about the related episode.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  },
                                  "data_other":{
                                     "type":"object",
                                     "description":"ID to use in a data_other request to get information about the related program.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  }
                               },
                               "required":[
                                  "data_content"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "type",
                            "in",
                            "title",
                            "links"
                         ]
                      }
                   },
                   "required":[
                      "relation",
                      "content"
                   ]
                }
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_movie":{
                   "type":"object",
                   "description":"ID to use in a data_movie request to get information about the movie.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_movie_related":{
                   "type":"object",
                   "description":"ID to use in a data_movie_related request to get shows related to the movie.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_movie",
                "data_movie_related"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_movie_releases [/data_movie_releases?id={id}&in={in}&in2={in2}&in3={in3}&page={page}]
Returns information about releases of a movie. Releases differ in language, content, or title.

## GET
This request requires the `data_movie_releases` ID for the movie, which is returned in responses to [data_movie](/#reference/movie/datamovie) requests. A `data_movie_releases` ID is the same as the `data_movie` ID for the movie.

+ Parameters
  + id (required, integer, `914806985`)
    The `data_movie_releases` ID for the movie, returned in responses to [data_movie](/#reference/movie/datamovie) requests. A `data_movie_releases` ID is the same as the `data_movie` ID for the movie.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.

+ Response 200 (application/json)

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_movie_review [/data_movie_review?id={id}&in={in}&in2={in2}&in3={in3}]
Returns a professional review of a movie.

## GET
This request requires the `data_movie_review` ID for the movie, which is returned in responses to [data_movie](/#reference/movie/datamovie) requests. A `data_movie_review` ID is the same as the `data_movie` ID for the movie.

+ Parameters
  + id (required, integer, `905191267`)
    The `data_movie_review` ID for the movie, returned in responses to [data_movie](/#reference/movie/datamovie) requests. A `data_movie_review` ID is the same as the `data_movie` ID for the movie.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"movie_review",
       "description":"A professional review of a movie.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the movie."
          },
          "review":{
             "type":"object",
             "description":"The review and information about the review.",
             "properties":{
                "in":{
                   "type":"string",
                   "description":"Language of the review."
                },
                "text":{
                   "type":"string",
                   "description":"The review."
                },
                "authors":{
                   "type":"array",
                   "items":[
                      {
                         "type":"object",
                         "description":"Authors of the review.",
                         "properties":{
                            "first":{
                               "type":"string",
                               "description":"First name of an author of the review."
                            },
                            "last":{
                               "type":"string",
                               "description":"Last name of an author of the review."
                            }
                         },
                         "required":[
                            "first",
                            "last"
                         ]
                      }
                   ]
                }
             },
             "required":[
                "in",
                "text",
                "authors"
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_movie_review":{
                   "type":"object",
                   "description":"ID to use in a data_movie_review request to get a review of the movie.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_movie":{
                   "type":"object",
                   "description":"ID to use in a data_movie request to get information about the movie.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_movie_review",
                "data_movie"
             ]
          }
       },
       "required":[
          "id",
          "review",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_movie_synopses/collection [/data_movie_synopses/collection?id={id}&in={in}&in2={in2}&in3={in3}]
Returns a range of synopses of a movie.

## GET
This request requires the `data_movie_synopses` ID for the movie, which is returned in responses to [data_movie](/#reference/movie/datamovie) requests. The `data_movie_synopses` ID is the same as the `data_movie` ID for the movie.

+ Parameters
  + id (required, integer, `914806985`)
    The `data_movie_synopses` ID for the movie, returned in responses to the following requests.  The `data_movie_synopses` ID is the same as the `data_movie` ID for the movie.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_movie_synopses/best [/data_movie_synopses/best?id={id}&length={length}&length2={length2}&length3={length3}&length4={length4}&in={in}&in2={in2}&in3={in3}]
Returns the best available synopsis of a movie, based on type:
+  `long` &mdash; Straightforward, objective description of the movie in up to 420 characters.
+  `short` &mdash; A shorter version of the "long" description.
+  `plain` &mdash; A straightforward description without credits that is never critical.
+  `extended` &mdash; A more detailed description than the "long" description, up to 2000 characters.

## GET
This request requires the `data_movie_synopses` ID for the movie, which is returned in responses to [data_movie](/#reference/movie/datamovie) requests. The `data_movie_synopses` ID is the same as the `data_movie` ID for the movie.

+ Parameters
  + id (required, integer, `914806985`)
    The `data_movie_synopses` ID for the movie, returned in responses to the following requests.  The `data_movie_synopses` ID is the same as the `data_movie` ID for the movie.
  + length (required, string enum, `short`)
    First choice for type of description:
    <table>
    <tr><th>Value</th><th>Description</th>
    </tr><tr>
    <td>long</td><td><p>Straightforward, objective description of the movie in up to 420 characters.</p></td>
    </tr><tr>
    <td>short</td><td><p>A shorter version of the "long" description.</p></td>
    </tr><tr>
    <td>plain</td><td><p>A straightforward description without credits that is never critical.</p></td>
    </tr><tr>
    <td>extended</td><td><p>A more detailed description than the "long" description, up to 2000 characters.</p></td>
    </tr>
    </table>
    
  + length2 (optional, string enum, `long`)
    Second choice for type of description.
  + length3 (optional, string enum, `plain`)
    Third choice for type of description.
  + length4 (optional, string enum, `extended`)
    Fourth choice for type of description.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_movie_synopsis [/data_movie_synopsis?id={id}&in={in}&in2={in2}&in3={in3}]
Returns a synopsis of a movie.

__NOTE: This request is now deprecated.__ Use one of the `data_movie_synopses` requests instead:
+  [data_movie_synopses/best](/#reference/movie/datamoviesynopsesbest)
+  [data_movie_synopses/collection](/#reference/movie/datamoviesynopsescollection)

## GET
This request requires the `data_movie_synopses` ID for the movie, which is returned in responses to [data_movie](/#reference/movie/datamovie) requests. A `data_movie_synopses` ID is the same as the `data_movie` ID for the movie.

+ Parameters
  + id (required, integer, `914806985`)
    The `data_movie_synopses` ID for the movie, returned in responses to [data_movie](/#reference/movie/datamovie) requests. A `data_movie_synopses` ID is the same as the `data_movie` ID for the movie.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)
```
    {
    
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "title": "movie_synopses",
        "description": "Synopses of a movie.",
        "properties": {
            "id": {
                "type": "integer",
                "description": "Rovi ID for the movie."
            },
            "synopsis": {
                "type": "object",
                "description": "Synopsis of the movie.",
                "properties": {
                    "length": {
                        "type": "string",
                        "description": "Type of synopsis.",
                        "oneOf": [
                            {
                                "enum": [
                                    "long"
                                ],
                                "description": "Straightforward, objective plot synopsis with up to 420 characters."
                            },
                            {
                                "enum": [
                                    "short"
                                ],
                                "description": "Straightforward, objective plot synopsis with up to 150 characters."
                            },
                            {
                                "enum": [
                                    "plain"
                                ],
                                "description": "Straightforward description, without credits, that is never critical."
                            },
                            {
                                "enum": [
                                    "extended"
                                ],
                                "description": "Straightforward, objective plot synopsis with up to 2000 characters."
                            },
                            {
                                "enum": [
                                    "source"
                                ],
                                "description": "Synopsis supplied by the channel on which the show is broadcast."
                            },
                            {
                                "enum": [
                                    "review"
                                ],
                                "description": "Movie review."
                            }
                        ]
                    },
                    "in": {
                        "type": "string",
                        "description": "Language of the synopsis."
                    },
                    "synopsis": {
                        "type": "string",
                        "description": "Synopsis of the program."
                    },
                    "cuts": {
                        "type": "string",
                        "description": "Character positions at which you can end the synopsis to conserve space. A cut number is the number of the last character to include, not the first character to cut. Add a period after that point if there is no ending punctuation (a period or a period followed by a single of double quotation mark)."
                    }
                },
                "required": [
                    "length",
                    "in"
                ]
            },
            "links": {
                "type": "object",
                "properties": {
                    "data_movie": {
                        "type": "object",
                        "description": "ID to use in a data_movie request to get information about the movie.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "data_movie_synopses": {
                        "type": "object",
                        "description": "ID to use in a data_movie_synopses request to get synopses of the movie.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                },
                "required": [
                    "data_movie",
                    "data_movie_synopses"
                ]
            },
            "page": {
                "type": "integer",
                "description": "Pagination index of the request."
            },
            "size": {
                "type": "integer",
                "description": "Number of elements returned."
            },
            "total": {
                "type": "integer",
                "description": "Total number of elements."
            }
        },
        "required": [
            "id",
            "links"
        ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_movie_theatricals [/data_movie_theatricals?id={id}&page={page}]
Returns information about the theatrical releases of a movie by country.

## GET
This request requires the `data_movie` ID for the movie, which is returned in responses to the following requests:
+  [data_airing](/#reference/tv-schedule/dataairing)
+  [data_movie_appearances](/#reference/tv-schedule/datamovieappearances)
+  [discover_all_similar_video/movie](/#reference/recommendations/discoverallsimilarvideomovie)
+  [discover_all_video_by_genre/movie](/#reference/search/discoverallvideobygenremovie)
+  [discover_all_video_by_search/movie](/#reference/search/discoverallvideobysearchmovie)
+  [discover_all_similar_video/content](/#reference/recommendations/discoverallsimilarvideocontent)
+  [discover_all_video_by_genre/content](/#reference/search/discoverallvideobygenrecontent)
+  [discover_all_video_by_search/content](/#reference/search/discoverallvideobysearchcontent)

+ Parameters
  + id (required, integer, `914806985`)
    The `data_movie` ID for the movie, returned in responses to the following requests:
      +  [data_airing](/#reference/tv-schedule/dataairing)
      +  [data_movie_appearances](/#reference/tv-schedule/datamovieappearances)
      +  [discover_all_similar_video/movie](/#reference/recommendations/discoverallsimilarvideomovie)
      +  [discover_all_video_by_genre/movie](/#reference/search/discoverallvideobygenremovie)
      +  [discover_all_video_by_search/movie](/#reference/search/discoverallvideobysearchmovie)
      +  [discover_all_similar_video/content](/#reference/recommendations/discoverallsimilarvideocontent)
      +  [discover_all_video_by_genre/content](/#reference/search/discoverallvideobygenrecontent)
      +  [discover_all_video_by_search/content](/#reference/search/discoverallvideobysearchcontent)
      
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.

+ Response 200 (application/json)

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# Group Series
This section documents the calls that return data about a TV series.

*Design Note:* The `data_series` ID for a TV series identifies the series in all of the following API calls.
- [data_series](/#reference/series/dataseries)
- [data_delta_series](/#reference/series/datadeltaseries)
- [data_series_credits/cast](/#reference/series/dataseriescreditscast)
- [data_series_credits/crew](/#reference/series/dataseriescreditscrew)
- [data_series_credits/credits](/#reference/series/dataseriescreditscredits)
- [data_series_history](/#reference/series/dataserieshistory)
- [data_series_ratings](/#reference/series/dataseriesratings)
- [data_series_specials](/#reference/series/dataseriesspecials)
- [data_series_synopses/collection](/#reference/series/dataseriessynopsescollection)
- [data_series_synopses/best](/#reference/series/dataseriessynopsesbest)
- [data_series_synopsis](/#reference/series/dataseriessynopsis)
- [data_series_awards](/#reference/awards/dataseriesawards) (in the Awards section)
- [data_series_appearances](/#reference/tv-schedule/dataseriesappearances) (in the TV Schedule section)
- [data_content_images/best](/#reference/image/datacontentimagesbest) (in the Image section)
- [data_content_images/collection](/#reference/image/datacontentimagescollection) (in the Image section)

# data_series [/data_series?id={id}&in={in}&in2={in2}&in3={in3}]
Returns information and editorial content about a TV series.

## GET
This request requires the `data_series` ID for the series, which is returned in responses to the following requests:
+  [data_airing](/#reference/tv-schedule/dataairing)
+  [data_series_appearances](/#reference/tv-schedule/dataseriesappearances)
+  [discover_all_similar_video/content](/#reference/recommendations/discoverallsimilarvideocontent)
+  [discover_all_video_by_genre/series](/#reference/search/discoverallvideobygenreseries)
+  [discover_all_video_by_genre/content](/#reference/search/discoverallvideobygenrecontent)
+  [discover_all_video_by_search/content](/#reference/search/discoverallvideobysearchcontent)

+ Parameters
  + id (required, integer, `915363654`)
    The `data_series` ID for the series, returned in responses to the following requests:
       +  [data_airing](/#reference/tv-schedule/dataairing)
       +  [data_series_appearances](/#reference/tv-schedule/dataseriesappearances)
       +  [discover_all_similar_video/content](/#reference/recommendations/discoverallsimilarvideocontent)
       +  [discover_all_video_by_genre/series](/#reference/search/discoverallvideobygenreseries)
       +  [discover_all_video_by_genre/content](/#reference/search/discoverallvideobygenrecontent)
       +  [discover_all_video_by_search/content](/#reference/search/discoverallvideobysearchcontent)
       
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"series",
       "description":"Information about a TV series.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the TV series."
          },
          "in":{
             "type":"string",
             "description":"Language of the series."
          },
          "title":{
             "type":"string",
             "description":"Title of the series."
          },
          "alts":{
             "type":"object",
             "properties":{
                "short15":{
                   "type":"string",
                   "description":"Title with up to 15 characters for a grid cell. Creative abbreviations used as needed."
                },
                "short30":{
                   "type":"string",
                   "description":"Title with up to 30 characters. Creative abbreviations used as needed."
                },
                "short8":{
                   "type":"string",
                   "description":"Title with up to 8 characters for a grid cell. Creative abbreviations used as needed."
                },
                "short50":{
                   "type":"string",
                   "description":"Title with up to 50 characters. Creative abbreviations used as needed."
                },
                "alias":{
                   "type":"string",
                   "description":"Alternate title by which a show has been distributed."
                },
                "alias2":{
                   "type":"string",
                   "description":"Another alternate title by which a show has been distributed."
                },
                "alias3":{
                   "type":"string",
                   "description":"Another alternate title by which a show has been distributed."
                },
                "alias4":{
                   "type":"string",
                   "description":"Another alternate title by which a show has been distributed."
                },
                "subtitle":{
                   "type":"string",
                   "description":"Subtitle of the show."
                }
             }
          },
          "networks":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Networks that broadcast the TV series.",
                   "properties":{
                      "name":{
                         "type":"string",
                         "description":"Network that broadcast the TV series."
                      },
                      "start":{
                         "type":"integer",
                         "description":"Year the network began broadcasting the TV series."
                      },
                      "end":{
                         "type":"integer",
                         "description":"Year the network stopped broadcasting the TV series."
                      }
                   },
                   "required":[
                      "name",
                      "start"
                   ]
                }
             ]
          },
          "isSyndicated":{
             "type":"boolean",
             "description":"True if the TV series is syndicated. Omitted if false."
          },
          "isMini":{
             "type":"boolean",
             "description":"True if the TV series is a miniseries. Omitted if false."
          },
          "links":{
             "type":"object",
             "properties":{
                "data_series":{
                   "type":"object",
                   "description":"ID to use in a data_series request to get information about the TV series.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_series_credits":{
                   "type":"object",
                   "description":"ID to use in a data_series_credits request to get credits for the TV series.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_series_ratings":{
                   "type":"object",
                   "description":"ID to use in a data_series_ratings request to get parental ratings for the TV series.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_series_synopses":{
                   "type":"object",
                   "description":"ID to use in a data_series_synopses request to get plot synopses for the TV series.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_content_images":{
                   "type":"object",
                   "description":"ID to use in a data_content_images request to get images for the TV series.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_series",
                "data_series_credits",
                "data_series_ratings",
                "data_series_synopses",
                "data_content_images"
             ]
          }
       },
       "required":[
          "id",
          "in",
          "title",
          "networks",
          "isSyndicated",
          "isMini",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_delta_series [/data_delta_series?day={day}&next={next}]
Returns IDs and ETags for [data_series](/#reference/series/dataseries) response data that changed during a single UTC date one to four days ago.

Use this request as a first step toward updating your cached [data_series](/#reference/series/dataseries) response data.

## GET
If more than 100 results are available, the response includes a __next__ field to identify the starting point of the next page of results.

+ Parameters
  + day (required, string matching \d{4}-\d{2}-\d{2}, `2015-08-23`)
    A UTC date, specified in YYYY-MM-DD format, that is one to four days before the current UTC date.
  + next (optional, integer)
    The starting point for the next page of results, returned in the __next__ field in a response to this request if another page of results is available.
    
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"series",
       "properties":{
          "date":{
             "type":"string",
             "description":"UTC date requested."
          },
          "links":{
             "type":"object",
             "data_delta_series":{
                "type":"object",
                "properties":{
                   "date":{
                      "type":"string",
                      "description":"UTC date requested."
                   },
                   "next":{
                      "type":"string",
                      "description":"Starting point for the next page of results."
                   }
                }
             }
          },
          "type":{
             "type":"string",
             "description":"Type of changed data."
          },
          "size":{
             "type":"integer",
             "description":"Number of items in this response."
          },
          "deltas":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"Rovi ID for data that changed."
                      },
                      "links":{
                         "type":"object",
                         "data_series":{
                            "type":"object",
                            "properties":{
                               "id":{
                                  "type":"integer",
                                  "description":"ID to use in a data_series request to get the changed data."
                               }
                            }
                         }
                      },
                      "etag":{
                         "type":"string",
                         "description":"ETag for the latest data for that ID."
                      }
                   }
                }
             ]
          }
       }
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_series_credits/cast [/data_series_credits/cast?id={id}&page={page}&by={by}&by2={by2}&by3={by3}&by4={by4}&by5={by5}&in={in}&in2={in2}&in3={in3}] 
Returns cast credits for a TV series.

## GET
This request requires the `data_series_credits` ID for the series, which is returned in responses to the [data_series](/#reference/series/dataseries) request. A `data_series_credits` ID is the same as the `data_series` ID for the series.

+ Parameters
  + id (required, integer, `915363654`)
    The `data_series_credits` ID for the series, returned in responses to the [data_series](/#reference/series/dataseries) request. A `data_series_credits` ID is the same as the `data_series` ID for the series.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
  + by (optional, string, `role`)
    Response field or object.field to sort by. Child fields must be single-valued, that is, not within an array.
      +  For an ascending sort, replace {by} with the field name like this: __role__ or __person.alts.last__. For a descending sort, precede the field name with a minus (-) sign like this: __-role__.
      +  To start with items that contain a particular field, replace {by} with a field-equals-not-null, like this: __person.image=!null__. To start with items that are missing a particular field, specify a field-equals-null, like this: __person.image=null__. 
      +  To start with items that contain a particular value in a top-level field, replace {by} with field-equals-value, like this: __role=Sheldon Cooper__. To end with items that contain a particular value, precede the value with an exclamation like this: __role=!Sheldon Cooper__.
      
  + by2 (optional, string, `role`)
    Second level sort specification.
  + by3 (optional, string, `role`)
    Third level sort specification.
  + by4 (optional, string, `role`)
    Fourth level sort specification.
  + by5 (optional, string, `role`)
    Fifth level sort specification.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
    
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"series_credits",
       "description":"Credits for a TV series.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the TV series."
          },
          "credits":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Credits for the TV series.",
                   "properties":{
                      "in":{
                         "type":"string",
                         "description":"Language code."
                      },
                      "role":{
                         "type":"string",
                         "description":"Character portrayed."
                      },
                      "credit":{
                         "type":"string",
                         "description":"The credit."
                      },
                      "type":{
                         "type":"string",
                         "description":"Type of credit.",
                         "oneOf":[
                            {
                               "enum":[
                                  "actor"
                               ],
                               "description":"Actor."
                            },
                            {
                               "enum":[
                                  "company"
                               ],
                               "description":"Production company."
                            },
                            {
                               "enum":[
                                  "creator"
                               ],
                               "description":"Creator."
                            },
                            {
                               "enum":[
                                  "director"
                               ],
                               "description":"Director."
                            },
                            {
                               "enum":[
                                  "producer"
                               ],
                               "description":"Producer."
                            },
                            {
                               "enum":[
                                  "studio"
                               ],
                               "description":"Studio."
                            },
                            {
                               "enum":[
                                  "subject"
                               ],
                               "description":"Person who is the subject of the movie or program."
                            },
                            {
                               "enum":[
                                  "writer"
                               ],
                               "description":"Writer."
                            }
                         ]
                      },
                      "isCast":{
                         "type":"boolean",
                         "description":"Whether the credit is a cast credit: true or false."
                      },
                      "person":{
                         "type":"object",
                         "description":"Information about the person who earned the credit.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the person."
                            },
                            "name":{
                               "type":"string",
                               "description":"Name of the person."
                            },
                            "alts":{
                               "type":"object",
                               "properties":{
                                  "first":{
                                     "type":"string",
                                     "description":"First name of the person."
                                  },
                                  "last":{
                                     "type":"string",
                                     "description":"Last name of the person."
                                  }
                               }
                            },
                            "links":{
                               "type":"object",
                               "properties":{
                                  "data_person":{
                                     "type":"object",
                                     "description":"ID to use in a data_person request to get details about the person.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  }
                               },
                               "required":[
                                  "data_person"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "name",
                            "links"
                         ]
                      },
                      "organization":{
                         "type":"object",
                         "description":"Information about the company that earned the credit.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the company that earned the credit."
                            },
                            "name":{
                               "type":"string",
                               "description":"Name of the company."
                            },
                            "links":{
                               "type":"object",
                               "properties":{
                                  "data_organization":{
                                     "type":"object",
                                     "description":"ID to use in a data_organization request to get details about the company.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  }
                               },
                               "required":[
                                  "data_organization"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "links"
                         ]
                      }
                   },
                   "required":[
                      "in",
                      "credit"
                   ]
                }
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_series_credits":{
                   "type":"object",
                   "description":"ID to use in a data_series_credits request to get credits for the TV series.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_series":{
                   "type":"object",
                   "description":"ID to use in a data_series request to get information about the TV series.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_series_credits",
                "data_series"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_series_credits/crew [/data_series_credits/crew?id={id}&page={page}&by={by}&by2={by2}&by3={by3}&by4={by4}&by5={by5}&in={in}&in2={in2}&in3={in3}] 
Returns crew credits for a TV series.

## GET
This request requires the `data_series_credits` ID for the series, which is returned in responses to the [data_series](/#reference/series/dataseries) request. A `data_series_credits` ID is the same as the `data_series` ID for the series.

+ Parameters
  + id (required, integer, `915363654`)
    The `data_series_credits` ID for the series, returned in responses to the [data_series](/#reference/series/dataseries) request. A `data_series_credits` ID is the same as the `data_series` ID for the series.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
  + by (optional, string, `type`)
    Response field or object.field to sort by. Child fields must be single-valued, that is, not within an array.
      +  For an ascending sort, replace {by} with the field name like this: __credit__ or __person.alts.last__. For a descending sort, precede the field name with a minus (-) sign like this: __-credit__.
      +  To start with items that contain a particular field, replace {by} with a field-equals-not-null, like this: __person.image=!null__. To start with items that are missing a particular field, specify a field-equals-null, like this: __type=null__. 
      +  To start with items that contain a particular value in a top-level field, replace {by} with field-equals-value, like this: __type=director__. To end with items that contain a particular value, precede the value with an exclamation like this: __type=!company__.
      
  + by2 (optional, string, `type`)
    Second level sort specification.
  + by3 (optional, string, `type`)
    Third level sort specification.
  + by4 (optional, string, `type`)
    Fourth level sort specification.
  + by5 (optional, string, `type`)
    Fifth level sort specification.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
    
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"series_credits",
       "description":"Credits for a TV series.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the TV series."
          },
          "credits":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Credits for the TV series.",
                   "properties":{
                      "in":{
                         "type":"string",
                         "description":"Language code."
                      },
                      "role":{
                         "type":"string",
                         "description":"Character portrayed."
                      },
                      "credit":{
                         "type":"string",
                         "description":"The credit."
                      },
                      "type":{
                         "type":"string",
                         "description":"Type of credit.",
                         "oneOf":[
                            {
                               "enum":[
                                  "actor"
                               ],
                               "description":"Actor."
                            },
                            {
                               "enum":[
                                  "company"
                               ],
                               "description":"Production company."
                            },
                            {
                               "enum":[
                                  "creator"
                               ],
                               "description":"Creator."
                            },
                            {
                               "enum":[
                                  "director"
                               ],
                               "description":"Director."
                            },
                            {
                               "enum":[
                                  "producer"
                               ],
                               "description":"Producer."
                            },
                            {
                               "enum":[
                                  "studio"
                               ],
                               "description":"Studio."
                            },
                            {
                               "enum":[
                                  "subject"
                               ],
                               "description":"Person who is the subject of the movie or program."
                            },
                            {
                               "enum":[
                                  "writer"
                               ],
                               "description":"Writer."
                            }
                         ]
                      },
                      "isCast":{
                         "type":"boolean",
                         "description":"Whether the credit is a cast credit: true or false."
                      },
                      "person":{
                         "type":"object",
                         "description":"Information about the person who earned the credit.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the person."
                            },
                            "name":{
                               "type":"string",
                               "description":"Name of the person."
                            },
                            "alts":{
                               "type":"object",
                               "properties":{
                                  "first":{
                                     "type":"string",
                                     "description":"First name of the person."
                                  },
                                  "last":{
                                     "type":"string",
                                     "description":"Last name of the person."
                                  }
                               }
                            },
                            "links":{
                               "type":"object",
                               "properties":{
                                  "data_person":{
                                     "type":"object",
                                     "description":"ID to use in a data_person request to get details about the person.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  }
                               },
                               "required":[
                                  "data_person"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "name",
                            "links"
                         ]
                      },
                      "organization":{
                         "type":"object",
                         "description":"Information about the company that earned the credit.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the company that earned the credit."
                            },
                            "name":{
                               "type":"string",
                               "description":"Name of the company."
                            },
                            "links":{
                               "type":"object",
                               "properties":{
                                  "data_organization":{
                                     "type":"object",
                                     "description":"ID to use in a data_organization request to get details about the company.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  }
                               },
                               "required":[
                                  "data_organization"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "links"
                         ]
                      }
                   },
                   "required":[
                      "in",
                      "credit"
                   ]
                }
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_series_credits":{
                   "type":"object",
                   "description":"ID to use in a data_series_credits request to get credits for the TV series.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_series":{
                   "type":"object",
                   "description":"ID to use in a data_series request to get information about the TV series.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_series_credits",
                "data_series"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_series_credits/credits [/data_series_credits/credits?id={id}&page={page}&by={by}&by2={by2}&by3={by3}&by4={by4}&by5={by5}&in={in}&in2={in2}&in3={in3}] 
Returns both cast and crew credits for a TV series.

## GET
This request requires the `data_series_credits` ID for the series, which is returned in responses to the [data_series](/#reference/series/dataseries) request. A `data_series_credits` ID is the same as the `data_series` ID for the series.

+ Parameters
  + id (required, integer, `915363654`)
    The `data_series_credits` ID for the series, returned in responses to the [data_series](/#reference/series/dataseries) request. A `data_series_credits` ID is the same as the `data_series` ID for the series.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
  + by (optional, string, `credit`)
    Response field or object.field to sort by. Child fields must be single-valued, that is, not within an array.
      +  For an ascending sort, replace {by} with the field name like this: __credit__ or __person.alts.last__. For a descending sort, precede the field name with a minus (-) like this: __-credit__.
      +  To start with items that contain a particular field, replace {by} with field-equals-not-null, like this: __person.image=!null__. To start with items that are missing a particular field, specify field-equals-null, like this: __role=null__. 
      +  To start with items that contain a particular value in a top-level field, replace {by} with field-equals-value, like this: __type=director__. To end with items that contain a particular value, precede the value with an exclamation like this: __type=!company__.
      
  + by2 (optional, string, `credit`)
    Second level sort specification.
  + by3 (optional, string, `credit`)
    Third level sort specification.
  + by4 (optional, string, `credit`)
    Fourth level sort specification.
  + by5 (optional, string, `credit`)
    Fifth level sort specification.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
    
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"series_credits",
       "description":"Credits for a TV series.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the TV series."
          },
          "credits":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Credits for the TV series.",
                   "properties":{
                      "in":{
                         "type":"string",
                         "description":"Language code."
                      },
                      "role":{
                         "type":"string",
                         "description":"Character portrayed."
                      },
                      "credit":{
                         "type":"string",
                         "description":"The credit."
                      },
                      "type":{
                         "type":"string",
                         "description":"Type of credit.",
                         "oneOf":[
                            {
                               "enum":[
                                  "actor"
                               ],
                               "description":"Actor."
                            },
                            {
                               "enum":[
                                  "company"
                               ],
                               "description":"Production company."
                            },
                            {
                               "enum":[
                                  "creator"
                               ],
                               "description":"Creator."
                            },
                            {
                               "enum":[
                                  "director"
                               ],
                               "description":"Director."
                            },
                            {
                               "enum":[
                                  "producer"
                               ],
                               "description":"Producer."
                            },
                            {
                               "enum":[
                                  "studio"
                               ],
                               "description":"Studio."
                            },
                            {
                               "enum":[
                                  "subject"
                               ],
                               "description":"Person who is the subject of the movie or program."
                            },
                            {
                               "enum":[
                                  "writer"
                               ],
                               "description":"Writer."
                            }
                         ]
                      },
                      "isCast":{
                         "type":"boolean",
                         "description":"Whether the credit is a cast credit: true or false."
                      },
                      "person":{
                         "type":"object",
                         "description":"Information about the person who earned the credit.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the person."
                            },
                            "name":{
                               "type":"string",
                               "description":"Name of the person."
                            },
                            "alts":{
                               "type":"object",
                               "properties":{
                                  "first":{
                                     "type":"string",
                                     "description":"First name of the person."
                                  },
                                  "last":{
                                     "type":"string",
                                     "description":"Last name of the person."
                                  }
                               }
                            },
                            "links":{
                               "type":"object",
                               "properties":{
                                  "data_person":{
                                     "type":"object",
                                     "description":"ID to use in a data_person request to get details about the person.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  }
                               },
                               "required":[
                                  "data_person"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "name",
                            "links"
                         ]
                      },
                      "organization":{
                         "type":"object",
                         "description":"Information about the company that earned the credit.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the company that earned the credit."
                            },
                            "name":{
                               "type":"string",
                               "description":"Name of the company."
                            },
                            "links":{
                               "type":"object",
                               "properties":{
                                  "data_organization":{
                                     "type":"object",
                                     "description":"ID to use in a data_organization request to get details about the company.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  }
                               },
                               "required":[
                                  "data_organization"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "links"
                         ]
                      }
                   },
                   "required":[
                      "in",
                      "credit"
                   ]
                }
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_series_credits":{
                   "type":"object",
                   "description":"ID to use in a data_series_credits request to get credits for the TV series.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_series":{
                   "type":"object",
                   "description":"ID to use in a data_series request to get information about the TV series.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_series_credits",
                "data_series"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_series_history [/data_series_history?id={id}&page={page}]
Returns the broadcast history of a TV series.

## GET
This request requires the `data_series_history` ID for the series, which is returned in responses to [data_series](/#reference/series/dataseries) requests. A `data_series_history` ID is the same as the `data_series` ID for the series.

+ Parameters
  + id (required, integer, `915363654`)
    The `data_series_history` ID for the series, returned in responses to [data_series](/#reference/series/dataseries) requests. A `data_series_history` ID is the same as the `data_series` ID for the series.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
     
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"series_history",
       "description":"History of a TV series.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the TV series."
          },
          "history":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"History of the TV series.",
                   "properties":{
                      "start":{
                         "type":"string",
                         "description":"Year the series began."
                      },
                      "end":{
                         "type":"string",
                         "description":"Year the series ended."
                      },
                      "source":{
                         "type":"array",
                         "items":[
                            {
                               "type":"object",
                               "description":"Information about a source of the TV series.",
                               "properties":{
                                  "id":{
                                     "type":"integer",
                                     "description":"Rovi ID for the source of the TV series."
                                  },
                                  "name":{
                                     "type":"string",
                                     "description":"Name of the source of the TV series."
                                  },
                                  "links":{
                                     "type":"object",
                                     "properties":{
                                        "data_source":{
                                           "type":"object",
                                           "description":"ID to use in a data_source request to get details about the source of the TV series.",
                                           "properties":{
                                              "id":{
                                                 "type":"integer"
                                              }
                                           },
                                           "required":[
                                              "id"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "data_source"
                                     ]
                                  }
                               },
                               "required":[
                                  "id",
                                  "links"
                               ]
                            }
                         ]
                      }
                   }
                }
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_series_history":{
                   "type":"object",
                   "description":"ID to use in a data_series_history request to get a history of the TV series.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_series":{
                   "type":"object",
                   "description":"ID to use in a data_series request to get information about the TV series.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_series_history",
                "data_series"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_series_ratings [/data_series_ratings?id={id}&country={country}] 
Returns parental ratings for a TV series.

## GET
This request requires the `data_series_ratings` ID for the series, which is returned in responses to the [data_series](/#reference/series/dataseries) request. A `data_series_ratings` ID is the same as the `data_series` ID for the series.

+ Parameters
  + id (required, integer, `915858537`)
    The `data_series_ratings` ID for the series, returned in responses to the [data_series](/#reference/series/dataseries) request. A `data_series_ratings` ID is the same as the `data_series` ID for the series.
  + country (optional, string, `US`)
    Country for which you want parental ratings, specified as one of the following ISO 3166-1 alpha-2 codes:
    <table><tr>
    <th>Code</th><th>Country</th><th>Code</th><th>Country</th>
    </tr><tr>
    <td>AR</td><td><p>Argentina</p></td><td>MX</td><td><p>Mexico</p></td>
    </tr><tr>
    <td>AT</td><td><p>Austria</p></td><td>NL</td><td><p>Netherlands</p></td>
    </tr><tr>
    <td>BE</td><td><p>Belgium</p></td><td>NO</td><td><p>Norway</p></td>
    </tr><tr>
    <td>BR</td><td><p>Brazil</p></td><td>PE</td><td><p>Peru</p></td>
    </tr><tr>
    <td>CA</td><td><p>Canada</p></td><td>PL</td><td><p>Poland</p></td>
    </tr><tr>
    <td>CL</td><td><p>Chile</p></td><td>PT</td><td><p>Portugal</p></td>
    </tr><tr>
    <td>CO</td><td><p>Colombia</p></td><td>ES</td><td><p>Spain</p></td>
    </tr><tr>
    <td>DK</td><td><p>Denmark</p></td><td>SE</td><td><p>Sweden</p></td>
    </tr><tr>
    <td>FI</td><td><p>Finland</p></td><td>CH</td><td><p>Switzerland</p></td>
    </tr><tr>
    <td>FR</td><td><p>France</p></td><td>TC</td><td><p>Turks & Caicos</p></td>
    </tr><tr>
    <td>DE</td><td><p>Germany</p></td><td>GB</td><td><p>United Kingdom*</p></td>
    </tr><tr>
    <td>IE</td><td><p>Ireland</p></td><td>US</td><td><p>United States</p></td>
    </tr><tr>
    <td>IT</td><td><p>Italy</p></td><td>VE</td><td><p>Venezuela</p></td>
    </tr></table><br/>*Includes Wales, Scotland, and Northern Ireland.
    
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"series_ratings",
       "description":"Parental ratings for a TV series.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the TV series."
          },
          "ratings":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Parental ratings for the TV series.",
                   "properties":{
                      "in":{
                         "type":"string"
                      },
                      "type":{
                         "type":"string",
                         "description":"Source of the parental rating."
                      },
                      "rating":{
                         "type":"string",
                         "description":"The parental rating."
                      },
                      "medium":{
                         "type":"string",
                         "description":"Media that this rating applies to.",
                         "oneOf":[
                            {
                               "enum":[
                                  "movie"
                               ],
                               "description":"Theatrical film."
                            },
                            {
                               "enum":[
                                  "tv"
                               ],
                               "description":"Television."
                            },
                            {
                               "enum":[
                                  "stars"
                               ],
                               "description":"TV series qualitative rating from 1 to 4 stars. Rated by Rovi."
                            },
                            {
                               "enum":[
                                  "age"
                               ],
                               "description":"TV series youngest appropriate age rating. Rated by Rovi."
                            },
                            {
                               "enum":[
                                  "family"
                               ],
                               "description":"TV series family friendly rating on a scale of 0 to 10."
                            }
                         ]
                      },
                      "countries":{
                         "type":"array",
                         "description":"Countries the parental rating applies to.",
                         "items":{
                            "type":"string"
                         }
                      },
                      "reasons":{
                         "type":"array",
                         "description":"Reasons for the rating.",
                         "items":{
                            "type":"string"
                         }
                      },
                      "subrating":{
                         "type":"string",
                         "description":"Content warning labels that apply to the program."
                      }
                   },
                   "required":[
                      "in",
                      "type",
                      "rating"
                   ]
                }
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_series_ratings":{
                   "type":"object",
                   "description":"ID to use in a data_series_ratings request to get parental ratings for the TV series.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_series":{
                   "type":"object",
                   "description":"ID to use in a data_series request to get information about the TV series.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_series_ratings",
                "data_series"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_series_specials [/data_series_specials?id={id}&page={page}]
Returns information about the specials in a TV series.

## GET
This request requires the `data_series_specials` ID for the series, which is returned in responses to data_series requests. A `data_series_specials` ID is the same as the `data_series` ID for the TV series.

+ Parameters
  + id (required, integer, `915363654`)
    The `data_series_specials` ID for the series, returned in responses to data_series requests. A `data_series_specials` ID is the same as the `data_series` ID for the TV series.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
    
+ Response 200 (application/json)

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_series_synopses/collection [/data_series_synopses/collection?id={id}&in={in}&in2={in2}&in3={in3}]
Returns a range of synopses of a TV series.

## GET
This request requires the `data_series_synopses` ID for the series, which is returned in responses to [data_series](/#reference/series/dataseries) requests. The `data_series_synopses` ID is the same as the `data_series` ID for the series.

+ Parameters
  + id (required, integer, `915363654`)
    The `data_series_synopses` ID for the series, returned in responses to [data_series](/#reference/series/dataseries) requests.  The `data_series_synopses` ID is the same as the `data_series` ID for the series.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_series_synopses/best [/data_series_synopses/best?id={id}&length={length}&length2={length2}&length3={length3}&length4={length4}&in={in}&in2={in2}&in3={in3}]
Returns the best available synopsis of a TV series, based on type:
+  `long` &mdash; Straightforward, objective description of the series in up to 420 characters.
+  `short` &mdash; A shorter version of the "long" description.
+  `plain` &mdash; A straightforward description without credits that is never critical.
+  `extended` &mdash; A more detailed description than the "long" description, up to 2000 characters.

## GET
This request requires the `data_series_synopses` ID for the series, which is returned in responses to [data_series](/#reference/series/dataseries) requests. The `data_series_synopses` ID is the same as the `data_series` ID for the series.

+ Parameters
  + id (required, integer, `915363654`)
    The `data_series_synopses` ID for the series, returned in responses to [data_series](/#reference/series/dataseries) requests.  The `data_series_synopses` ID is the same as the `data_series` ID for the series.
  + length (required, string enum, `short`)
    First choice for type of description:
    <table>
    <tr><th>Value</th><th>Description</th>
    </tr><tr>
    <td>long</td><td><p>Straightforward, objective description of the series in up to 420 characters.</p></td>
    </tr><tr>
    <td>short</td><td><p>A shorter version of the "long" description.</p></td>
    </tr><tr>
    <td>plain</td><td><p>A straightforward description without credits that is never critical.</p></td>
    </tr><tr>
    <td>extended</td><td><p>A more detailed description than the "long" description, up to 2000 characters.</p></td>
    </tr>
    </table>
    
  + length2 (optional, string enum, `long`)
    Second choice for type of description.
  + length3 (optional, string enum, `plain`)
    Third choice for type of description.
  + length4 (optional, string enum, `extended`)
    Fourth choice for type of description.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_series_synopsis [/data_series_synopsis?id={id}&in={in}&in2={in2}&in3={in3}]
Returns a synopsis of a TV series.

__NOTE: This request is now deprecated.__ Use one of the `data_series_synopses` requests instead:
+  [data_series_synopses/best](/#reference/series/dataseriessynopsesbest)
+  [data_series_synopses/collection](/#reference/series/dataseriessynopsescollection)

## GET
This request requires the `data_series_synopses` ID for the series, which is returned in responses to [data_series](/#reference/series/dataseries) requests. A `data_series_synopses` ID is the same as the `data_series` ID for the series.

+ Parameters
  + id (required, integer, `915363654`)
    The `data_series_synopses` ID for the series, returned in responses to [data_series](/#reference/series/dataseries) requests. A `data_series_synopses` ID is the same as the `data_series` ID for the series.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)
```
    {
    "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
    "type":"object",
    "title":"series_synopses",
    "description":"Synopses of a TV series.",
    "properties":{
        "id":{
            "type":"integer",
            "description":"Rovi ID for the TV series."
        },
        "synopsis":{
            "type":"object",
            "description":"Synopsis of the TV series.",
            "properties":{
                "length":{
                "type":"string",
                "description":"Type of synopsis.",
                "oneOf":[
                    {
                        "enum":[
                            "long"
                        ],
                        "description":"Straightforward, objective plot synopsis with up to 420 characters."
                    },
                    {
                        "enum":[
                            "short"
                        ],
                        "description":"Straightforward, objective plot synopsis with up to 150 characters."
                    },
                    {
                        "enum":[
                            "plain"
                        ],
                        "description":"Straightforward description, without credits, that is never critical."
                    },
                    {
                        "enum":[
                            "extended"
                        ],
                        "description":"Straightforward, objective plot synopsis with up to 2000 characters."
                    },
                    {
                        "enum":[
                            "source"
                        ],
                        "description":"Synopsis supplied by the channel on which the show is broadcast."
                    },
                    {
                        "enum":[
                            "review"
                        ],
                        "description":"Movie review."
                    }
                ]
                },
                "in":{
                "type":"string",
                "description":"Language of the synopsis."
                },
                "synopsis":{
                "type":"string",
                "description":"Synopsis of the movie or program."
                },
                "cuts":{
                "type":"string",
                "description":"Character positions at which you can end the text to conserve space. A cutting position is the number of the last character to include, not the first character to cut. Add a period if there is no ending punctuation (a period or a period followed by a single of double quotation mark)."
                }
            },
            "required":[
                "length",
                "in"
            ]
        },
        "links":{
            "type":"object",
            "properties":{
                "data_series":{
                "type":"object",
                "description":"ID to use in a data_series request to get information about the TV series.",
                "properties":{
                    "id":{
                        "type":"integer"
                    }
                },
                "required":[
                    "id"
                ]
                },
                "data_series_synopses":{
                "type":"object",
                "description":"ID to use in a data_series_synopses request to get synopses of the TV series.",
                "properties":{
                    "id":{
                        "type":"integer"
                    }
                },
                "required":[
                    "id"
                ]
                }
            },
            "required":[
                "data_series",
                "data_series_synopses"
            ]
        },
        "page":{
            "type":"integer",
            "description":"Page number of the response."
        },
        "size":{
            "type":"integer",
            "description":"Number of elements in this page."
        },
        "total":{
            "type":"integer",
            "description":"Total number of elements available."
        }
    },
    "required":[
        "id",
        "links"
    ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_series_seasons [/data_series_seasons?id={id}&in={in}&in2={in2}&in3={in3}]
Returns information about the seasons in a TV series.

## GET
This request requires the `data_series_seasons` ID for the series, which is returned in responses to [data_series](/#reference/series/dataseries) requests. A `data_series_seasons` ID is the same as the `data_series` ID for a TV series.

+ Parameters
  + id (required, integer, `915363654`)
    The `data_series_seasons` ID for the series, which is returned in responses to [data_series](/#reference/series/dataseries) requests. A `data_series_seasons` ID is the same as the `data_series` ID for the TV series.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"series_seasons",
       "description":"Information about the seasons in a TV series.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the TV series."
          },
          "seasons":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"Rovi ID for the season."
                      },
                      "in":{
                         "type":"string"
                      },
                      "title":{
                         "type":"string",
                         "description":"Title of the season."
                      },
                      "start":{
                         "type":"integer",
                         "description":"Year the season began."
                      },
                      "end":{
                         "type":"integer",
                         "description":"Year the season ended."
                      },
                      "number":{
                         "type":"integer",
                         "description":"Number of the season in the TV series."
                      },
                      "links":{
                         "type":"object",
                         "properties":{
                            "data_season":{
                               "type":"object",
                               "description":"ID to use in a data_seasons request to get information about the season.",
                               "properties":{
                                  "id":{
                                     "type":"integer"
                                  }
                               },
                               "required":[
                                  "id"
                               ]
                            }
                         },
                         "required":[
                            "data_season"
                         ]
                      }
                   },
                   "required":[
                      "id",
                      "in",
                      "number",
                      "links"
                   ]
                }
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_series_seasons":{
                   "type":"object",
                   "description":"ID to use in a data_series_seasons request to get information about the seasons in the series.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_series":{
                   "type":"object",
                   "description":"ID to use in a data_series request to get information about the TV series.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_series_seasons",
                "data_series"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "seasons",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# Group Season

This section documents the calls that return data about a season in a TV series.

*Design Note:* The `data_season` ID for a season identifies the season in all of the following API calls.
- [data_season](/#reference/season/dataseason)
- [data_delta_season](/#reference/season/datadeltaseason)
- [data_season_episodes](/#reference/season/dataseasonepisodes)
- [data_season_synopses/collection](/#reference/season/dataseasonsynopsescollection)
- [data_season_synopses/best](/#reference/season/dataseasonsynopsesbest)
- [data_season_synopsis](/#reference/season/dataseasonsynopsis)
- [data_content_images/best](/#reference/image/datacontentimagesbest) (in the Image section)
- [data_content_images/collection](/#reference/image/datacontentimagescollection) (in the Image section)

# data_season [/data_season?id={id}&in={in}&in2={in2}&in3={in3}]
Returns details about a season in a TV series.

## GET
This request requires the `data_season` ID for the season, which is returned in responses to [data_series_seasons](/#reference/series/dataseriesseasons) requests.

+ Parameters
  + id (required, integer, `914502705`)
    The `data_season` ID for the season, which is returned in responses to [data_series_seasons](/#reference/series/dataseriesseasons) requests.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"season",
       "description":"Information about a season in a TV series.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the season."
          },
          "in":{
             "type":"string",
             "description":"Season title and language."
          },
          "title":{
             "type":"string",
             "description":"Title of the season."
          },
          "alts":{
             "type":"object",
             "description":"Alternate titles for the season.",
             "properties":{
                "short15":{
                   "type":"string",
                   "description":"Title with up to 15 characters for a grid cell. Creative abbreviations used as needed."
                },
                "short30":{
                   "type":"string",
                   "description":"Title with up to 30 characters. Creative abbreviations used as needed."
                },
                "short8":{
                   "type":"string",
                   "description":"Title with up to 8 characters for a grid cell. Creative abbreviations used as needed."
                },
                "short50":{
                   "type":"string",
                   "description":"Title with up to 50 characters. Creative abbreviations used as needed."
                },
                "alias":{
                   "type":"string",
                   "description":"Alternate title by which a show has been distributed."
                },
                "alias2":{
                   "type":"string",
                   "description":"Another alternate title by which a show has been distributed."
                },
                "alias3":{
                   "type":"string",
                   "description":"Another alternate title by which a show has been distributed."
                },
                "alias4":{
                   "type":"string",
                   "description":"Another alternate title by which a show has been distributed."
                },
                "subtitle":{
                   "type":"string",
                   "description":"Subtitle of the show."
                }
             }
          },
          "image":{
             "type":"object",
             "description":"Information about the primary image associated with the season.",
             "properties":{
                "id":{
                   "type":"integer",
                   "description":"Rovi ID for the image."
                },
                "zoom":{
                   "type":"string",
                   "description":"How much of the subject appears in the picture.",
                   "oneOf":[
                      {
                         "enum":[
                            "head"
                         ],
                         "description":"Head or shoulders to top of head."
                      },
                      {
                         "enum":[
                            "torso"
                         ],
                         "description":"Chest or thigh to top of head."
                      },
                      {
                         "enum":[
                            "body"
                         ],
                         "description":"Body fills at least 80% of frame."
                      },
                      {
                         "enum":[
                            "framed"
                         ],
                         "description":"Full body fills 50% to 80% of frame."
                      },
                      {
                         "enum":[
                            "std"
                         ],
                         "description":"Full body fills 50% of frame or less."
                      }
                   ]
                },
                "links":{
                   "type":"object",
                   "properties":{
                      "media_image":{
                         "type":"object",
                         "description":"ID to use in a media_image request to get the image file.",
                         "properties":{
                            "id":{
                               "type":"integer"
                            }
                         },
                         "required":[
                            "id"
                         ]
                      }
                   },
                   "required":[
                      "media_image"
                   ]
                }
             },
             "required":[
                "id",
                "zoom",
                "links"
             ]
          },
          "number":{
             "type":"integer",
             "description":"Season number in the series."
          },
          "episodes":{
             "type":"integer",
             "description":"Number of episodes in the season."
          },
          "series":{
             "type":"object",
             "description":"Series title and links to information about the series.",
             "properties":{
                "id":{
                   "type":"integer",
                   "description":"Rovi ID for the TV series."
                },
                "in":{
                   "type":"string",
                   "description":"Broadcast language."
                },
                "title":{
                   "type":"string",
                   "description":"Title of the series."
                },
                "links":{
                   "type":"object",
                   "properties":{
                      "data_series":{
                         "type":"object",
                         "description":"ID to use in a data_series request to get information about the series.",
                         "properties":{
                            "id":{
                               "type":"integer"
                            }
                         },
                         "required":[
                            "id"
                         ]
                      }
                   },
                   "required":[
                      "data_series"
                   ]
                }
             },
             "required":[
                "id",
                "in",
                "links"
             ]
          },
          "network":{
             "type":"string",
             "description":"Networks that broadcast the season."
          },
          "start":{
             "type":"integer",
             "description":"Year the season began."
          },
          "end":{
             "type":"integer",
             "description":"Year the season ended."
          },
          "category":{
             "type":"string",
             "description":"Program category: News, Movie, Music, Sports, Lifestyle, Children's, Other."
          },
          "genres":{
             "type":"array",
             "description":"Genres the season fits in.",
             "items":{
                "type":"string"
             }
          },
          "subGenres":{
             "type":"array",
             "description":"Subgenres the season fits in.",
             "items":{
                "type":"string"
             }
          },
          "moods":{
             "type":"array",
             "description":"Terms that describe expressive characteristics of the season.",
             "items":{
                "type":"string"
             }
          },
          "tones":{
             "type":"array",
             "description":"Feelings and attitudes that motivate or fit with the season.",
             "items":{
                "type":"string"
             }
          },
          "themes":{
             "type":"array",
             "description":"Topics and circumstances that motivate or fit with the season.",
             "items":{
                "type":"string"
             }
          },
          "keywords":{
             "type":"array",
             "description":"Keywords that describe characteristics of the season.",
             "items":{
                "type":"string"
             }
          },
          "aesthetics":{
             "type":"array",
             "description":"Artistic styles that apply to the season, distinct techniques filmmakers employ for a specific effect.",
             "items":{
                "type":"string"
             }
          },
          "audiences":{
             "type":"array",
             "description":"Audience types that the season is intended to appeal to.",
             "items":{
                "type":"string"
             }
          },
          "periods":{
             "type":"array",
             "description":"Time periods when the season stories takes place.",
             "items":{
                "type":"string"
             }
          },
          "characters":{
             "type":"array",
             "description":"Character types that appear in the season.",
             "items":{
                "type":"string"
             }
          },
          "importance":{
             "type":"array",
             "description":"Rating phrases that apply to a review of the season.",
             "items":{
                "type":"string"
             }
          },
          "flags":{
             "type":"array",
             "description":"Theme phrases that apply to a review of the season.",
             "items":{
                "type":"string"
             }
          },
          "links":{
             "type":"object",
             "properties":{
                "data_season":{
                   "type":"object",
                   "description":"ID to use in a data_season request to get information about the season.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_season_episodes":{
                   "type":"object",
                   "description":"ID to use in a data_season_episodes request to get information about episodes in the season.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_season_history":{
                   "type":"object",
                   "description":"ID to use in a data_season_history request to get the season history.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_season_synopses":{
                   "type":"object",
                   "description":"ID to use in a data_season_synopses request to get plot synopses of the season.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_content_images":{
                   "type":"object",
                   "description":"ID to use in a data_content_images request to find images associated with the season.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_season",
                "data_season_episodes",
                "data_season_history",
                "data_season_synopses",
                "data_content_images"
             ]
          }
       },
       "required":[
          "id",
          "in",
          "series",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_delta_season [/data_delta_season?day={day}&next={next}]
Returns IDs and ETags for [data_season](/#reference/season/dataseason) response data that changed during a single UTC date one to four days ago.

Use this request as a first step toward updating your cached [data_season](/#reference/season/dataseason) response data.

## GET
If more than 100 results are available, the response includes a __next__ field to identify the starting point of the next page of results.

+ Parameters
  + day (required, string matching \d{4}-\d{2}-\d{2}, `2015-08-23`)
    A UTC date, specified in YYYY-MM-DD format, that is one to four days before the current UTC date.
  + next (optional, integer)
    The starting point for the next page of results, returned in the __next__ field in a response to this request if another page of results is available.
    
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"season",
       "properties":{
          "date":{
             "type":"string",
             "description":"UTC date requested."
          },
          "links":{
             "type":"object",
             "data_delta_season":{
                "type":"object",
                "properties":{
                   "date":{
                      "type":"string",
                      "description":"UTC date requested."
                   },
                   "next":{
                      "type":"string",
                      "description":"Starting point for the next page of results."
                   }
                }
             }
          },
          "type":{
             "type":"string",
             "description":"Type of changed data."
          },
          "size":{
             "type":"integer",
             "description":"Number of items in this response."
          },
          "deltas":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"Rovi ID for data that changed."
                      },
                      "links":{
                         "type":"object",
                         "data_season":{
                            "type":"object",
                            "properties":{
                               "id":{
                                  "type":"integer",
                                  "description":"ID to use in a data_season request to get the changed data."
                               }
                            }
                         }
                      },
                      "etag":{
                         "type":"string",
                         "description":"ETag for the latest data for that ID."
                      }
                   }
                }
             ]
          }
       }
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_season_episodes [/data_season_episodes?id={id}&page={page}]
Returns information about the episodes in a season of a TV series.

## GET
This request requires the `data_season_episodes` ID for the season, which is returned by a [data_season](/#reference/season/dataseason) request. A `data_season_episodes` ID is the same as the `data_season` ID for the season.

+ Parameters
  + id (required, integer, `914502705`)
    The `data_season_episodes` ID for the season, which is returned by a [data_season](/#reference/season/dataseason) request.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
    
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"season_episodes",
       "description":"Information about the episodes in a season of a TV series.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the season."
          },
          "episodes":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Titles and sequence of episodes in the season.",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"Rovi ID for the episode."
                      },
                      "in":{
                         "type":"string",
                         "description":"Language of the episode."
                      },
                      "title":{
                         "type":"string",
                         "description":"Title of the episode."
                      },
                      "withinSeason":{
                         "type":"integer",
                         "description":"Number of the episode in the season."
                      },
                      "withinSeries":{
                         "type":"integer",
                         "description":"Number of the episode in the series."
                      },
                      "links":{
                         "type":"object",
                         "properties":{
                            "data_episode":{
                               "type":"object",
                               "description":"ID to use in a data_episode request to get information about the episode.",
                               "properties":{
                                  "id":{
                                     "type":"integer"
                                  }
                               },
                               "required":[
                                  "id"
                               ]
                            }
                         },
                         "required":[
                            "data_episode"
                         ]
                      }
                   },
                   "required":[
                      "id",
                      "in",
                      "withinSeason",
                      "links"
                   ]
                }
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_season_episodes":{
                   "type":"object",
                   "description":"ID to use in a data_season_episodes request to get information about episodes in the season.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_season":{
                   "type":"object",
                   "description":"ID to use in a data_season request to get information about the season.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_season_episodes",
                "data_season"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_season_synopses/collection [/data_season_synopses/collection?id={id}&in={in}&in2={in2}&in3={in3}]
Returns a range of synopses of a season in a TV series.

## GET
This request requires the `data_season_synopses` ID for the season, which is returned in responses to [data_season](/#reference/season/dataseason) requests. The `data_season_synopses` ID is the same as the `data_season` ID for the season.

+ Parameters
  + id (required, integer, `914502705`)
    The `data_season_synopses` ID for the season, returned in responses to [data_season](/#reference/season/dataseason) requests.  The `data_season_synopses` ID is the same as the `data_season` ID for the season.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_season_synopses/best [/data_season_synopses/best?id={id}&length={length}&length2={length2}&length3={length3}&length4={length4}&in={in}&in2={in2}&in3={in3}]
Returns the best available synopsis of a season in a TV series, based on type:
+  `long` &mdash; Straightforward, objective description of the season in up to 420 characters.
+  `short` &mdash; A shorter version of the "long" description.
+  `plain` &mdash; A straightforward description without credits that is never critical.
+  `extended` &mdash; A more detailed description than the "long" description, up to 2000 characters.

## GET
This request requires the `data_season_synopses` ID for the season, which is returned in responses to [data_season](/#reference/season/dataseason) requests. The `data_season_synopses` ID is the same as the `data_season` ID for the season.

+ Parameters
  + id (required, integer, `914502705`)
    The `data_season_synopses` ID for the season, returned in responses to [data_season](/#reference/season/dataseason) requests.  The `data_season_synopses` ID is the same as the `data_season` ID for the season.
  + length (required, string enum, `short`)
    First choice for type of description:
    <table>
    <tr><th>Value</th><th>Description</th>
    </tr><tr>
    <td>long</td><td><p>Straightforward, objective description of the season in up to 420 characters.</p></td>
    </tr><tr>
    <td>short</td><td><p>A shorter version of the "long" description.</p></td>
    </tr><tr>
    <td>plain</td><td><p>A straightforward description without credits that is never critical.</p></td>
    </tr><tr>
    <td>extended</td><td><p>A more detailed description than the "long" description, up to 2000 characters.</p></td>
    </tr>
    </table>
    
  + length2 (optional, string enum, `long`)
    Second choice for type of description.
  + length3 (optional, string enum, `plain`)
    Third choice for type of description.
  + length4 (optional, string enum, `extended`)
    Fourth choice for type of description.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_season_synopsis [/data_season_synopsis?id={id}&in={in}&in2={in2}&in3={in3}]
Returns a synopsis of a season in a TV series. 

__NOTE: This request is now deprecated.__ Use one of the `data_season_synopses` requests instead:
+  [data_season_synopses/best](/#reference/season/dataseasonsynopsesbest)
+  [data_season_synopses/collection](/#reference/season/dataseasonsynopsescollection)

## GET
This request requires the `data_season_synopses` ID for the season, which is returned by a [data_season](/#reference/season/dataseason) request. A `data_season_synopses` ID is the same as the `data_season` ID for the season.

+ Parameters
  + id (required, integer, `914502705`)
    The `data_season_synopses` ID for the season, which is returned by a [data_season](/#reference/season/dataseason) request. A `data_season_synopses` ID is the same as the `data_season` ID for the season.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"season_synopses",
       "description":"Synopses of a season in a TV series.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the season."
          },
          "synopsis":{
             "type":"object",
             "description":"Synopsis of the season.",
             "properties":{
                "length":{
                   "type":"string",
                   "description":"Type of synopsis.",
                   "oneOf":[
                      {
                         "enum":[
                            "long"
                         ],
                         "description":"Straightforward, objective plot synopsis with up to 420 characters."
                      },
                      {
                         "enum":[
                            "short"
                         ],
                         "description":"Straightforward, objective plot synopsis with up to 150 characters."
                      },
                      {
                         "enum":[
                            "plain"
                         ],
                         "description":"Straightforward description, without credits, that is never critical."
                      },
                      {
                         "enum":[
                            "extended"
                         ],
                         "description":"Straightforward, objective plot synopsis with up to 2000 characters."
                      },
                      {
                         "enum":[
                            "source"
                         ],
                         "description":"Synopsis supplied by the channel on which the show is broadcast."
                      },
                      {
                         "enum":[
                            "review"
                         ],
                         "description":"Movie review."
                      }
                   ]
                },
                "in":{
                   "type":"string",
                   "description":"Language of the synopsis."
                },
                "synopsis":{
                   "type":"string",
                   "description":"The synopsis."
                },
                "cuts":{
                   "type":"string",
                   "description":"Character positions at which you can end the synopsis to conserve space. A cut number is the number of the last character to include, not the first character to cut. Add a period after that point if there is no ending punctuation (a period or a period followed by a single of double quotation mark)."
                }
             },
             "required":[
                "length",
                "in"
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_season":{
                   "type":"object",
                   "description":"ID to use in a data_season request to get information about the season.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_season_synopses":{
                   "type":"object",
                   "description":"ID to use in a data_season_synopses request to get synopses of the season.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_season",
                "data_season_synopses"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# Group Episode

This section documents the calls that return data about an episode in a TV series.

*Design Note:* The `data_episode` ID for an episode identifies the episode in all of the following API calls.
- [data_episode](/#reference/episode/dataepisode)
- [data_delta_episode](/#reference/episode/datadeltaepisode)
- [data_episode_aired](/#reference/episode/dataepisodeaired)
- [data_episode_credits/cast](/#reference/episode/dataepisodecreditscast)
- [data_episode_credits/crew](/#reference/episode/dataepisodecreditscrew)
- [data_episode_credits/credits](/#reference/episode/dataepisodecreditscredits)
- [data_episode_ratings](/#reference/episode/dataepisoderatings)
- [data_episode_releases](/#reference/episode/dataepisodereleases)
- [data_episode_synopses/collection](/#reference/episode/dataepisodesynopsescollection)
- [data_episode_synopses/best](/#reference/episode/dataepisodesynopsesbest)
- [data_episode_synopsis](/#reference/episode/dataepisodesynopsis)
- [data_episode_appearances](/#reference/tv-schedule/dataepisodeappearances) (in the TV Schedule section)
- [data_content_images/best](/#reference/image/datacontentimagesbest) (in the Image section)
- [data_content_images/collection](/#reference/image/datacontentimagescollection) (in the Image section)

# data_episode [/data_episode?id={id}&in={in}&in2={in2}&in3={in3}]
Returns information and editorial content about an episode in a TV series.

## GET
This request requires the `data_episode` ID for the episode, which is returned in responses to the following requests:
+  [data_airing](/#reference/tv-schedule/dataairing)
+  [data_season_episodes](/#reference/season/dataseasonepisodes)
+  [data_series_appearances](/#reference/tv-schedule/dataseriesappearances)
+  [discover_all_similar_video/content](/#reference/recommendations/discoverallsimilarvideocontent)
+  [discover_all_by_genre/content](/#reference/search/discoverallbygenrecontent)
+  [discover_all_video_by_search/content](/#reference/search/discoverallvideobysearchcontent)

+ Parameters
  + id (required, integer, `906208182`)
    The `data_episode` ID for the episode, returned in responses to the following requests:
      +  [data_airing](/#reference/tv-schedule/dataairing)
      +  [data_season_episodes](/#reference/season/dataseasonepisodes)
      +  [data_series_appearances](/#reference/tv-schedule/dataseriesappearances)
      +  [discover_all_similar_video/content](/#reference/recommendations/discoverallsimilarvideocontent)
      +  [discover_all_video_by_genre/content](/#reference/search/discoverallvideobygenrecontent)
      +  [discover_all_video_by_search/content](/#reference/search/discoverallvideobysearchcontent)
      
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)
```
{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "title": "episode",
    "description": " Information about an episode in a TV series. ",
    "properties": {
        "id": {
            "type": "integer",
            "description": "Rovi ID for the episode."
        },
        "in": {
            "type": "string",
            "description": "Language code."
        },
        "title": {
            "type": "string",
            "description": "Title of the episode."
        },
        "alts": {
            "type": "object",
            "description": "Alternate titles for the episode.",
            "properties": {
                "short15": {
                    "type": "string",
                    "description": "Title with up to 15 characters for a grid cell. Creative abbreviations used as needed."
                },
                "short30": {
                    "type": "string",
                    "description": "Title with up to 30 characters. Creative abbreviations used as needed."
                },
                "short8": {
                    "type": "string",
                    "description": "Title with up to 8 characters for a grid cell. Creative abbreviations used as needed."
                },
                "short50": {
                    "type": "string",
                    "description": "Title with up to 50 characters. Creative abbreviations used as needed."
                },
                "alias": {
                    "type": "string",
                    "description": "Alternate title by which a show has been distributed."
                },
                "alias2": {
                    "type": "string",
                    "description": "Another alternate title by which a show has been distributed."
                },
                "alias3": {
                    "type": "string",
                    "description": "Another alternate title by which a show has been distributed."
                },
                "alias4": {
                    "type": "string",
                    "description": "Another alternate title by which a show has been distributed."
                },
                "subtitle": {
                    "type": "string",
                    "description": "Subtitle of the show."
                }
            }
        },
        "image": {
            "type": "object",
            "description": "Information about the primary image associated with the episode.",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Rovi ID for the image."
                },
                "zoom": {
                    "type": "string",
                    "description": "How much of the subject appears in the picture.",
                    "oneOf": [
                        {
                            "enum": [
                                "head"
                            ],
                            "description": "Head or shoulders to top of head."
                        },
                        {
                            "enum": [
                                "torso"
                            ],
                            "description": "Chest or thigh to top of head."
                        },
                        {
                            "enum": [
                                "body"
                            ],
                            "description": "Body fills at least 80% of frame."
                        },
                        {
                            "enum": [
                                "framed"
                            ],
                            "description": "Full body fills 50% to 80% of frame."
                        },
                        {
                            "enum": [
                                "std"
                            ],
                            "description": "Full body fills 50% of frame or less."
                        }
                    ]
                },
                "links": {
                    "type": "object",
                    "properties": {
                        "media_image": {
                            "type": "object",
                            "description": "ID to use in a media_image request to get the image.",
                            "properties": {
                                "id": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "id"
                            ]
                        }
                    },
                    "required": [
                        "media_image"
                    ]
                }
            },
            "required": [
                "id",
                "zoom",
                "links"
            ]
        },
        "series": {
            "type": "object",
            "description": "Information about the TV series.",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Rovi ID for the TV series."
                },
                "in": {
                    "type": "string",
                    "description": "Language code."
                },
                "title": {
                    "type": "string",
                    "description": "Title of the TV series."
                },
                "links": {
                    "type": "object",
                    "properties": {
                        "data_series": {
                            "type": "object",
                            "description": "ID to use in a data_series request to get information about the TV series.",
                            "properties": {
                                "id": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "id"
                            ]
                        }
                    },
                    "required": [
                        "data_series"
                    ]
                }
            },
            "required": [
                "id",
                "links"
            ]
        },
        "withinSeries": {
            "type": "integer",
            "description": "Order of the episode in the series."
        },
        "season": {
            "type": "object",
            "description": "Information about the season the episode is in.",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Rovi ID for the season the episode is in."
                },
                "in": {
                    "type": "string",
                    "description": "Language code."
                },
                "title": {
                    "type": "string",
                    "description": "Title of the season."
                },
                "number": {
                    "type": "integer",
                    "description": "Season number."
                },
                "episodes": {
                    "type": "integer",
                    "description": "Number of episodes in the season."
                },
                "links": {
                    "type": "object",
                    "properties": {
                        "data_season": {
                            "type": "object",
                            "description": "ID to use in a data_season request to get information about the season the episode is in.",
                            "properties": {
                                "id": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "id"
                            ]
                        }
                    },
                    "required": [
                        "data_season"
                    ]
                }
            },
            "required": [
                "id",
                "links"
            ]
        },
        "withinSeason": {
            "type": "integer",
            "description": "Order of the episode in the season."
        },
        "year": {
            "type": "string",
            "description": "Year the episode was released. Element is omitted if the year is unknown."
        },
        "runtime": {
            "type": "string",
            "description": "Duration of the episode in seconds. Element is omitted if the duration is unknown."
        },
        "category": {
            "type": "string",
            "description": "Program category: News, Movie, Music, Sports, Lifestyle, Children's, Other."
        },
        "genres": {
            "type": "array",
            "description": "Genres the episode fits in.",
            "items": {
                "type": "string"
            }
        },
        "subGenres": {
            "type": "array",
            "description": "Subgenres the episode fits in.",
            "items": {
                "type": "string"
            }
        },
        "links": {
            "type": "object",
            "properties": {
                "data_episode": {
                    "type": "object",
                    "description": "ID to use in a data_episode request to get information about the episode.",
                    "properties": {
                        "id": {
                            "type": "integer"
                        }
                    },
                    "required": [
                        "id"
                    ]
                },
                "data_episode_credits": {
                    "type": "object",
                    "description": "ID to use in a data_episode_credits request to get credits for the episode.",
                    "properties": {
                        "id": {
                            "type": "integer"
                        }
                    },
                    "required": [
                        "id"
                    ]
                },
                "data_episode_ratings": {
                    "type": "object",
                    "description": "ID to use in a data_episode_ratings request to get parental ratings for the episode.",
                    "properties": {
                        "id": {
                            "type": "integer"
                        }
                    },
                    "required": [
                        "id"
                    ]
                },
                "data_episode_synopses": {
                    "type": "object",
                    "description": "ID to use in a data_episode_synopses request to get synopses for the episode.",
                    "properties": {
                        "id": {
                            "type": "integer"
                        }
                    },
                    "required": [
                        "id"
                    ]
                },
                "data_content_images": {
                    "type": "object",
                    "description": "ID to use in a data_content_images request to get images for the episode.",
                    "properties": {
                        "id": {
                            "type": "integer"
                        }
                    },
                    "required": [
                        "id"
                    ]
                }
            },
            "required": [
                "data_episode",
                "data_content_images"
            ]
        }
    },
    "required": [
        "id",
        "in",
        "series",
        "season",
        "links"
    ]
}
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_delta_episode [/data_delta_episode?day={day}&next={next}]
Returns IDs and ETags for [data_episode](/#reference/episode/dataepisode) response data that changed during a single UTC date one to four days ago.

Use this request as a first step toward updating your cached [data_episode](/#reference/episode/dataepisode) response data.

## GET
If more than 100 results are available, the response includes a __next__ field to identify the starting point of the next page of results.

+ Parameters
  + day (required, string matching \d{4}-\d{2}-\d{2}, `2015-08-23`)
    A UTC date, specified in YYYY-MM-DD format, that is one to four days before the current UTC date.
  + next (optional, integer)
    The starting point for the next page of results, returned in the __next__ field in a response to this request if another page of results is available.
    
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"episode",
       "properties":{
          "date":{
             "type":"string",
             "description":"UTC date requested."
          },
          "links":{
             "type":"object",
             "data_delta_episode":{
                "type":"object",
                "properties":{
                   "date":{
                      "type":"string",
                      "description":"UTC date requested."
                   },
                   "next":{
                      "type":"string",
                      "description":"Starting point for the next page of results."
                   }
                }
             }
          },
          "type":{
             "type":"string",
             "description":"Type of changed data."
          },
          "size":{
             "type":"integer",
             "description":"Number of items in this response."
          },
          "deltas":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"Rovi ID for data that changed."
                      },
                      "links":{
                         "type":"object",
                         "data_episode":{
                            "type":"object",
                            "properties":{
                               "id":{
                                  "type":"integer",
                                  "description":"ID to use in a data_episode request to get the changed data."
                               }
                            }
                         }
                      },
                      "etag":{
                         "type":"string",
                         "description":"ETag for the latest data for that ID."
                      }
                   }
                }
             ]
          }
       }
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_episode_aired [/data_episode_aired?id={id}&country={country}&page={page}]
Returns the original television broadcast date of an episode in a TV series in a country.

## GET
Available codes for the **country** parameter are:

| Code | Country                 | Code | Country                          |
| ---- | ----------------------- | ---- | -------------------------------- |
| AD   | Andorra                 | IN   | India                            |
| AI   | Anguilla                | IE   | Ireland                          |
| AG   | Antigua & Barbuda&emsp; | IT   | Italy                            |
| AR   | Argentina               | JM   | Jamaica                          |
| AW   | Aruba                   | LI   | Lichtenstein                     |
| AU   | Australia&emsp;         | LU   | Luxembourg                       |
| AT   | Austria                 | MY   | Malaysia                         |
| BS   | Bahamas                 | MT   | Malta                            |
| BB   | Barbados                | MX   | Mexico                           |
| BE   | Belgium                 | MC   | Monaco                           |
| BM   | Bermuda                 | MS   | Montserrat                       |
| BO   | Bolivia                 | NL   | Netherlands                      |
| BR   | Brazil                  | NI   | Nicaragua                        |
| VG   | British Virgin Islands&emsp; | NO   | Norway                      |
| CA   | Canada                  | PA   | Panama                           |
| CL   | Chile                   | PE   | Peru                             |
| CN   | China                   | PH   | Philippines                      |
| CO   | Colombia                | PL   | Poland                           |
| CR   | Costa Rica              | PT   | Portugal                         |
| CW   | Curacao                 | RU   | Russia                           |
| DK   | Denmark                 | KN   | Saint Kitts & Nevis              |
| DO   | Dominican Republic&emsp; | LC   | Saint Lucia                     |
| EC   | Ecuador                 | MF   | Saint Martin                     |
| SV   | El Salvador&emsp;       | VC   | Saint Vincent and the Grenadines |
| FO   | Faroe Islands&emsp;     | SG   | Singapore                        |
| FI   | Finland                 | ES   | Spain                            |
| FR   | France                  | SE   | Sweden                           |
| DE   | Germany                 | CH   | Switzerland                      |
| GI   | Gibraltar               | TW   | Taiwan                           |
| GD   | Grenada                 | TT   | Trinidad & Tobago                |
| GT   | Guatemala               | TR   | Turkey                           |
| GY   | Guyana                  | TC   | Turks & Caicos                   |
| HN   | Honduras                | GB   | United Kingdom*                  |
| HK   | Hong Kong               | US   | United States                    |
| IS   | Iceland                 | VE   | Venezuela                        |
\* Includes Wales, Scotland, and Northern Ireland.

+ Parameters
  + id (required, integer, `906208182`)
    The `data_episode_aired` ID for the episode, returned in responses to [data_episode](/#reference/episode/dataepisode) requests. A `data_episode_aired` ID is the same as the `data_episode` ID for the episode.
  + country (optional, string, `US`)
    Country, stated as one of the uppercase, ISO 3166-1, country codes in the table in the middle panel. If not specified, original broadcast dates for all countries are returned.    
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.

+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"episode_aired",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the show."
          },
          "aired":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "properties":{
                      "country":{
                         "type":"string",
                         "description":"Country."
                      },
                      "date":{
                         "type":"string",
                         "description":"Date the show was first broadcast in the country."
                      }
                   },
                   "required":[
                      "country",
                      "date"
                   ]
                }
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_episode":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"ID to use in a data_episode request to return information about the episode."
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_episode_aired":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"ID to use in a data_episode_aired request to return the date the episode was first broadcast."
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_movie":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"ID to use in a data_movie request to return information about the movie."
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_movie_aired":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"ID to use in a data_movie_aired request to return the date the movie was first broadcast."
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_other":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"ID to use in a data_other request to return information about the program."
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_other_aired":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"ID to use in a data_other_aired request to return the date the program was first broadcast."
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             }
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "aired",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_episode_credits/cast [/data_episode_credits/cast?id={id}&page={page}&by={by}&by2={by2}&by3={by3}&by4={by4}&by5={by5}&in={in}&in2={in2}&in3={in3}] 
Returns cast credits for an episode in a TV series.

## GET
This request requires the `data_episode_credits` ID for the episode, which is returned in responses to the [data_episode](/#reference/episode/dataepisode) request. A `data_episode_credits` ID is the same as the `data_episode` ID for the episode.

+ Parameters
  + id (required, integer, `906208182`)
    The `data_episode_credits` ID for the episode, returned in responses to the [data_episode](/#reference/episode/dataepisode) request. A `data_episode_credits` ID is the same as the `data_episode` ID for the episode.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
  + by (optional, string, `role`)
    Response field or object.field to sort by. Child fields must be single-valued, that is, not within an array.
      +  For an ascending sort, replace {by} with the field name like this: __role__ or __person.alts.last__. For a descending sort, precede the field name with a minus (-) sign like this: __-role__.
      +  To start with items that contain a particular field, replace {by} with a field-equals-not-null, like this: __person.image=!null__. To start with items that are missing a particular field, specify a field-equals-null, like this: __person.image=null__. 
      +  To start with items that contain a particular value in a top-level field, replace {by} with field-equals-value, like this: __role=Sheldon Cooper__. To end with items that contain a particular value, precede the value with an exclamation like this: __role=!Sheldon Cooper__.
      
  + by2 (optional, string, `role`)
    Second level sort specification.
  + by3 (optional, string, `role`)
    Third level sort specification.
  + by4 (optional, string, `role`)
    Fourth level sort specification.
  + by5 (optional, string, `role`)
    Fifth level sort specification.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
    
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"episode_credits",
       "description":"Credits for a episode.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the episode."
          },
          "credits":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Credits for the episode.",
                   "properties":{
                      "in":{
                         "type":"string",
                         "description":"Language code."
                      },
                      "role":{
                         "type":"string",
                         "description":"Character portrayed."
                      },
                      "credit":{
                         "type":"string",
                         "description":"The credit."
                      },
                      "type":{
                         "type":"string",
                         "description":"Type of credit.",
                         "oneOf":[
                            {
                               "enum":[
                                  "actor"
                               ],
                               "description":"Actor."
                            },
                            {
                               "enum":[
                                  "company"
                               ],
                               "description":"Production company."
                            },
                            {
                               "enum":[
                                  "creator"
                               ],
                               "description":"Creator."
                            },
                            {
                               "enum":[
                                  "director"
                               ],
                               "description":"Director."
                            },
                            {
                               "enum":[
                                  "producer"
                               ],
                               "description":"Producer."
                            },
                            {
                               "enum":[
                                  "studio"
                               ],
                               "description":"Studio."
                            },
                            {
                               "enum":[
                                  "subject"
                               ],
                               "description":"Person who is the subject of the movie or program."
                            },
                            {
                               "enum":[
                                  "writer"
                               ],
                               "description":"Writer."
                            }
                         ]
                      },
                      "isCast":{
                         "type":"boolean",
                         "description":"Whether the credit is a cast credit: true or false."
                      },
                      "person":{
                         "type":"object",
                         "description":"Information about the person who earned the credit.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the person."
                            },
                            "name":{
                               "type":"string",
                               "description":"Name of the person."
                            },
                            "alts":{
                               "type":"object",
                               "properties":{
                                  "first":{
                                     "type":"string",
                                     "description":"First name of the person."
                                  },
                                  "last":{
                                     "type":"string",
                                     "description":"Last name of the person."
                                  }
                               }
                            },
                            "links":{
                               "type":"object",
                               "properties":{
                                  "data_person":{
                                     "type":"object",
                                     "description":"ID to use in a data_person request to get details about the person.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  }
                               },
                               "required":[
                                  "data_person"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "name",
                            "links"
                         ]
                      },
                      "organization":{
                         "type":"object",
                         "description":"Information about the company that earned the credit.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the company that earned the credit."
                            },
                            "name":{
                               "type":"string",
                               "description":"Name of the company."
                            },
                            "links":{
                               "type":"object",
                               "properties":{
                                  "data_organization":{
                                     "type":"object",
                                     "description":"ID to use in a data_organization request to get details about the company.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  }
                               },
                               "required":[
                                  "data_organization"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "links"
                         ]
                      }
                   },
                   "required":[
                      "in",
                      "credit"
                   ]
                }
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_episode_credits":{
                   "type":"object",
                   "description":"ID to use in a data_episode_credits request to get credits for the episode.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_episode":{
                   "type":"object",
                   "description":"ID to use in a data_episode request to get information about the episode.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_episode_credits",
                "data_episode"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_episode_credits/crew [/data_episode_credits/crew?id={id}&page={page}&by={by}&by2={by2}&by3={by3}&by4={by4}&by5={by5}&in={in}&in2={in2}&in3={in3}] 
Returns crew credits for an episode in a TV series.

## GET
This request requires the `data_episode_credits` ID for the episode, which is returned in responses to the [data_episode](/#reference/episode/dataepisode) request. A `data_episode_credits` ID is the same as the `data_episode` ID for the episode.

+ Parameters
  + id (required, integer, `906208182`)
    The `data_episode_credits` ID for the episode, returned in responses to the [data_episode](/#reference/episode/dataepisode) request. A `data_episode_credits` ID is the same as the `data_episode` ID for the episode.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
  + by (optional, string, `type`)
    Response field or object.field to sort by. Child fields must be single-valued, that is, not within an array.
      +  For an ascending sort, replace {by} with the field name like this: __credit__ or __person.alts.last__. For a descending sort, precede the field name with a minus (-) sign like this: __-credit__.
      +  To start with items that contain a particular field, replace {by} with a field-equals-not-null, like this: __person.image=!null__. To start with items that are missing a particular field, specify a field-equals-null, like this: __type=null__. 
      +  To start with items that contain a particular value in a top-level field, replace {by} with field-equals-value, like this: __type=director__. To end with items that contain a particular value, precede the value with an exclamation like this: __type=!company__.
      
  + by2 (optional, string, `type`)
    Second level sort specification.
  + by3 (optional, string, `type`)
    Third level sort specification.
  + by4 (optional, string, `type`)
    Fourth level sort specification.
  + by5 (optional, string, `type`)
    Fifth level sort specification.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
    
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"episode_credits",
       "description":"Credits for a episode.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the episode."
          },
          "credits":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Credits for the episode.",
                   "properties":{
                      "in":{
                         "type":"string",
                         "description":"Language code."
                      },
                      "role":{
                         "type":"string",
                         "description":"Character portrayed."
                      },
                      "credit":{
                         "type":"string",
                         "description":"The credit."
                      },
                      "type":{
                         "type":"string",
                         "description":"Type of credit.",
                         "oneOf":[
                            {
                               "enum":[
                                  "actor"
                               ],
                               "description":"Actor."
                            },
                            {
                               "enum":[
                                  "company"
                               ],
                               "description":"Production company."
                            },
                            {
                               "enum":[
                                  "creator"
                               ],
                               "description":"Creator."
                            },
                            {
                               "enum":[
                                  "director"
                               ],
                               "description":"Director."
                            },
                            {
                               "enum":[
                                  "producer"
                               ],
                               "description":"Producer."
                            },
                            {
                               "enum":[
                                  "studio"
                               ],
                               "description":"Studio."
                            },
                            {
                               "enum":[
                                  "subject"
                               ],
                               "description":"Person who is the subject of the movie or program."
                            },
                            {
                               "enum":[
                                  "writer"
                               ],
                               "description":"Writer."
                            }
                         ]
                      },
                      "isCast":{
                         "type":"boolean",
                         "description":"Whether the credit is a cast credit: true or false."
                      },
                      "person":{
                         "type":"object",
                         "description":"Information about the person who earned the credit.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the person."
                            },
                            "name":{
                               "type":"string",
                               "description":"Name of the person."
                            },
                            "alts":{
                               "type":"object",
                               "properties":{
                                  "first":{
                                     "type":"string",
                                     "description":"First name of the person."
                                  },
                                  "last":{
                                     "type":"string",
                                     "description":"Last name of the person."
                                  }
                               }
                            },
                            "links":{
                               "type":"object",
                               "properties":{
                                  "data_person":{
                                     "type":"object",
                                     "description":"ID to use in a data_person request to get details about the person.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  }
                               },
                               "required":[
                                  "data_person"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "name",
                            "links"
                         ]
                      },
                      "organization":{
                         "type":"object",
                         "description":"Information about the company that earned the credit.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the company that earned the credit."
                            },
                            "name":{
                               "type":"string",
                               "description":"Name of the company."
                            },
                            "links":{
                               "type":"object",
                               "properties":{
                                  "data_organization":{
                                     "type":"object",
                                     "description":"ID to use in a data_organization request to get details about the company.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  }
                               },
                               "required":[
                                  "data_organization"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "links"
                         ]
                      }
                   },
                   "required":[
                      "in",
                      "credit"
                   ]
                }
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_episode_credits":{
                   "type":"object",
                   "description":"ID to use in a data_episode_credits request to get credits for the episode.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_episode":{
                   "type":"object",
                   "description":"ID to use in a data_episode request to get information about the episode.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_episode_credits",
                "data_episode"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_episode_credits/credits [/data_episode_credits/credits?id={id}&page={page}&by={by}&by2={by2}&by3={by3}&by4={by4}&by5={by5}&in={in}&in2={in2}&in3={in3}] 
Returns both cast and crew credits for an episode in a TV series.

## GET
This request requires the `data_episode_credits` ID for the episode, which is returned in responses to the [data_episode](/#reference/episode/dataepisode) request. A `data_episode_credits` ID is the same as the `data_episode` ID for the episode.

+ Parameters
  + id (required, integer, `906208182`)
    The `data_episode_credits` ID for the episode, returned in responses to the [data_episode](/#reference/episode/dataepisode) request. A `data_episode_credits` ID is the same as the `data_episode` ID for the episode.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
  + by (optional, string, `credit`)
    Response field or object.field to sort by. Child fields must be single-valued, that is, not within an array.
      +  For an ascending sort, replace {by} with the field name like this: __credit__ or __person.alts.last__. For a descending sort, precede the field name with a minus (-) like this: __-credit__.
      +  To start with items that contain a particular field, replace {by} with field-equals-not-null, like this: __person.image=!null__. To start with items that are missing a particular field, specify field-equals-null, like this: __role=null__. 
      +  To start with items that contain a particular value in a top-level field, replace {by} with field-equals-value, like this: __type=director__. To end with items that contain a particular value, precede the value with an exclamation like this: __type=!company__.
    
  + by2 (optional, string, `credit`)
    Second level sort specification.
  + by3 (optional, string, `credit`)
    Third level sort specification.
  + by4 (optional, string, `credit`)
    Fourth level sort specification.
  + by5 (optional, string, `credit`)
    Fifth level sort specification.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
    
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"episode_credits",
       "description":"Credits for a episode.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the episode."
          },
          "credits":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Credits for the episode.",
                   "properties":{
                      "in":{
                         "type":"string",
                         "description":"Language code."
                      },
                      "role":{
                         "type":"string",
                         "description":"Character portrayed."
                      },
                      "credit":{
                         "type":"string",
                         "description":"The credit."
                      },
                      "type":{
                         "type":"string",
                         "description":"Type of credit.",
                         "oneOf":[
                            {
                               "enum":[
                                  "actor"
                               ],
                               "description":"Actor."
                            },
                            {
                               "enum":[
                                  "company"
                               ],
                               "description":"Production company."
                            },
                            {
                               "enum":[
                                  "creator"
                               ],
                               "description":"Creator."
                            },
                            {
                               "enum":[
                                  "director"
                               ],
                               "description":"Director."
                            },
                            {
                               "enum":[
                                  "producer"
                               ],
                               "description":"Producer."
                            },
                            {
                               "enum":[
                                  "studio"
                               ],
                               "description":"Studio."
                            },
                            {
                               "enum":[
                                  "subject"
                               ],
                               "description":"Person who is the subject of the movie or program."
                            },
                            {
                               "enum":[
                                  "writer"
                               ],
                               "description":"Writer."
                            }
                         ]
                      },
                      "isCast":{
                         "type":"boolean",
                         "description":"Whether the credit is a cast credit: true or false."
                      },
                      "person":{
                         "type":"object",
                         "description":"Information about the person who earned the credit.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the person."
                            },
                            "name":{
                               "type":"string",
                               "description":"Name of the person."
                            },
                            "alts":{
                               "type":"object",
                               "properties":{
                                  "first":{
                                     "type":"string",
                                     "description":"First name of the person."
                                  },
                                  "last":{
                                     "type":"string",
                                     "description":"Last name of the person."
                                  }
                               }
                            },
                            "links":{
                               "type":"object",
                               "properties":{
                                  "data_person":{
                                     "type":"object",
                                     "description":"ID to use in a data_person request to get details about the person.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  }
                               },
                               "required":[
                                  "data_person"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "name",
                            "links"
                         ]
                      },
                      "organization":{
                         "type":"object",
                         "description":"Information about the company that earned the credit.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the company that earned the credit."
                            },
                            "name":{
                               "type":"string",
                               "description":"Name of the company."
                            },
                            "links":{
                               "type":"object",
                               "properties":{
                                  "data_organization":{
                                     "type":"object",
                                     "description":"ID to use in a data_organization request to get details about the company.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  }
                               },
                               "required":[
                                  "data_organization"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "links"
                         ]
                      }
                   },
                   "required":[
                      "in",
                      "credit"
                   ]
                }
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_episode_credits":{
                   "type":"object",
                   "description":"ID to use in a data_episode_credits request to get credits for the episode.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_episode":{
                   "type":"object",
                   "description":"ID to use in a data_episode request to get information about the episode.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_episode_credits",
                "data_episode"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_episode_ratings [/data_episode_ratings?id={id}&country={country}] 
Returns parental ratings for an episode in a TV series.

## GET
This request requires the `data_episode_ratings` ID for the episode, which is returned in responses to the [data_episode](/#reference/episode/dataepisode) request. A `data_episode_ratings` ID is the same as the `data_episode` ID for the episode.

+ Parameters
  + id (required, integer, `906208182`)
    The `data_episode_ratings` ID for the episode, returned in responses to the [data_episode](/#reference/episode/dataepisode) request. A `data_episode_ratings` ID is the same as the `data_episode` ID for the episode.
  + country (required, string, `US`)
    Country for which you want parental ratings, specified as one of the following ISO 3166-1 alpha-2 codes:
    <table><tr>
    <th>Code</th><th>Country</th><th>Code</th><th>Country</th>
    </tr><tr>
    <td>AR</td><td><p>Argentina</p></td><td>MX</td><td><p>Mexico</p></td>
    </tr><tr>
    <td>AT</td><td><p>Austria</p></td><td>NL</td><td><p>Netherlands</p></td>
    </tr><tr>
    <td>BE</td><td><p>Belgium</p></td><td>NO</td><td><p>Norway</p></td>
    </tr><tr>
    <td>BR</td><td><p>Brazil</p></td><td>PE</td><td><p>Peru</p></td>
    </tr><tr>
    <td>CA</td><td><p>Canada</p></td><td>PL</td><td><p>Poland</p></td>
    </tr><tr>
    <td>CL</td><td><p>Chile</p></td><td>PT</td><td><p>Portugal</p></td>
    </tr><tr>
    <td>CO</td><td><p>Colombia</p></td><td>ES</td><td><p>Spain</p></td>
    </tr><tr>
    <td>DK</td><td><p>Denmark</p></td><td>SE</td><td><p>Sweden</p></td>
    </tr><tr>
    <td>FI</td><td><p>Finland</p></td><td>CH</td><td><p>Switzerland</p></td>
    </tr><tr>
    <td>FR</td><td><p>France</p></td><td>TC</td><td><p>Turks & Caicos</p></td>
    </tr><tr>
    <td>DE</td><td><p>Germany</p></td><td>GB</td><td><p>United Kingdom*</p></td>
    </tr><tr>
    <td>IE</td><td><p>Ireland</p></td><td>US</td><td><p>United States</p></td>
    </tr><tr>
    <td>IT</td><td><p>Italy</p></td><td>VE</td><td><p>Venezuela</p></td>
    </tr></table><br/>*Includes Wales, Scotland, and Northern Ireland.
    
+ Response 200 (application/json)
```
    {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "title": "episode_ratings",
        "description": "TV parental ratings for an episode in a TV series.",
        "properties": {
            "id": {
                "type": "integer",
                "description": "Rovi ID for the episode."
            },
            "ratings": {
                "type": "array",
                "items": [
                    {
                        "type": "object",
                        "description": "TV parental ratings for the episode.",
                        "properties": {
                            "in": {
                                "type": "string"
                            },
                            "type": {
                                "type": "string",
                                "description": "Source of the parental rating."
                            },
                            "rating": {
                                "type": "string",
                                "description": "The parental rating."
                            },
                            "medium": {
                                "type": "string",
                                "description": "Media that this rating applies to.",
                                "oneOf": [
                                    {
                                        "enum": [
                                            "movie"
                                        ],
                                        "description": "Theatrical film."
                                    },
                                    {
                                        "enum": [
                                            "tv"
                                        ],
                                        "description": "Television."
                                    },
                                    {
                                        "enum": [
                                            "stars"
                                        ],
                                        "description": "TV series qualitative rating from 1 to 4 stars. Rated by Rovi."
                                    },
                                    {
                                        "enum": [
                                            "age"
                                        ],
                                        "description": "TV series youngest appropriate age rating. Rated by Rovi."
                                    },
                                    {
                                        "enum": [
                                            "family"
                                        ],
                                        "description": "TV series family friendly rating on a scale of 0 to 10."
                                    }
                                ]
                            },
                            "countries": {
                                "type": "array",
                                "description": "Countries the parental rating applies to.",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "reasons": {
                                "type": "array",
                                "description": "Reasons for the rating.",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "subrating": {
                                "type": "string",
                                "description": "Content warning labels that apply to the program."
                            }
                        },
                        "required": [
                            "in",
                            "type",
                            "rating"
                        ]
                    }
                ]
            },
            "links": {
                "type": "object",
                "properties": {
                    "data_episode_ratings": {
                        "type": "object",
                        "description": "ID to use in a data_episode_ratings request to get parental ratings for the episode.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "data_episode": {
                        "type": "object",
                        "description": "ID to use in a data_episode request to get information about the episode",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                },
                "required": [
                    "data_episode_ratings",
                    "data_episode"
                ]
            },
            "page": {
                "type": "integer",
                "description": "Pagination index of the request."
            },
            "size": {
                "type": "integer",
                "description": "Number of elements returned."
            },
            "total": {
                "type": "integer",
                "description": "Total number of elements."
            }
        },
        "required": [
            "id",
            "links"
        ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_episode_releases [/data_episode_releases?id={id}&in={in}&in2={in2}&in3={in3}&page={page}]
Returns information about releases of an episode in a TV series. Releases differ in language, content, or title.

## GET
This request requires the `data_episode_releases` ID for the episode, which is returned in responses to [data_episode](/#reference/episode/dataepisode) requests. A `data_episode_releases` ID is the same as the `data_episode` ID for the episode.

+ Parameters
  + id (required, integer, `906208182`)
    The `data_episode_releases` ID for the episode, returned in responses to [data_episode](/#reference/episode/dataepisode) requests. A `data_episode_releases` ID is the same as the `data_episode` ID for the episode.
  + in (optional, string)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
     
+ Response 200 (application/json)

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_episode_synopses/collection [/data_episode_synopses/collection?id={id}&in={in}&in2={in2}&in3={in3}]
Returns a range of synopses for an episode in a TV series.

## GET
This request requires the `data_episode_synopses` ID for the episode, which is returned in responses to [data_episode](/#reference/episode/dataepisode) requests. The `data_episode_synopses` ID is the same as the `data_episode` ID for the episode.

+ Parameters
  + id (required, integer, `906208182`)
    The `data_episode_synopses` ID for the episode, returned in responses to [data_episode](/#reference/episode/dataepisode) requests.  The `data_episode_synopses` ID is the same as the `data_episode` ID for the episode.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_episode_synopses/best [/data_episode_synopses/best?id={id}&length={length}&length2={length2}&length3={length3}&length4={length4}&in={in}&in2={in2}&in3={in3}]
Returns the best available synopsis of an episode in a TV series, based on type:
+  `long` &mdash; Straightforward, objective description of the episode in up to 420 characters.
+  `short` &mdash; A shorter version of the "long" description.
+  `plain` &mdash; A straightforward description without credits that is never critical.
+  `extended` &mdash; A more detailed description than the "long" description, up to 2000 characters.

## GET
This request requires the `data_episode_synopses` ID for the episode, which is returned in responses to [data_episode](/#reference/episode/dataepisode) requests. The `data_episode_synopses` ID is the same as the `data_episode` ID for the season.

+ Parameters
  + id (required, integer, `906208182`)
    The `data_episode_synopses` ID for the episode, returned in responses to [data_episode](/#reference/episode/dataepisode) requests.  The `data_episode_synopses` ID is the same as the `data_episode` ID for the episode.
  + length (required, string enum, `short`)
    First choice for type of description:
    <table>
    <tr><th>Value</th><th>Description</th>
    </tr><tr>
    <td>long</td><td><p>Straightforward, objective description of the season in up to 420 characters.</p></td>
    </tr><tr>
    <td>short</td><td><p>A shorter version of the "long" description.</p></td>
    </tr><tr>
    <td>plain</td><td><p>A straightforward description without credits that is never critical.</p></td>
    </tr><tr>
    <td>extended</td><td><p>A more detailed description than the "long" description, up to 2000 characters.</p></td>
    </tr></table>
    
  + length2 (optional, string enum, `long`)
    Second choice for type of description.
  + length3 (optional, string enum, `plain`)
    Third choice for type of description.
  + length4 (optional, string enum, `extended`)
    Fourth choice for type of description.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_episode_synopsis [/data_episode_synopsis?id={id}&in={in}&in2={in2}&in3={in3}]
Returns a synopsis of an episode in a TV series.

__NOTE: This request is now deprecated.__ Use one of the `data_episode_synopses` requests instead:
+  [data_episode_synopses/best](/#reference/episode/dataepisodesynopsesbest)
+  [data_episode_synopses/collection](/#reference/episode/dataepisodesynopsescollection)

## GET
This request requires the `data_episode_synopses` ID for the episode, which is returned in responses to [data_episode](/#reference/episode/dataepisode) requests. A `data_episode_synopses` ID is the same as the `data_episode` ID for the episode.

+ Parameters
  + id (required, integer, `906208182`)
    The `data_episode_synopsis` ID for the episode, returned in responses to [data_episode](/#reference/episode/dataepisode) requests. A `data_episode_synopsis` ID is the same as the `data_episode` ID for the episode.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)
```
    {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "title": "episode_synopses",
        "description": "Synopses of an episode in a TV series.",
        "properties": {
            "id": {
                "type": "integer",
                "description": "Rovi ID for the episode."
            },
            "synopsis": {
                "type": "object",
                "description": "Synopsis of the episode.",
                "properties": {
                    "length": {
                        "type": "string",
                        "description": "Type of synopsis.",
                        "oneOf": [
                            {
                                "enum": [
                                    "long"
                                ],
                                "description": "Straightforward, objective plot synopsis with up to 420 characters."
                            },
                            {
                                "enum": [
                                    "short"
                                ],
                                "description": "Straightforward, objective plot synopsis with up to 150 characters."
                            },
                            {
                                "enum": [
                                    "plain"
                                ],
                                "description": "Straightforward description, without credits, that is never critical."
                            },
                            {
                                "enum": [
                                    "extended"
                                ],
                                "description": "Straightforward, objective plot synopsis with up to 2000 characters."
                            },
                            {
                                "enum": [
                                    "source"
                                ],
                                "description": "Synopsis supplied by the channel on which the show is broadcast."
                            },
                            {
                                "enum": [
                                    "review"
                                ],
                                "description": "Movie review."
                            }
                        ]
                    },
                    "in": {
                        "type": "string",
                        "description": "Language of the synopsis."
                    },
                    "synopsis": {
                        "type": "string",
                        "description": "The synopsis."
                    },
                    "cuts": {
                        "type": "string",
                        "description": "Character positions at which you can end the synopsis to conserve space. A cut number is the number of the last character to include, not the first character to cut. Add a period after that point if there is no ending punctuation (a period or a period followed by a single of double quotation mark)."
                    }
                },
                "required": [
                    "length",
                    "in"
                ]
            },
            "links": {
                "type": "object",
                "properties": {
                    "data_episode": {
                        "type": "object",
                        "description": "ID to use in a data_episode request to get information about the episode.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "data_episode_synopses": {
                        "type": "object",
                        "description": "ID to use in a data_episode_synopses request to get synopses of the episode.",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                },
                "required": [
                    "data_episode",
                    "data_episode_synopses"
                ]
            },
            "page": {
                "type": "integer",
                "description": "Pagination index of the request."
            },
            "size": {
                "type": "integer",
                "description": "Number of elements returned."
            },
            "total": {
                "type": "integer",
                "description": "Total number of elements."
            }
        },
        "required": [
            "id",
            "links"
        ]
    }
    ```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# Group Other

This section documents the calls that return data about a show that is not a movie or TV series.

*Design Note:* The `data_other` ID for an show identifies the show in all of the following API calls.
- [data_other](/#reference/other/dataother)
- [data_delta_other](/#reference/other/datadeltaother)
- [data_other_aired](/#reference/other/dataotheraired)
- [data_other_credits/cast](/#reference/other/dataothercreditscast)
- [data_other_credits/crew](/#reference/other/dataothercreditscrew)
- [data_other_credits/credits](/#reference/other/dataothercreditscredits)
- [data_other_ratings](/#reference/other/dataotherratings)
- [data_other_related](/#reference/other/dataotherrelated)
- [data_other_synopsis](/#reference/other/dataothersynopsis)
- [data_other_awards](/#reference/awards/dataotherawards) (in the Awards section)
- [data_other_appearances](/#reference/tv-schedule/dataotherappearances) (in the TV Schedule section)
- [data_content_images/best](/#reference/image/datacontentimagesbest) (in the Image section)
- [data_content_images/collection](/#reference/image/datacontentimagescollection) (in the Image section)

# data_other [/data_other?id={id}&in={in}&in2={in2}&in3={in3}]
Returns information, editorial content, social media resources, and Rotten Tomatoes score for a show that is not a movie or TV series.

## GET
This request requires the `data_other` ID for the show, which is returned in responses to the following requests:
+  [data_airing](/#reference/tv-schedule/dataairing)
+  [data_other_appearances](/#reference/tv-schedule/dataotherappearances)
+  [discover_all_similar_video/content](/#reference/recommendations/discoverallsimilarvideocontent)
+  [discover_all_video_by_genre/content](/#reference/search/discoverallvideobygenrecontent)
+  [discover_all_video_by_search/content](/#reference/search/discoverallvideobysearchcontent)

+ Parameters
  + id (required, integer, `914271490`)
    The `data_other` ID for the show, returned in responses to the following requests:
      +  [data_airing](/#reference/tv-schedule/dataairing)
      +  [data_other_appearances](/#reference/tv-schedule/dataotherappearances)
      +  [discover_all_similar_video/content](/#reference/recommendations/discoverallsimilarvideocontent)
      +  [discover_all_video_by_genre/content](/#reference/search/discoverallvideobygenrecontent)
      +  [discover_all_video_by_search/content](/#reference/search/discoverallvideobysearchcontent)
      
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)
```
    {
       "$schema":"http://json-schema.org/draft-04/schema#",
       "type":"object",
       "title":"other",
       "description":"Information about a show that is not a movie or episode in a TV series.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the show."
          },
          "in":{
             "type":"string",
             "description":"Language of the show."
          },
          "title":{
             "type":"string",
             "description":"Show title."
          },
          "alts":{
             "type":"object",
             "description":"Alternate titles for the show.",
             "properties":{
                "short15":{
                   "type":"string",
                   "description":"Title with up to 15 characters for a grid cell. Creative abbreviations used as needed."
                },
                "short30":{
                   "type":"string",
                   "description":"Title with up to 30 characters. Creative abbreviations used as needed."
                },
                "short8":{
                   "type":"string",
                   "description":"Title with up to 8 characters for a grid cell. Creative abbreviations used as needed."
                },
                "short50":{
                   "type":"string",
                   "description":"Title with up to 50 characters. Creative abbreviations used as needed."
                },
                "alias":{
                   "type":"string",
                   "description":"Alternate title by which a show has been distributed."
                },
                "alias2":{
                   "type":"string",
                   "description":"Another alternate title by which a show has been distributed."
                },
                "alias3":{
                   "type":"string",
                   "description":"Another alternate title by which a show has been distributed."
                },
                "alias4":{
                   "type":"string",
                   "description":"Another alternate title by which a show has been distributed."
                },
                "subtitle":{
                   "type":"string",
                   "description":"Another alternate title by which a show has been distributed."
                }
             }
          },
          "image":{
             "type":"object",
             "description":"mage.",
             "properties":{
                "id":{
                   "type":"integer",
                   "description":"Rovi ID for the image."
                },
                "zoom":{
                   "type":"string",
                   "description":"How much of the subject appears in the picture."
                }
             },
             "required":[
                "id",
                "zoom"
             ]
          },
          "year":{
             "type":"integer",
             "description":"Year the program was first released."
          },
          "runtime":{
             "type":"integer",
             "description":"Duration of the program in seconds."
          },
          "category":{
             "type":"string",
             "description":"Program category: News, Movie, Music, Sports, Lifestyle, Children's, Other."
          },
          "genres":{
             "type":"array",
             "description":"Genres the program fits in.",
             "items":{
                "type":"string"
             }
          },
          "subGenres":{
             "type":"array",
             "description":"Subgenres the program fits in.",
             "items":{
                "type":"string"
             }
          },
          "moods":{
             "type":"array",
             "description":"Terms that describe expressive characteristics of the program.",
             "items":{
                "type":"string"
             }
          },
          "tones":{
             "type":"array",
             "description":"Feelings and attitudes that motivate or fit with the program.",
             "items":{
                "type":"string"
             }
          },
          "themes":{
             "type":"array",
             "description":"Topics and circumstances that motivate or fit with the program.",
             "items":{
                "type":"string"
             }
          },
          "keywords":{
             "type":"array",
             "description":"Keywords that describe characteristics of the program.",
             "items":{
                "type":"string"
             }
          },
          "aesthetics":{
             "type":"array",
             "description":"Artistic styles that apply to the program, distinct techniques filmmakers employ for a specific effect.",
             "items":{
                "type":"string"
             }
          },
          "audiences":{
             "type":"array",
             "description":"Audience types that the program is intended to appeal to.",
             "items":{
                "type":"string"
             }
          },
          "periods":{
             "type":"array",
             "description":"Time periods when the program story takes place.",
             "items":{
                "type":"string"
             }
          },
          "characters":{
             "type":"array",
             "description":"Character types that appear in the program.",
             "items":{
                "type":"string"
             }
          },
          "importance":{
             "type":"array",
             "description":"Rating phrases that apply to a review of the program.",
             "items":{
                "type":"string"
             }
          },
          "flags":{
             "type":"array",
             "description":"Theme phrases that apply to a review of the program.",
             "items":{
                "type":"string"
             }
          },
          "links":{
             "type":"object",
             "properties":{
                "data_other":{
                   "type":"object",
                   "description":"ID to use in a data_other request to get information about the program.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_other_credits":{
                   "type":"object",
                   "description":"ID to use in a data_other_credits request to get credits for the program.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_other_ratings":{
                   "type":"object",
                   "description":"ID to use in a data_other_ratings request to get parental ratings for the program.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_other_synopses":{
                   "type":"object",
                   "description":"ID to use in a data_other_synopsis request to get a synopsis of the program.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_content_images":{
                   "type":"object",
                   "description":"ID to use in a data_content_images request to get images for the program.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_other",
                "data_other_credits",
                "data_other_ratings",
                "data_other_synopses",
                "data_content_images"
             ]
          }
       },
       "required":[
          "id",
          "in",
          "year",
          "runtime",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_delta_other [/data_delta_other?day={day}&next={next}]
Returns IDs and ETags for [data_other](/#reference/other/dataother) response data that changed during a single UTC date one to four days ago.

Use this request as a first step toward updating your cached [data_other](/#reference/other/dataother) response data.

## GET
If more than 100 results are available, the response includes a __next__ field to identify the starting point of the next page of results.

+ Parameters
  + day (required, string matching \d{4}-\d{2}-\d{2}, `2015-06-03`)
    A UTC date, specified in YYYY-MM-DD format, that is one to four days before the current UTC date.
  + next (optional, integer)
    The starting point for the next page of results, returned in the __next__ field in a response to this request if another page of results is available.
    
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"other",
       "properties":{
          "date":{
             "type":"string",
             "description":"UTC date requested."
          },
          "links":{
             "type":"object",
             "data_delta_other":{
                "type":"object",
                "properties":{
                   "date":{
                      "type":"string",
                      "description":"UTC date requested."
                   },
                   "next":{
                      "type":"string",
                      "description":"Starting point for the next page of results."
                   }
                }
             }
          },
          "type":{
             "type":"string",
             "description":"Type of changed data."
          },
          "size":{
             "type":"integer",
             "description":"Number of items in this response."
          },
          "deltas":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"Rovi ID for data that changed."
                      },
                      "links":{
                         "type":"object",
                         "data_other":{
                            "type":"object",
                            "properties":{
                               "id":{
                                  "type":"integer",
                                  "description":"ID to use in a data_other request to get the changed data."
                               }
                            }
                         }
                      },
                      "etag":{
                         "type":"string",
                         "description":"ETag for the latest data for that ID."
                      }
                   }
                }
             ]
          }
       }
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_other_aired [/data_other_aired?id={id}&country={country}&page={page}]
Returns the original television broadcast date in a country of a show that is not a movie or TV series.

## GET
Available codes for the **country** parameter are:

| Code | Country                 | Code | Country                          |
| ---- | ----------------------- | ---- | -------------------------------- |
| AD   | Andorra                 | IN   | India                            |
| AI   | Anguilla                | IE   | Ireland                          |
| AG   | Antigua & Barbuda&emsp; | IT   | Italy                            |
| AR   | Argentina               | JM   | Jamaica                          |
| AW   | Aruba                   | LI   | Lichtenstein                     |
| AU   | Australia&emsp;         | LU   | Luxembourg                       |
| AT   | Austria                 | MY   | Malaysia                         |
| BS   | Bahamas                 | MT   | Malta                            |
| BB   | Barbados                | MX   | Mexico                           |
| BE   | Belgium                 | MC   | Monaco                           |
| BM   | Bermuda                 | MS   | Montserrat                       |
| BO   | Bolivia                 | NL   | Netherlands                      |
| BR   | Brazil                  | NI   | Nicaragua                        |
| VG   | British Virgin Islands&emsp; | NO   | Norway                      |
| CA   | Canada                  | PA   | Panama                           |
| CL   | Chile                   | PE   | Peru                             |
| CN   | China                   | PH   | Philippines                      |
| CO   | Colombia                | PL   | Poland                           |
| CR   | Costa Rica              | PT   | Portugal                         |
| CW   | Curacao                 | RU   | Russia                           |
| DK   | Denmark                 | KN   | Saint Kitts & Nevis              |
| DO   | Dominican Republic&emsp; | LC   | Saint Lucia                     |
| EC   | Ecuador                 | MF   | Saint Martin                     |
| SV   | El Salvador&emsp;       | VC   | Saint Vincent and the Grenadines |
| FO   | Faroe Islands&emsp;     | SG   | Singapore                        |
| FI   | Finland                 | ES   | Spain                            |
| FR   | France                  | SE   | Sweden                           |
| DE   | Germany                 | CH   | Switzerland                      |
| GI   | Gibraltar               | TW   | Taiwan                           |
| GD   | Grenada                 | TT   | Trinidad & Tobago                |
| GT   | Guatemala               | TR   | Turkey                           |
| GY   | Guyana                  | TC   | Turks & Caicos                   |
| HN   | Honduras                | GB   | United Kingdom*                  |
| HK   | Hong Kong               | US   | United States                    |
| IS   | Iceland                 | VE   | Venezuela                        |
\* Includes Wales, Scotland, and Northern Ireland.

+ Parameters
  + id (required, integer, `916694669`)
    The `data_other_aired` ID for the show, returned in responses to [data_other](/#reference/other/dataother) requests. A `data_other_aired` ID is the same as the `data_other` ID for the show.
  + country (optional, string, `US`)
    Country, stated as one of the uppercase, ISO 3166-1, country codes in the table in the middle panel. If not specified, original broadcast dates for all countries are returned.    
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
     
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"other_aired",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the show."
          },
          "aired":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "properties":{
                      "country":{
                         "type":"string",
                         "description":"Country."
                      },
                      "date":{
                         "type":"string",
                         "description":"Date the show was first broadcast in the country."
                      }
                   },
                   "required":[
                      "country",
                      "date"
                   ]
                }
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_episode":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"ID to use in a data_episode request to return information about the episode."
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_episode_aired":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"ID to use in a data_episode_aired request to return the date the episode was first broadcast."
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_movie":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"ID to use in a data_movie request to return information about the movie."
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_movie_aired":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"ID to use in a data_movie_aired request to return the date the movie was first broadcast."
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_other":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"ID to use in a data_other request to return information about the program."
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_other_aired":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"ID to use in a data_other_aired request to return the date the program was first broadcast."
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             }
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "aired",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_other_credits/cast [/data_other_credits/cast?id={id}&page={page}&by={by}&by2={by2}&by3={by3}&by4={by4}&by5={by5}&in={in}&in2={in2}&in3={in3}] 
Returns cast credits for a show that is not a movie or TV series.

## GET
This request requires the `data_other_credits` ID for the show, which is returned in responses to the [data_other](/#reference/other/dataother) request. A `data_other_credits` ID is the same as the `data_other` ID for the show.

+ Parameters
  + id (required, integer, `914271490`)
    The `data_other_credits` ID for the show, returned in responses to the [data_other](/#reference/other/dataother) request. A `data_other_credits` ID is the same as the `data_other` ID for the show.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
  + by (optional, string, `role`)
    Response field or object.field to sort by. Child fields must be single-valued, that is, not within an array.
      +  For an ascending sort, replace {by} with the field name like this: __role__ or __person.alts.last__. For a descending sort, precede the field name with a minus (-) sign like this: __-role__.
      +  To start with items that contain a particular field, replace {by} with a field-equals-not-null, like this: __person.image=!null__. To start with items that are missing a particular field, specify a field-equals-null, like this: __person.image=null__. 
      +  To start with items that contain a particular value in a top-level field, replace {by} with field-equals-value, like this: __role=Jack Fisher__. To end with items that contain a particular value, precede the value with an exclamation like this: __role=!Jack Fisher__.
      
  + by2 (optional, string, `role`)
    Second level sort specification.
  + by3 (optional, string, `role`)
    Third level sort specification.
  + by4 (optional, string, `role`)
    Fourth level sort specification.
  + by5 (optional, string, `role`)
    Fifth level sort specification.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
    
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"other_credits",
       "description":"Credits for a program that is not a movie or episode in a TV series.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the program."
          },
          "credits":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Credits for the program.",
                   "properties":{
                      "in":{
                         "type":"string",
                         "description":"Language code."
                      },
                      "role":{
                         "type":"string",
                         "description":"Character portrayed."
                      },
                      "credit":{
                         "type":"string",
                         "description":"The credit."
                      },
                      "type":{
                         "type":"string",
                         "description":"Type of credit.",
                         "oneOf":[
                            {
                               "enum":[
                                  "actor"
                               ],
                               "description":"Actor."
                            },
                            {
                               "enum":[
                                  "company"
                               ],
                               "description":"Production company."
                            },
                            {
                               "enum":[
                                  "creator"
                               ],
                               "description":"Creator."
                            },
                            {
                               "enum":[
                                  "director"
                               ],
                               "description":"Director."
                            },
                            {
                               "enum":[
                                  "producer"
                               ],
                               "description":"Producer."
                            },
                            {
                               "enum":[
                                  "studio"
                               ],
                               "description":"Studio."
                            },
                            {
                               "enum":[
                                  "subject"
                               ],
                               "description":"Person who is the subject of the movie or program."
                            },
                            {
                               "enum":[
                                  "writer"
                               ],
                               "description":"Writer."
                            }
                         ]
                      },
                      "isCast":{
                         "type":"boolean",
                         "description":"Whether the credit is a cast credit: true or false."
                      },
                      "person":{
                         "type":"object",
                         "description":"Information about the person who earned the credit.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the person."
                            },
                            "name":{
                               "type":"string",
                               "description":"Name of the person."
                            },
                            "alts":{
                               "type":"object",
                               "properties":{
                                  "first":{
                                     "type":"string",
                                     "description":"First name of the person."
                                  },
                                  "last":{
                                     "type":"string",
                                     "description":"Last name of the person."
                                  }
                               }
                            },
                            "links":{
                               "type":"object",
                               "properties":{
                                  "data_person":{
                                     "type":"object",
                                     "description":"ID to use in a data_person request to get details about the person.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  }
                               },
                               "required":[
                                  "data_person"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "name",
                            "links"
                         ]
                      },
                      "organization":{
                         "type":"object",
                         "description":"Information about the company that earned the credit.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the company that earned the credit."
                            },
                            "name":{
                               "type":"string",
                               "description":"Name of the company."
                            },
                            "links":{
                               "type":"object",
                               "properties":{
                                  "data_organization":{
                                     "type":"object",
                                     "description":"ID to use in a data_organization request to get details about the company.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  }
                               },
                               "required":[
                                  "data_organization"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "links"
                         ]
                      }
                   },
                   "required":[
                      "in",
                      "credit"
                   ]
                }
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_other_credits":{
                   "type":"object",
                   "description":"ID to use in a data_other_credits request to get credits for the program.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_other":{
                   "type":"object",
                   "description":"ID to use in a data_other request to get information about the program.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_other_credits",
                "data_other"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_other_credits/crew [/data_other_credits/crew?id={id}&page={page}&by={by}&by2={by2}&by3={by3}&by4={by4}&by5={by5}&in={in}&in2={in2}&in3={in3}] 
Returns crew credits for a show that is not a movie or TV series.

## GET
This request requires the `data_other_credits` ID for the show, which is returned in responses to the [data_other](/#reference/other/dataother) request. A `data_other_credits` ID is the same as the `data_other` ID for the show.

+ Parameters
  + id (required, integer, `914271490`)
    The `data_other_credits` ID for the show, returned in responses to the [data_other](/#reference/other/dataother) request. A `data_other_credits` ID is the same as the `data_other` ID for the show.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
  + by (optional, string, `type`)
    Response field or object.field to sort by. Child fields must be single-valued, that is, not within an array.
      +  For an ascending sort, replace {by} with the field name like this: __credit__ or __person.alts.last__. For a descending sort, precede the field name with a minus (-) sign like this: __-credit__.
      +  To start with items that contain a particular field, replace {by} with a field-equals-not-null, like this: __person.image=!null__. To start with items that are missing a particular field, specify a field-equals-null, like this: __type=null__. 
      +  To start with items that contain a particular value in a top-level field, replace {by} with field-equals-value, like this: __type=director__. To end with items that contain a particular value, precede the value with an exclamation like this: __type=!company__.
      
  + by2 (optional, string, `type`)
    Second level sort specification.
  + by3 (optional, string, `type`)
    Third level sort specification.
  + by4 (optional, string, `type`)
    Fourth level sort specification.
  + by5 (optional, string, `type`)
    Fifth level sort specification.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
    
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"other_credits",
       "description":"Credits for a program that is not a movie or episode in a TV series.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the program."
          },
          "credits":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Credits for the program.",
                   "properties":{
                      "in":{
                         "type":"string",
                         "description":"Language code."
                      },
                      "role":{
                         "type":"string",
                         "description":"Character portrayed."
                      },
                      "credit":{
                         "type":"string",
                         "description":"The credit."
                      },
                      "type":{
                         "type":"string",
                         "description":"Type of credit.",
                         "oneOf":[
                            {
                               "enum":[
                                  "actor"
                               ],
                               "description":"Actor."
                            },
                            {
                               "enum":[
                                  "company"
                               ],
                               "description":"Production company."
                            },
                            {
                               "enum":[
                                  "creator"
                               ],
                               "description":"Creator."
                            },
                            {
                               "enum":[
                                  "director"
                               ],
                               "description":"Director."
                            },
                            {
                               "enum":[
                                  "producer"
                               ],
                               "description":"Producer."
                            },
                            {
                               "enum":[
                                  "studio"
                               ],
                               "description":"Studio."
                            },
                            {
                               "enum":[
                                  "subject"
                               ],
                               "description":"Person who is the subject of the movie or program."
                            },
                            {
                               "enum":[
                                  "writer"
                               ],
                               "description":"Writer."
                            }
                         ]
                      },
                      "isCast":{
                         "type":"boolean",
                         "description":"Whether the credit is a cast credit: true or false."
                      },
                      "person":{
                         "type":"object",
                         "description":"Information about the person who earned the credit.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the person."
                            },
                            "name":{
                               "type":"string",
                               "description":"Name of the person."
                            },
                            "alts":{
                               "type":"object",
                               "properties":{
                                  "first":{
                                     "type":"string",
                                     "description":"First name of the person."
                                  },
                                  "last":{
                                     "type":"string",
                                     "description":"Last name of the person."
                                  }
                               }
                            },
                            "links":{
                               "type":"object",
                               "properties":{
                                  "data_person":{
                                     "type":"object",
                                     "description":"ID to use in a data_person request to get details about the person.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  }
                               },
                               "required":[
                                  "data_person"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "name",
                            "links"
                         ]
                      },
                      "organization":{
                         "type":"object",
                         "description":"Information about the company that earned the credit.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the company that earned the credit."
                            },
                            "name":{
                               "type":"string",
                               "description":"Name of the company."
                            },
                            "links":{
                               "type":"object",
                               "properties":{
                                  "data_organization":{
                                     "type":"object",
                                     "description":"ID to use in a data_organization request to get details about the company.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  }
                               },
                               "required":[
                                  "data_organization"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "links"
                         ]
                      }
                   },
                   "required":[
                      "in",
                      "credit"
                   ]
                }
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_other_credits":{
                   "type":"object",
                   "description":"ID to use in a data_other_credits request to get credits for the program.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_other":{
                   "type":"object",
                   "description":"ID to use in a data_other request to get information about the program.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_other_credits",
                "data_other"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_other_credits/credits [/data_other_credits/credits?id={id}&page={page}&by={by}&by2={by2}&by3={by3}&by4={by4}&by5={by5}&in={in}&in2={in2}&in3={in3}] 
Returns both cast and crew credits for a show that is not a movie or TV series.

## GET
This request requires the `data_other_credits` ID for the show, which is returned in responses to [data_other](/#reference/other/dataother) requests. A `data_other_credits` ID is the same as the `data_other` ID for the show.

+ Parameters
  + id (required, integer, `914271490`)
    The `data_other_credits` ID for the show, returned in responses to [data_other](/#reference/other/dataother) requests. A `data_other_credits` ID is the same as the `data_other` ID for the show.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
  + by (optional, string, `credit`)
    Response field or object.field to sort by. Child fields must be single-valued, that is, not within an array.
      +  For an ascending sort, replace {by} with the field name like this: __credit__ or __person.alts.last__. For a descending sort, precede the field name with a minus (-) like this: __-credit__.
      +  To start with items that contain a particular field, replace {by} with field-equals-not-null, like this: __person.image=!null__. To start with items that are missing a particular field, specify field-equals-null, like this: __role=null__. 
      +  To start with items that contain a particular value in a top-level field, replace {by} with field-equals-value, like this: __type=director__. To end with items that contain a particular value, precede the value with an exclamation like this: __type=!company__.
    
  + by2 (optional, string, `credit`)
    Second level sort specification.
  + by3 (optional, string, `credit`)
    Third level sort specification.
  + by4 (optional, string, `credit`)
    Fourth level sort specification.
  + by5 (optional, string, `credit`)
    Fifth level sort specification.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
    
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"other_credits",
       "description":"Credits for a program that is not a movie or episode in a TV series.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the program."
          },
          "credits":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Credits for the program.",
                   "properties":{
                      "in":{
                         "type":"string",
                         "description":"Language code."
                      },
                      "role":{
                         "type":"string",
                         "description":"Character portrayed."
                      },
                      "credit":{
                         "type":"string",
                         "description":"The credit."
                      },
                      "type":{
                         "type":"string",
                         "description":"Type of credit.",
                         "oneOf":[
                            {
                               "enum":[
                                  "actor"
                               ],
                               "description":"Actor."
                            },
                            {
                               "enum":[
                                  "company"
                               ],
                               "description":"Production company."
                            },
                            {
                               "enum":[
                                  "creator"
                               ],
                               "description":"Creator."
                            },
                            {
                               "enum":[
                                  "director"
                               ],
                               "description":"Director."
                            },
                            {
                               "enum":[
                                  "producer"
                               ],
                               "description":"Producer."
                            },
                            {
                               "enum":[
                                  "studio"
                               ],
                               "description":"Studio."
                            },
                            {
                               "enum":[
                                  "subject"
                               ],
                               "description":"Person who is the subject of the movie or program."
                            },
                            {
                               "enum":[
                                  "writer"
                               ],
                               "description":"Writer."
                            }
                         ]
                      },
                      "isCast":{
                         "type":"boolean",
                         "description":"Whether the credit is a cast credit: true or false."
                      },
                      "person":{
                         "type":"object",
                         "description":"Information about the person who earned the credit.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the person."
                            },
                            "name":{
                               "type":"string",
                               "description":"Name of the person."
                            },
                            "alts":{
                               "type":"object",
                               "properties":{
                                  "first":{
                                     "type":"string",
                                     "description":"First name of the person."
                                  },
                                  "last":{
                                     "type":"string",
                                     "description":"Last name of the person."
                                  }
                               }
                            },
                            "links":{
                               "type":"object",
                               "properties":{
                                  "data_person":{
                                     "type":"object",
                                     "description":"ID to use in a data_person request to get details about the person.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  }
                               },
                               "required":[
                                  "data_person"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "name",
                            "links"
                         ]
                      },
                      "organization":{
                         "type":"object",
                         "description":"Information about the company that earned the credit.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the company that earned the credit."
                            },
                            "name":{
                               "type":"string",
                               "description":"Name of the company."
                            },
                            "links":{
                               "type":"object",
                               "properties":{
                                  "data_organization":{
                                     "type":"object",
                                     "description":"ID to use in a data_organization request to get details about the company.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  }
                               },
                               "required":[
                                  "data_organization"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "links"
                         ]
                      }
                   },
                   "required":[
                      "in",
                      "credit"
                   ]
                }
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_other_credits":{
                   "type":"object",
                   "description":"ID to use in a data_other_credits request to get credits for the program.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_other":{
                   "type":"object",
                   "description":"ID to use in a data_other request to get information about the program.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_other_credits",
                "data_other"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_other_ratings [/data_other_ratings?id={id}&country={country}] 
Returns parental ratings for a show that is not a movie or TV series.

## GET
This request requires the `data_other_ratings` ID for the show, which is returned in responses to [data_other](/#reference/other/dataother) requests. A `data_other_ratings` ID is the same as the `data_other` ID for the show.

+ Parameters
  + id (required, integer, `916694669`)
    The `data_other_ratings` ID, returned in responses to the [data_other](/#reference/other/dataother) request. A `data_other_ratings` ID is the same as the `data_other` ID for the show.
  + country (required, string, `US`)
    Country for which you want parental ratings, specified as one of the following ISO 3166-1 alpha-2 codes:
    <table><tr>
    <th>Code</th><th>Country</th><th>Code</th><th>Country</th>
    </tr><tr>
    <td>AR</td><td><p>Argentina</p></td><td>MX</td><td><p>Mexico</p></td>
    </tr><tr>
    <td>AT</td><td><p>Austria</p></td><td>NL</td><td><p>Netherlands</p></td>
    </tr><tr>
    <td>BE</td><td><p>Belgium</p></td><td>NO</td><td><p>Norway</p></td>
    </tr><tr>
    <td>BR</td><td><p>Brazil</p></td><td>PE</td><td><p>Peru</p></td>
    </tr><tr>
    <td>CA</td><td><p>Canada</p></td><td>PL</td><td><p>Poland</p></td>
    </tr><tr>
    <td>CL</td><td><p>Chile</p></td><td>PT</td><td><p>Portugal</p></td>
    </tr><tr>
    <td>CO</td><td><p>Colombia</p></td><td>ES</td><td><p>Spain</p></td>
    </tr><tr>
    <td>DK</td><td><p>Denmark</p></td><td>SE</td><td><p>Sweden</p></td>
    </tr><tr>
    <td>FI</td><td><p>Finland</p></td><td>CH</td><td><p>Switzerland</p></td>
    </tr><tr>
    <td>FR</td><td><p>France</p></td><td>TC</td><td><p>Turks & Caicos</p></td>
    </tr><tr>
    <td>DE</td><td><p>Germany</p></td><td>GB</td><td><p>United Kingdom*</p></td>
    </tr><tr>
    <td>IE</td><td><p>Ireland</p></td><td>US</td><td><p>United States</p></td>
    </tr><tr>
    <td>IT</td><td><p>Italy</p></td><td>VE</td><td><p>Venezuela</p></td>
    </tr></table><br/>*Includes Wales, Scotland, and Northern Ireland.
    
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"other_ratings",
       "description":"Parental ratings for a program that is not a movie or TV series.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the program."
          },
          "ratings":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Parental ratings for the program.",
                   "properties":{
                      "in":{
                         "type":"string"
                      },
                      "type":{
                         "type":"string",
                         "description":"Source of the parental rating."
                      },
                      "rating":{
                         "type":"string",
                         "description":"The parental rating."
                      },
                      "medium":{
                         "type":"string",
                         "description":"Media that this rating applies to.",
                         "oneOf":[
                            {
                               "enum":[
                                  "movie"
                               ],
                               "description":"Theatrical film."
                            },
                            {
                               "enum":[
                                  "tv"
                               ],
                               "description":"Television."
                            },
                            {
                               "enum":[
                                  "stars"
                               ],
                               "description":"TV series qualitative rating from 1 to 4 stars. Rated by Rovi."
                            },
                            {
                               "enum":[
                                  "age"
                               ],
                               "description":"TV series youngest appropriate age rating. Rated by Rovi."
                            },
                            {
                               "enum":[
                                  "family"
                               ],
                               "description":"TV series family friendly rating on a scale of 0 to 10."
                            }
                         ]
                      },
                      "countries":{
                         "type":"array",
                         "description":"Countries the parental rating applies to.",
                         "items":{
                            "type":"string"
                         }
                      },
                      "reasons":{
                         "type":"array",
                         "description":"Reasons for the rating.",
                         "items":{
                            "type":"string"
                         }
                      },
                      "subrating":{
                         "type":"string",
                         "description":"Content warning labels that apply to the program."
                      }
                   },
                   "required":[
                      "in",
                      "type",
                      "rating"
                   ]
                }
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_other_ratings":{
                   "type":"object",
                   "description":"ID to use in a data_other_ratings request to get parental ratings for the program.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_other":{
                   "type":"object",
                   "description":"ID to use in a data_other request to get information about the program.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_other_ratings",
                "data_other"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_other_related [/data_other_related?id={id}&relation={relation}&in={in}&in2={in2}&in3={in3}&page={page}]
Returns titles of related programs and movies:
+ series in
+ similar to
+ related to
+ spoofed or spoofed by
+ remake of or remade as
+ features or featured in
+ re-edit of or re-edited by
+ spin-off of or spun-off as
+ preceeded by or preceeded
+ influenced by or influenced

## GET
This request requires the `data_other_related` ID for the show, which is returned in responses to [data_other](/#reference/other/dataother) requests. A `data_other_related` ID is the same as the `data_other` ID for the show.

+ Parameters
  + id (required, integer, `916694669`)
    The `data_other_related` ID for the show, returned in responses to [data_other](/#reference/other/dataother) requests. A `data_other_related` ID is the same as the `data_other` ID for the show.
  + relation (optional, string, `related`)
    The relationship, specified as one of the following. Leave this value empty to return titles for all relationships.
      +  featured
      +  influenced
      +  predecessor
      +  re-edit
      +  related
      +  remake
      +  similar
      +  series
      +  spin-off
      +  spoof

  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"other_related",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the show."
          },
          "related":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "properties":{
                      "relation":{
                         "type":"string",
                         "description":"Type of relation.",
                         "oneOf":[
                            {
                               "enum":[
                                  "featured"
                               ],
                               "description":"Features or featured in."
                            },
                            {
                               "enum":[
                                  "influenced"
                               ],
                               "description":"Influenced by or influenced."
                            },
                            {
                               "enum":[
                                  "related"
                               ],
                               "description":"Related to."
                            },
                            {
                               "enum":[
                                  "predecessor"
                               ],
                               "description":"Preceeded by or preceeded."
                            },
                            {
                               "enum":[
                                  "re-edit"
                               ],
                               "description":"Re-edit of or re-edited by."
                            },
                            {
                               "enum":[
                                  "remake"
                               ],
                               "description":"Remake of or remade as."
                            },
                            {
                               "enum":[
                                  "similar"
                               ],
                               "description":"Similar to."
                            },
                            {
                               "enum":[
                                  "series"
                               ],
                               "description":"Series in."
                            },
                            {
                               "enum":[
                                  "spin-off"
                               ],
                               "description":"Spin-off of or spun-off as."
                            },
                            {
                               "enum":[
                                  "spoof"
                               ],
                               "description":"Spoofed or spoofed by."
                            }
                         ]
                      },
                      "content":{
                         "type":"object",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the show."
                            },
                            "type":{
                               "type":"string",
                               "description":"Type of show.",
                               "oneOf":[
                                  {
                                     "enum":[
                                        "movie"
                                     ],
                                     "description":"Movie."
                                  },
                                  {
                                     "enum":[
                                        "season"
                                     ],
                                     "description":"Season in a TV series."
                                  },
                                  {
                                     "enum":[
                                        "episode"
                                     ],
                                     "description":"Episode in a TV series."
                                  },
                                  {
                                     "enum":[
                                        "series"
                                     ],
                                     "description":"TV series."
                                  },
                                  {
                                     "enum":[
                                        "other"
                                     ],
                                     "description":"A program other than a movie or TV series."
                                  }
                               ]
                            },
                            "in":{
                               "type":"string",
                               "description":"Language of the show."
                            },
                            "title":{
                               "type":"string",
                               "description":"Title of the show."
                            },
                            "image":{
                               "type":"object",
                               "description":"Information about the primary image associated with the show.",
                               "properties":{
                                  "id":{
                                     "type":"integer",
                                     "description":"Rovi ID for the primary image associated with the show."
                                  },
                                  "zoom":{
                                     "type":"string",
                                     "description":"How much of the subject appears in the picture. A value here indicates a closer zoom level may be available from the media_image request. A missing value indicates a std zoom.",
                                     "oneOf":[
                                        {
                                           "enum":[
                                              "head"
                                           ],
                                           "description":"Head or shoulders to top of head."
                                        },
                                        {
                                           "enum":[
                                              "torso"
                                           ],
                                           "description":"Chest or thigh to top of head."
                                        },
                                        {
                                           "enum":[
                                              "body"
                                           ],
                                           "description":"Body fills at least 80% of frame."
                                        },
                                        {
                                           "enum":[
                                              "framed"
                                           ],
                                           "description":"Full body fills 50% to 80% of frame."
                                        },
                                        {
                                           "enum":[
                                              "std"
                                           ],
                                           "description":"Full body fills 50% of frame or less."
                                        }
                                     ]
                                  },
                                  "links":{
                                     "type":"object",
                                     "properties":{
                                        "media_image":{
                                           "type":"object",
                                           "description":"ID to use in a media_image request to get the primary image for the show.",
                                           "properties":{
                                              "id":{
                                                 "type":"integer"
                                              }
                                           },
                                           "required":[
                                              "id"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "media_image"
                                     ]
                                  }
                               },
                               "required":[
                                  "id",
                                  "zoom",
                                  "links"
                               ]
                            },
                            "year":{
                               "type":"integer",
                               "description":"Year the show was released."
                            },
                            "synonyms":{
                               "type":"array",
                               "description":"Other IDs that have been assigned to the show.",
                               "items":[
                                  {
                                     "type":"object",
                                     "properties":{
                                        "program":{
                                           "type":"integer",
                                           "description":"Cosmo ID."
                                        },
                                        "iguide":{
                                           "type":"integer",
                                           "description":"iGuide ID."
                                        },
                                        "amg":{
                                           "type":"string",
                                           "description":"AMG ID."
                                        },
                                        "eidr":{
                                           "type":"integer",
                                           "description":"EIDR ID."
                                        },
                                        "in":{
                                           "type":"string",
                                           "description":"Language of the show."
                                        },
                                        "title":{
                                           "type":"Title of the show."
                                        }
                                     },
                                     "required":[
                                        "in",
                                        "title"
                                     ]
                                  }
                               ]
                            },
                            "links":{
                               "type":"object",
                               "properties":{
                                  "data_content":{
                                     "type":"object",
                                     "description":"ID to use in a data_content_images request to get images for the related show.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  },
                                  "data_movie":{
                                     "type":"object",
                                     "description":"ID to use in a data_movie request to get information about the related movie.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  },
                                  "data_series":{
                                     "type":"object",
                                     "description":"ID to use in a data_series request to get information about the related series.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  },
                                  "data_season":{
                                     "type":"object",
                                     "description":"ID to use in a data_season request to get information about the related series season.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  },
                                  "data_episode":{
                                     "type":"object",
                                     "description":"ID to use in a data_episode request to get information about the related episode.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  },
                                  "data_other":{
                                     "type":"object",
                                     "description":"ID to use in a data_other request to get information about the related program.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  }
                               },
                               "required":[
                                  "data_content"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "type",
                            "in",
                            "title",
                            "links"
                         ]
                      }
                   },
                   "required":[
                      "relation",
                      "content"
                   ]
                }
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_other":{
                   "type":"object",
                   "description":"ID to use in a data_other request to get information about the program.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_other_related":{
                   "type":"object",
                   "description":"ID to use in a data_other_related request to get shows related to the program.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_other",
                "data_other_related"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_other_releases [/data_other_releases?id={id}&in={in}&in2={in2}&in3={in3}&page={page}]
Returns information about releases of a show that is not a movie or TV series. Releases differ in language, content, or title.

## GET
This request requires the `data_other_releases` ID for the show, which is returned in responses to [data_other](/#reference/other/dataother) requests. A `data_other_releases` ID is the same as the `data_other` ID for the show.

+ Parameters
  + id (required, integer, `914271490`)
    The `data_other_releases` ID for the show, returned in responses to [data_other](/#reference/other/dataother) requests. A `data_other_releases` ID is the same as the `data_other` ID for the show.
  + in (optional, string)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.

+ Response 200 (application/json)

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_other_synopses/collection [/data_other_synopses/collection?id={id}&in={in}&in2={in2}&in3={in3}]
Returns a range of synopses of a show that is not a movie or TV series.

## GET
This request requires the `data_other_synopses` ID for the show, which is returned in responses to [data_other](/#reference/other/dataother) requests. The `data_other_synopses` ID is the same as the `data_other` ID for the show.

+ Parameters
  + id (required, integer, `914271490`)
    The `data_other_synopses` ID for the show, returned in responses to [data_other](/#reference/other/dataother) requests.  The `data_other_synopses` ID is the same as the `data_other` ID for the show.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_other_synopses/best [/data_other_synopses/best?id={id}&length={length}&length2={length2}&length3={length3}&length4={length4}&in={in}&in2={in2}&in3={in3}]
Returns the best available synopsis of a show that is not a movie or TV series, based on type:
+  `long` &mdash; Straightforward, objective description of the show in up to 420 characters.
+  `short` &mdash; A shorter version of the "long" description.
+  `plain` &mdash; A straightforward description without credits that is never critical.
+  `extended` &mdash; A more detailed description than the "long" description, up to 2000 characters.

## GET
This request requires the `data_other_synopses` ID for the show, which is returned in responses to [data_other](/#reference/other/dataother) requests. The `data_other_synopses` ID is the same as the `data_other` ID for the show.

+ Parameters
  + id (required, integer, `914271490`)
    The `data_other_synopses` ID for the show, returned in responses to [data_other](/#reference/other/dataother) requests.  The `data_other_synopses` ID is the same as the `data_other` ID for the show.
  + length (required, string enum, `short`)
    First choice for type of description:
    <table>
    <tr><th>Value</th><th>Description</th>
    </tr><tr>
    <td>long</td><td><p>Straightforward, objective description of the show in up to 420 characters.</p></td>
    </tr><tr>
    <td>short</td><td><p>A shorter version of the "long" description.</p></td>
    </tr><tr>
    <td>plain</td><td><p>A straightforward description without credits that is never critical.</p></td>
    </tr><tr>
    <td>extended</td><td><p>A more detailed description than the "long" description, up to 2000 characters.</p></td>
    </tr>
    </table>
    
  + length2 (optional, string enum, `long`)
    Second choice for type of description.
  + length3 (optional, string enum, `plain`)
    Third choice for type of description.
  + length4 (optional, string enum, `extended`)
    Fourth choice for type of description.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_other_synopsis [/data_other_synopsis?id={id}&in={in}&in2={in2}&in3={in3}]
Returns a synopsis of a show that is not a movie or episode in a TV series.

__NOTE: This request is now deprecated.__ Use one of the `data_other_synopses` requests instead:
+  [data_other_synopses/best](/#reference/other/dataothersynopsesbest)
+  [data_other_synopses/collection](/#reference/other/dataothersynopsescollection)

## GET
This request requires the `data_other_synopsis` ID for the show, which is returned in responses to [data_other](/#reference/other/dataother) requests. A `data_other_synopsis` ID is the same as the `data_other` ID for the show.

+ Parameters
  + id (required, integer, `914271490`)
    The `data_other_synopsis` ID for the show, returned in responses to [data_other](/#reference/other/dataother) requests. A `data_other_synopsis` ID is the same as the `data_other` ID for the show.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"other_synopses",
       "description":"Synopses of a program that is not a movie or TV series.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the program."
          },
          "synopsis":{
             "type":"object",
             "description":"Synopsis of the program.",
             "properties":{
                "length":{
                   "type":"string",
                   "description":"Type of synopsis.",
                   "oneOf":[
                      {
                         "enum":[
                            "long"
                         ],
                         "description":"Straightforward, objective plot synopsis with up to 420 characters."
                      },
                      {
                         "enum":[
                            "short"
                         ],
                         "description":"Straightforward, objective plot synopsis with up to 150 characters."
                      },
                      {
                         "enum":[
                            "plain"
                         ],
                         "description":"Straightforward description, without credits, that is never critical."
                      },
                      {
                         "enum":[
                            "extended"
                         ],
                         "description":"Straightforward, objective plot synopsis with up to 2000 characters."
                      },
                      {
                         "enum":[
                            "source"
                         ],
                         "description":"Synopsis supplied by the channel on which the show is broadcast."
                      },
                      {
                         "enum":[
                            "review"
                         ],
                         "description":"Movie review."
                      }
                   ]
                },
                "in":{
                   "type":"string",
                   "description":"Language of the synopsis."
                },
                "synopsis":{
                   "type":"string",
                   "description":"Synopsis of the movie or program."
                },
                "cuts":{
                   "type":"string",
                   "description":"Character positions at which you can end the synopsis to conserve space. A cut number is the number of the last character to include, not the first character to cut. Add a period after that point if there is no ending punctuation (a period or a period followed by a single of double quotation mark)."
                }
             },
             "required":[
                "length",
                "in"
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_other":{
                   "type":"object",
                   "description":"ID to use in a data_other request to get information about the program.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_other_synopses":{
                   "type":"object",
                   "description":"ID to use in a data_other_synopsis request to get a synopsis of the program.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_other",
                "data_other_synopses"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_other_theatricals [/data_other_theatricals?id={id}&page={page}]
Returns information about the theatrical releases by country of a show that is not a movie or TV series.

## GET
This request requires the `data_other` ID for the show, which is returned in responses to the following requests:
+  [data_airing](/#reference/tv-schedule/dataairing)
+  [data_other_appearances](/#reference/tv-schedule/dataotherappearances)
+  [discover_all_similar_video/content](/#reference/recommendations/discoverallsimilarvideocontent)
+  [discover_all_video_by_genre/content](/#reference/search/discoverallvideobygenrecontent)
+  [discover_all_video_by_search/content](/#reference/search/discoverallvideobysearchcontent)

+ Parameters
  + id (required, integer, `914806985`)
    The `data_other` ID for the show, returned in responses to the following requests:
       +  [data_airing](/#reference/tv-schedule/dataairing)
       +  [data_other_appearances](/#reference/tv-schedule/dataotherappearances)
       +  [discover_all_similar_video/content](/#reference/recommendations/discoverallsimilarvideocontent)
       +  [discover_all_video_by_genre/content](/#reference/search/discoverallvideobygenrecontent)
       +  [discover_all_video_by_search/content](/#reference/search/discoverallvideobysearchcontent)

  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.

+ Response 200 (application/json)

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# Group Release

This section documents the calls that return data about a release of a movie, episode, or other show. The various releases of a show differ in language, content, or title.

*Design Note:* The `data_release` ID for a release identifies the release in all of the following API calls.
- [data_release](/#reference/release/datarelease)
- [data_release_aired](/#reference/release/datareleaseaired)
- [data_release_credits/cast](/#reference/release/datareleasecreditscast)
- [data_release_credits/crew](/#reference/release/datareleasecreditscrew)
- [data_release_credits/credits](/#reference/release/datareleasecreditscredits)
- [data_release_ratings](/#reference/release/datareleaseratings)
- [data_release_synopses/best](/#reference/release/datareleasesynopsesbest)
- [data_release_synopses/collection](/#reference/release/datareleasesynopsescollection)
- [data_release_images/best](/#reference/image/datareleaseimagesbest) (in the Image section)
- [data_release_images/collection](/#reference/image/datareleaseimagescollection) (in the Image section)

# data_release [/data_release?id={id}&in={in}&in2={in2}&in3={in3}]
Returns information about a release of a movie, episode, or other show. Releases of a show differ in language, content, or title.

## GET
This request requires the `data_release` ID for the release, which is returned in responses to the following requests:
+  [data_movie_releases](/#reference/movie/datamoviereleases)
+  [data_episode_releases](/#reference/episode/dataepisodereleases)
+  [data_other_releases](/#reference/other/dataotherreleases)

+ Parameters
  + id (required, integer, `15122462`)
    The `data_release` ID for the release, returned in responses to the following requests:
      +  [data_movie_releases](/#reference/movie/datamoviereleases)
      +  [data_episode_releases](/#reference/episode/dataepisodereleases)
      +  [data_other_releases](/#reference/other/dataotherreleases)
      
  + in (optional, string)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"release",
       "description":"Information about a release.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the release."
          },
          "market":{
             "type":"array",
             "items":{
                "type":"string"
             }
          },
          "in":{
             "type":"string"
          },
          "title":{
             "type":"string",
             "description":"Title of the show."
          },
          "alts":{
             "type":"object",
             "description":"Alternate titles of the show.",
             "properties":{
                "short15":{
                   "type":"string",
                   "description":"Title with up to 15 characters for a grid cell. Creative abbreviations used as needed."
                },
                "short30":{
                   "type":"string",
                   "description":"Title with up to 30 characters. Creative abbreviations used as needed."
                },
                "short8":{
                   "type":"string",
                   "description":"Title with up to 8 characters for a grid cell. Creative abbreviations used as needed."
                },
                "short50":{
                   "type":"string",
                   "description":"Title with up to 50 characters. Creative abbreviations used as needed."
                },
                "alias":{
                   "type":"string",
                   "description":"Alternate title by which a show has been distributed."
                },
                "alias2":{
                   "type":"string",
                   "description":"Another alternate title by which a show has been distributed."
                },
                "alias3":{
                   "type":"string",
                   "description":"Another alternate title by which a show has been distributed."
                },
                "alias4":{
                   "type":"string",
                   "description":"Another alternate title by which a show has been distributed."
                },
                "subtitle":{
                   "type":"string",
                   "description":"Subtitle of the show."
                },
                "ref":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description": "ID to use to get information about this resource."
                      },
                      "me":{
                         "type":"string",
                         "description": "URI template to use to get information about this resource."
                      },
                      "parent":{
                         "type":"string",
                         "description": "URI template for information about the parent resource."
                      },
                      "children":{
                         "type":"array",
                         "description": "URI templates for child resources."
                      }
                   },
                   "required":[
                      "id",
                      "me"
                   ]
                }
             },
             "required":[
                "ref"
             ]
          },
          "image":{
             "type":"object",
             "description":"Information about the primary image associated with the show.",
             "properties":{
                "id":{
                   "type":"integer",
                   "description":"Rovi ID for the image."
                },
                "zoom":{
                   "type":"string",
                   "description":"How much of the subject appears in the picture. A value here indicates a closer zoom level may be available from the media_image request. A missing value indicates a std zoom.",
                   "oneOf":[
                      {
                         "enum":[
                            "head"
                         ],
                         "description":"Head or shoulders to top of head."
                      },
                      {
                         "enum":[
                            "torso"
                         ],
                         "description":"Chest or thigh to top of head."
                      },
                      {
                         "enum":[
                            "body"
                         ],
                         "description":"Body fills at least 80% of frame."
                      },
                      {
                         "enum":[
                            "framed"
                         ],
                         "description":"Full body fills 50% to 80% of frame."
                      },
                      {
                         "enum":[
                            "std"
                         ],
                         "description":"Full body fills 50% of frame or less."
                      }
                   ]
                },
                "type":{
                   "type":"string",
                   "description":"Type of image.",
                   "oneOf":[
                      {
                         "enum":[
                            "album"
                         ],
                         "description":"Album cover front."
                      },
                      {
                         "enum":[
                            "album2"
                         ],
                         "description":"Album cover back."
                      },
                      {
                         "enum":[
                            "athlete"
                         ],
                         "description":"Athlete image."
                      },
                      {
                         "enum":[
                            "box"
                         ],
                         "description":"VHS box cover."
                      },
                      {
                         "enum":[
                            "celebrity"
                         ],
                         "description":"Celebrity."
                      },
                      {
                         "enum":[
                            "dvd"
                         ],
                         "description":"DVD box cover."
                      },
                      {
                         "enum":[
                            "gallery"
                         ],
                         "description":"Key cast, no set."
                      },
                      {
                         "enum":[
                            "gallery2"
                         ],
                         "description":"Supporting cast, no set."
                      },
                      {
                         "enum":[
                            "generic"
                         ],
                         "description":"Placeholder iconography or photograph."
                      },
                      {
                         "enum":[
                            "group"
                         ],
                         "description":"Over four cast members."
                      },
                      {
                         "enum":[
                            "head"
                         ],
                         "description":"One key cast member."
                      },
                      {
                         "enum":[
                            "head2"
                         ],
                         "description":"One supporting cast member."
                      },
                      {
                         "enum":[
                            "jersey"
                         ],
                         "description":"Sports jersey."
                      },
                      {
                         "enum":[
                            "key"
                         ],
                         "description":"Key cast or show image."
                      },
                      {
                         "enum":[
                            "league"
                         ],
                         "description":"Sports league logo."
                      },
                      {
                         "enum":[
                            "olympic"
                         ],
                         "description":"Olympic image."
                      },
                      {
                         "enum":[
                            "poster"
                         ],
                         "description":"Poster art."
                      },
                      {
                         "enum":[
                            "prod"
                         ],
                         "description":"Key cast on set."
                      },
                      {
                         "enum":[
                            "prod2"
                         ],
                         "description":"Supporting cast on set."
                      },
                      {
                         "enum":[
                            "program"
                         ],
                         "description":"Key cast from program."
                      },
                      {
                         "enum":[
                            "program2"
                         ],
                         "description":"Supporting cast from program."
                      },
                      {
                         "enum":[
                            "set"
                         ],
                         "description":"DVD box set cover."
                      },
                      {
                         "enum":[
                            "showcard"
                         ],
                         "description":"TV series poster."
                      },
                      {
                         "enum":[
                            "team"
                         ],
                         "description":"Sports team logo."
                      },
                      {
                         "enum":[
                            "team2"
                         ],
                         "description":"Sports team secondary logo."
                      },
                      {
                         "enum":[
                            "trailer"
                         ],
                         "description":"Image for trailer, 16:9."
                      },
                      {
                         "enum":[
                            "video"
                         ],
                         "description":"Video box cover."
                      }
                   ]
                },
                "genres":{
                   "type":"array",
                   "items":{
                      "type":"integer"
                   }
                },
                "ref":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description": "ID to use to get information about this resource."
                      },
                      "me":{
                         "type":"string",
                         "description": "URI template to use to get information about this resource."
                      },
                      "parent":{
                         "type":"string",
                         "description": "URI template for information about the parent resource."
                      },
                      "children":{
                         "type":"array",
                         "description": "URI templates for child resources."
                      }
                   },
                   "required":[
                      "id",
                      "me"
                   ]
                }
             },
             "required":[
                "ref"
             ]
          },
          "content":{
             "type":"object",
             "properties":{
                "id":{
                   "type":"integer",
                   "description":"Rovi ID for the release."
                },
                "type":{
                   "type":"string",
                   "description":"Type of show.",
                   "oneOf":[
                      {
                         "enum":[
                            "movie"
                         ],
                         "description":"Movie."
                      },
                      {
                         "enum":[
                            "season"
                         ],
                         "description":"Season in a TV series."
                      },
                      {
                         "enum":[
                            "episode"
                         ],
                         "description":"Episode in a TV series."
                      },
                      {
                         "enum":[
                            "series"
                         ],
                         "description":"TV series."
                      },
                      {
                         "enum":[
                            "other"
                         ],
                         "description":"A program other than a movie or TV series."
                      }
                   ]
                },
                "in":{
                   "type":"string",
                   "description":"Language of the show."
                },
                "market":{
                   "type":"array",
                   "items":{
                      "type":"string"
                   }
                },
                "title":{
                   "type":"string",
                   "description":"Title of the show."
                },
                "ref":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description": "ID to use to get information about this resource."
                      },
                      "me":{
                         "type":"string",
                         "description": "URI template to use to get information about this resource."
                      },
                      "parent":{
                         "type":"string",
                         "description": "URI template for information about the parent resource."
                      },
                      "children":{
                         "type":"array",
                         "description": "URI templates for child resources."
                      }
                   },
                   "required":[
                      "id",
                      "me"
                   ]
                }
             },
             "required":[
                "id",
                "type",
                "in",
                "title",
                "ref"
             ]
          },
          "variations":{
             "type":"array",
             "items":{
                "type":"string"
             }
          },
          "category":{
             "type":"string",
             "description":"Program category: News, Movie, Music, Sports, Lifestyle, Children's, Other."
          },
          "genres":{
             "type":"array",
             "description":"Genres the release fits in.",
             "items":{
                "type":"string"
             }
          },
          "year":{
             "type":"integer",
             "description":"Year of the release."
          },
          "runtime":{
             "type":"integer",
             "description":"Duration of the release in seconds."
          },
          "synonyms":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Other IDs assigned to the release.",
                   "properties":{
                      "program":{
                         "type":"integer",
                         "description":"Cosmo ID."
                      },
                      "iguide":{
                         "type":"integer",
                         "description":"iGuide ID."
                      },
                      "amg":{
                         "type":"string",
                         "description":"AMG ID."
                      },
                      "eidr":{
                         "type":"string",
                         "description":"EIDR ID."
                      },
                      "in":{
                         "type":"string",
                         "description":"Language of the show."
                      },
                      "title":{
                         "type":"string",
                         "description":"Title of the show."
                      },
                      "ref":{
                         "type":"object",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description": "ID to use to get information about this resource."
                            },
                            "me":{
                               "type":"string",
                               "description": "URI template to use to get information about this resource."
                            },
                            "parent":{
                               "type":"string",
                               "description": "URI template for information about the parent resource."
                            },
                            "children":{
                               "type":"array",
                               "description": "URI templates for child resources."
                            }
                         },
                         "required":[
                            "id",
                            "me"
                         ]
                      }
                   },
                   "required":[
                      "in",
                      "title",
                      "ref"
                   ]
                }
             ]
          },
          "ref":{
             "type":"object",
             "properties":{
                "id":{
                   "type":"integer",
                   "description": "ID to use to get information about this resource."
                },
                "me":{
                   "type":"string",
                   "description": "URI template to use to get information about this resource."
                },
                "parent":{
                   "type":"string",
                   "description": "URI template for information about the parent resource."
                },
                "children":{
                   "type":"array",
                   "description": "URI templates for child resources."
                }
             },
             "required":[
                "id",
                "me"
             ]
          }
       },
       "required":[
          "id",
          "in",
          "title",
          "content",
          "ref"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_release_aired [/data_release_aired?id={id}&country={country}&page={page}]
Returns the original television broadcast date in a country of a release of a movie, episode, or other show. Releases of a show differ in language, content, or title.

## GET
Available codes for the **country** parameter are:

| Code | Country                 | Code | Country                          |
| ---- | ----------------------- | ---- | -------------------------------- |
| AD   | Andorra                 | IN   | India                            |
| AI   | Anguilla                | IE   | Ireland                          |
| AG   | Antigua & Barbuda&emsp; | IT   | Italy                            |
| AR   | Argentina               | JM   | Jamaica                          |
| AW   | Aruba                   | LI   | Lichtenstein                     |
| AU   | Australia&emsp;         | LU   | Luxembourg                       |
| AT   | Austria                 | MY   | Malaysia                         |
| BS   | Bahamas                 | MT   | Malta                            |
| BB   | Barbados                | MX   | Mexico                           |
| BE   | Belgium                 | MC   | Monaco                           |
| BM   | Bermuda                 | MS   | Montserrat                       |
| BO   | Bolivia                 | NL   | Netherlands                      |
| BR   | Brazil                  | NI   | Nicaragua                        |
| VG   | British Virgin Islands&emsp; | NO   | Norway                      |
| CA   | Canada                  | PA   | Panama                           |
| CL   | Chile                   | PE   | Peru                             |
| CN   | China                   | PH   | Philippines                      |
| CO   | Colombia                | PL   | Poland                           |
| CR   | Costa Rica              | PT   | Portugal                         |
| CW   | Curacao                 | RU   | Russia                           |
| DK   | Denmark                 | KN   | Saint Kitts & Nevis              |
| DO   | Dominican Republic&emsp; | LC   | Saint Lucia                     |
| EC   | Ecuador                 | MF   | Saint Martin                     |
| SV   | El Salvador&emsp;       | VC   | Saint Vincent and the Grenadines |
| FO   | Faroe Islands&emsp;     | SG   | Singapore                        |
| FI   | Finland                 | ES   | Spain                            |
| FR   | France                  | SE   | Sweden                           |
| DE   | Germany                 | CH   | Switzerland                      |
| GI   | Gibraltar               | TW   | Taiwan                           |
| GD   | Grenada                 | TT   | Trinidad & Tobago                |
| GT   | Guatemala               | TR   | Turkey                           |
| GY   | Guyana                  | TC   | Turks & Caicos                   |
| HN   | Honduras                | GB   | United Kingdom*                  |
| HK   | Hong Kong               | US   | United States                    |
| IS   | Iceland                 | VE   | Venezuela                        |
\* Includes Wales, Scotland, and Northern Ireland.

+ Parameters
  + id (required, integer, `982760712`)
    The `data_release_aired` ID for the release, returned in responses to [data_release](/#reference/release/datarelease) requests. A `data_release_aired` ID is the same as the `data_release` ID for the release.
  + country (optional, string, `US`)
    Country, stated as one of the uppercase, ISO 3166-1, country codes in the table in the middle panel. If not specified, original broadcast dates for all countries are returned.    
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
     
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"release_aired",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the show."
          },
          "aired":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "properties":{
                      "country":{
                         "type":"string",
                         "description":"Country."
                      },
                      "date":{
                         "type":"string",
                         "description":"Date the show was first broadcast in the country."
                      },
                      "ref":{
                         "type":"object",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description": "ID to use to get information about this resource."
                            },
                            "me":{
                               "type":"string",
                               "description": "URI template to use to get information about this resource."
                            },
                            "parent":{
                               "type":"string",
                               "description": "URI template for information about the parent resource."
                            },
                            "children":{
                               "type":"array",
                               "description": "URI templates for child resources."
                            }
                         },
                         "required":[
                            "id",
                            "me"
                         ]
                      }
                   },
                   "required":[
                      "country",
                      "date",
                      "ref"
                   ]
                }
             ]
          },
          "ref":{
             "type":"object",
             "properties":{
                "id":{
                   "type":"integer",
                   "description": "ID to use to get information about this resource."
                },
                "me":{
                   "type":"string",
                   "description": "URI template to use to get information about this resource."
                },
                "parent":{
                   "type":"string",
                   "description": "URI template for information about the parent resource."
                },
                "children":{
                   "type":"array",
                   "description": "URI templates for child resources."
                }
             },
             "required":[
                "id",
                "me"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "aired",
          "ref"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_release_credits/cast [/data_release_credits/cast?id={id}&in={in}&in2={in2}&in3={in3}&page={page}&by={by}] 
Returns cast credits for a release of a movie, episode, or other show. Releases of a show differ in language, content, or title.

## GET
This request requires the `data_release_credits` ID for the release, which is returned in responses to the [data_release](/#reference/release/datarelease) request. A `data_release_credits` ID is the same as the `data_release` ID for the release.

+ Parameters
  + id (required, integer, `982760712`)
    The `data_release_credits` ID for the release, returned in responses to the [data_release](/#reference/release/datarelease) request. A `data_release_credits` ID is the same as the `data_release` ID for the release.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
  + by (optional, string, `role`)
    Response field or object.field to sort by. Child fields must be single-valued, that is, not within an array.
      +  For an ascending sort, replace {by} with the field name like this: __role__ or __person.alts.last__. For a descending sort, precede the field name with a minus (-) sign like this: __-role__.
      +  To start with items that contain a particular field, replace {by} with a field-equals-not-null, like this: __person.image=!null__. To start with items that are missing a particular field, specify a field-equals-null, like this: __person.image=null__. 
      +  To start with items that contain a particular value in a top-level field, replace {by} with field-equals-value, like this: __role=Tony Stark__. To end with items that contain a particular value, precede the value with an exclamation like this: __role=!Tony Stark__.
      +  Combine alpha and numeric sorts in a comma-separated list in left-to-right priority.
    
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"release_credits",
       "description":"Credits for a release.",
       "properties":{
          "role":{
             "type":"string",
             "description":"Character portrayed."
          },
          "type":{
             "type":"string",
             "description":"Type of credit."
          },
          "person":{
             "type":"object",
             "description":"Information about the person who earned the credit.",
             "properties":{
                "id":{
                   "type":"integer",
                   "description":"Rovi ID for the person."
                },
                "name":{
                   "type":"string",
                   "description":"Name of the person."
                },
                "alts":{
                   "type":"object",
                   "description":"Other names the person is known by.",
                   "properties":{
                      "first":{
                         "type":"string",
                         "description":"First name of the person."
                      },
                      "last":{
                         "type":"string",
                         "description":"Last name of the person."
                      },
                      "ref":{
                         "type":"object",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description": "ID to use to get information about this resource."
                            },
                            "me":{
                               "type":"string",
                               "description": "URI template to use to get information about this resource."
                            },
                            "parent":{
                               "type":"string",
                               "description": "URI template for information about the parent resource."
                            },
                            "children":{
                               "type":"array",
                               "description": "URI templates for child resources."
                            }
                         },
                         "required":[
                            "id",
                            "me"
                         ]
                      }
                   },
                   "required":[
                      "ref"
                   ]
                },
                "image":{
                   "type":"array",
                   "items":[
                      {
                         "type":"object",
                         "description":"Primary image associated with the person.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the image."
                            },
                            "zoom":{
                               "type":"string",
                               "description":"How much of the subject appears in the picture. A value here indicates a closer zoom level may be available from the media_image request. A missing value indicates a std zoom."
                            },
                            "type":{
                               "type":"string",
                               "description":"Type of image."
                            },
                            "ref":{
                               "type":"object",
                               "properties":{
                                  "id":{
                                     "type":"integer",
                                     "description": "ID to use to get information about this resource."
                                  },
                                  "me":{
                                     "type":"string",
                                     "description": "URI template to use to get information about this resource."
                                  },
                                  "parent":{
                                     "type":"string",
                                     "description": "URI template for information about the parent resource."
                                  },
                                  "children":{
                                     "type":"array",
                                     "description": "URI templates for child resources."
                                  }
                               },
                               "required":[
                                  "id",
                                  "me"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "zoom",
                            "ref"
                         ]
                      }
                   ]
                },
                "ref":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description": "ID to use to get information about this resource."
                      },
                      "me":{
                         "type":"string",
                         "description": "URI template to use to get information about this resource."
                      },
                      "parent":{
                         "type":"string",
                         "description": "URI template for information about the parent resource."
                      },
                      "children":{
                         "type":"array",
                         "description": "URI templates for child resources."
                      }
                   },
                   "required":[
                      "id",
                      "me"
                   ]
                }
             },
             "required":[
                "id",
                "name",
                "ref"
             ]
          },
          "organization":{
             "type":"object",
             "description":"Information about the company that earned the credit.",
             "properties":{
                "id":{
                   "type":"integer",
                   "description":"Rovi ID for the company that earned the credit."
                },
                "name":{
                   "type":"string",
                   "description":"Name of the company."
                },
                "ref":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description": "ID to use to get information about this resource."
                      },
                      "me":{
                         "type":"string",
                         "description": "URI template to use to get information about this resource."
                      },
                      "parent":{
                         "type":"string",
                         "description": "URI template for information about the parent resource."
                      },
                      "children":{
                         "type":"array",
                         "description": "URI templates for child resources."
                      }
                   },
                   "required":[
                      "id",
                      "me"
                   ]
                }
             },
             "required":[
                "id",
                "ref"
             ]
          },
          "id":{
             "type":"integer",
             "description":"Rovi ID for the release."
          },
          "in":{
             "type":"string",
             "description":"Language code."
          },
          "credit":{
             "type":"string",
             "description":"The credit."
          },
          "isCast":{
             "type":"boolean",
             "description":"Whether the credit is a cast credit: true or false."
          },
          "credits":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Credits for the release.",
                   "properties":{
                      "in":{
                         "type":"string",
                         "description":"Language code."
                      },
                      "role":{
                         "type":"string",
                         "description":"Character portrayed."
                      },
                      "credit":{
                         "type":"string",
                         "description":"The credit."
                      },
                      "type":{
                         "type":"string",
                         "description":"Type of credit."
                      },
                      "isCast":{
                         "type":"boolean",
                         "description":"Whether the credit is a cast credit: true or false."
                      },
                      "person":{
                         "type":"object",
                         "description":"Information about the person who earned the credit.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the person."
                            },
                            "name":{
                               "type":"string",
                               "description":"Name of the person."
                            },
                            "alts":{
                               "type":"object",
                               "description":"Other names the person is known by.",
                               "properties":{
                                  "first":{
                                     "type":"string",
                                     "description":"First name of the person."
                                  },
                                  "last":{
                                     "type":"string",
                                     "description":"Last name of the person."
                                  },
                                  "ref":{
                                     "type":"object",
                                     "properties":{
                                        "id":{
                                           "type":"integer",
                                           "description": "ID to use to get information about this resource."
                                        },
                                        "me":{
                                           "type":"string",
                                           "description": "URI template to use to get information about this resource."
                                        },
                                        "parent":{
                                           "type":"string",
                                           "description": "URI template for information about the parent resource."
                                        },
                                        "children":{
                                           "type":"array",
                                           "description": "URI templates for child resources."
                                        }
                                     },
                                     "required":[
                                        "id",
                                        "me"
                                     ]
                                  }
                               },
                               "required":[
                                  "ref"
                               ]
                            },
                            "image":{
                               "type":"array",
                               "items":[
                                  {
                                     "type":"object",
                                     "description":"Primary image associated with the person.",
                                     "properties":{
                                        "id":{
                                           "type":"integer",
                                           "description":"Rovi ID for the image."
                                        },
                                        "zoom":{
                                           "type":"string",
                                           "description":"How much of the subject appears in the picture. A value here indicates a closer zoom level may be available from the media_image request. A missing value indicates a std zoom."
                                        },
                                        "type":{
                                           "type":"string",
                                           "description":"Type of image."
                                        },
                                        "ref":{
                                           "type":"object",
                                           "properties":{
                                              "id":{
                                                 "type":"integer",
                                                 "description": "ID to use to get information about this resource."
                                              },
                                              "me":{
                                                 "type":"string",
                                                 "description": "URI template to use to get information about this resource."
                                              },
                                              "parent":{
                                                 "type":"string",
                                                 "description": "URI template for information about the parent resource."
                                              },
                                              "children":{
                                                 "type":"array",
                                                 "description": "URI templates for child resources."
                                              }
                                           },
                                           "required":[
                                              "id",
                                              "me"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "id",
                                        "zoom",
                                        "ref"
                                     ]
                                  }
                               ]
                            },
                            "ref":{
                               "type":"object",
                               "properties":{
                                  "id":{
                                     "type":"integer",
                                     "description": "ID to use to get information about this resource."
                                  },
                                  "me":{
                                     "type":"string",
                                     "description": "URI template to use to get information about this resource."
                                  },
                                  "parent":{
                                     "type":"string",
                                     "description": "URI template for information about the parent resource."
                                  },
                                  "children":{
                                     "type":"array",
                                     "description": "URI templates for child resources."
                                  }
                               },
                               "required":[
                                  "id",
                                  "me"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "name",
                            "ref"
                         ]
                      },
                      "organization":{
                         "type":"object",
                         "description":"Information about the company that earned the credit.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the company that earned the credit."
                            },
                            "name":{
                               "type":"string",
                               "description":"Name of the company."
                            },
                            "ref":{
                               "type":"object",
                               "properties":{
                                  "id":{
                                     "type":"integer",
                                     "description": "ID to use to get information about this resource."
                                  },
                                  "me":{
                                     "type":"string",
                                     "description": "URI template to use to get information about this resource."
                                  },
                                  "parent":{
                                     "type":"string",
                                     "description": "URI template for information about the parent resource."
                                  },
                                  "children":{
                                     "type":"array",
                                     "description": "URI templates for child resources."
                                  }
                               },
                               "required":[
                                  "id",
                                  "me"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "ref"
                         ]
                      },
                      "ref":{
                         "type":"object",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description": "ID to use to get information about this resource."
                            },
                            "me":{
                               "type":"string",
                               "description": "URI template to use to get information about this resource."
                            },
                            "parent":{
                               "type":"string",
                               "description": "URI template for information about the parent resource."
                            },
                            "children":{
                               "type":"array",
                               "description": "URI templates for child resources."
                            }
                         },
                         "required":[
                            "id",
                            "me"
                         ]
                      }
                   },
                   "required":[
                      "in",
                      "credit",
                      "ref"
                   ]
                }
             ]
          },
          "ref":{
             "type":"object",
             "properties":{
                "id":{
                   "type":"integer",
                   "description": "ID to use to get information about this resource."
                },
                "me":{
                   "type":"string",
                   "description": "URI template to use to get information about this resource."
                },
                "parent":{
                   "type":"string",
                   "description": "URI template for information about the parent resource."
                },
                "children":{
                   "type":"array",
                   "description": "URI templates for child resources."
                }
             },
             "required":[
                "id",
                "me"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "in",
          "credit",
          "ref"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_release_credits/crew [/data_release_credits/crew?id={id}&in={in}&in2={in2}&in3={in3}&page={page}&by={by}] 
Returns crew credits for a release of a movie, episode, or other show. Releases of a show differ in language, content, or title.

## GET
This request requires the `data_release_credits` ID for the release, which is returned in responses to the [data_release](/#reference/release/datarelease) request. A `data_release_credits` ID is the same as the `data_release` ID for the release.

+ Parameters
  + id (required, integer, `982760712`)
    The `data_release_credits` ID for the release, returned in responses to the [data_release](/#reference/release/datarelease) request. A `data_release_credits` ID is the same as the `data_release` ID for the release.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
  + by (optional, string, `type`)
    Response field or object.field to sort by. Child fields must be single-valued, that is, not within an array.
      +  For an ascending sort, replace {by} with the field name like this: __credit__ or __person.alts.last__. For a descending sort, precede the field name with a minus (-) sign like this: __-credit__.
      +  To start with items that contain a particular field, replace {by} with a field-equals-not-null, like this: __person.image=!null__. To start with items that are missing a particular field, specify a field-equals-null, like this: __type=null__. 
      +  To start with items that contain a particular value in a top-level field, replace {by} with field-equals-value, like this: __type=director__. To end with items that contain a particular value, precede the value with an exclamation like this: __type=!company__.
      +  Combine alpha and numeric sorts in a comma-separated list in left-to-right priority.
    
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"release_credits",
       "description":"Credits for a release.",
       "properties":{
          "role":{
             "type":"string",
             "description":"Character portrayed."
          },
          "type":{
             "type":"string",
             "description":"Type of credit."
          },
          "person":{
             "type":"object",
             "description":"Information about the person who earned the credit.",
             "properties":{
                "id":{
                   "type":"integer",
                   "description":"Rovi ID for the person."
                },
                "name":{
                   "type":"string",
                   "description":"Name of the person."
                },
                "alts":{
                   "type":"object",
                   "description":"Other names the person is known by.",
                   "properties":{
                      "first":{
                         "type":"string",
                         "description":"First name of the person."
                      },
                      "last":{
                         "type":"string",
                         "description":"Last name of the person."
                      },
                      "ref":{
                         "type":"object",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description": "ID to use to get information about this resource."
                            },
                            "me":{
                               "type":"string",
                               "description": "URI template to use to get information about this resource."
                            },
                            "parent":{
                               "type":"string",
                               "description": "URI template for information about the parent resource."
                            },
                            "children":{
                               "type":"array",
                               "description": "URI templates for child resources."
                            }
                         },
                         "required":[
                            "id",
                            "me"
                         ]
                      }
                   },
                   "required":[
                      "ref"
                   ]
                },
                "image":{
                   "type":"array",
                   "items":[
                      {
                         "type":"object",
                         "description":"Primary image associated with the person.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the image."
                            },
                            "zoom":{
                               "type":"string",
                               "description":"How much of the subject appears in the picture. A value here indicates a closer zoom level may be available from the media_image request. A missing value indicates a std zoom."
                            },
                            "type":{
                               "type":"string",
                               "description":"Type of image."
                            },
                            "ref":{
                               "type":"object",
                               "properties":{
                                  "id":{
                                     "type":"integer",
                                     "description": "ID to use to get information about this resource."
                                  },
                                  "me":{
                                     "type":"string",
                                     "description": "URI template to use to get information about this resource."
                                  },
                                  "parent":{
                                     "type":"string",
                                     "description": "URI template for information about the parent resource."
                                  },
                                  "children":{
                                     "type":"array",
                                     "description": "URI templates for child resources."
                                  }
                               },
                               "required":[
                                  "id",
                                  "me"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "zoom",
                            "ref"
                         ]
                      }
                   ]
                },
                "ref":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description": "ID to use to get information about this resource."
                      },
                      "me":{
                         "type":"string",
                         "description": "URI template to use to get information about this resource."
                      },
                      "parent":{
                         "type":"string",
                         "description": "URI template for information about the parent resource."
                      },
                      "children":{
                         "type":"array",
                         "description": "URI templates for child resources."
                      }
                   },
                   "required":[
                      "id",
                      "me"
                   ]
                }
             },
             "required":[
                "id",
                "name",
                "ref"
             ]
          },
          "organization":{
             "type":"object",
             "description":"Information about the company that earned the credit.",
             "properties":{
                "id":{
                   "type":"integer",
                   "description":"Rovi ID for the company that earned the credit."
                },
                "name":{
                   "type":"string",
                   "description":"Name of the company."
                },
                "ref":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description": "ID to use to get information about this resource."
                      },
                      "me":{
                         "type":"string",
                         "description": "URI template to use to get information about this resource."
                      },
                      "parent":{
                         "type":"string",
                         "description": "URI template for information about the parent resource."
                      },
                      "children":{
                         "type":"array",
                         "description": "URI templates for child resources."
                      }
                   },
                   "required":[
                      "id",
                      "me"
                   ]
                }
             },
             "required":[
                "id",
                "ref"
             ]
          },
          "id":{
             "type":"integer",
             "description":"Rovi ID for the release."
          },
          "in":{
             "type":"string",
             "description":"Language code."
          },
          "credit":{
             "type":"string",
             "description":"The credit."
          },
          "isCast":{
             "type":"boolean",
             "description":"Whether the credit is a cast credit: true or false."
          },
          "credits":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Credits for the release.",
                   "properties":{
                      "in":{
                         "type":"string",
                         "description":"Language code."
                      },
                      "role":{
                         "type":"string",
                         "description":"Character portrayed."
                      },
                      "credit":{
                         "type":"string",
                         "description":"The credit."
                      },
                      "type":{
                         "type":"string",
                         "description":"Type of credit."
                      },
                      "isCast":{
                         "type":"boolean",
                         "description":"Whether the credit is a cast credit: true or false."
                      },
                      "person":{
                         "type":"object",
                         "description":"Information about the person who earned the credit.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the person."
                            },
                            "name":{
                               "type":"string",
                               "description":"Name of the person."
                            },
                            "alts":{
                               "type":"object",
                               "description":"Other names the person is known by.",
                               "properties":{
                                  "first":{
                                     "type":"string",
                                     "description":"First name of the person."
                                  },
                                  "last":{
                                     "type":"string",
                                     "description":"Last name of the person."
                                  },
                                  "ref":{
                                     "type":"object",
                                     "properties":{
                                        "id":{
                                           "type":"integer",
                                           "description": "ID to use to get information about this resource."
                                        },
                                        "me":{
                                           "type":"string",
                                           "description": "URI template to use to get information about this resource."
                                        },
                                        "parent":{
                                           "type":"string",
                                           "description": "URI template for information about the parent resource."
                                        },
                                        "children":{
                                           "type":"array",
                                           "description": "URI templates for child resources."
                                        }
                                     },
                                     "required":[
                                        "id",
                                        "me"
                                     ]
                                  }
                               },
                               "required":[
                                  "ref"
                               ]
                            },
                            "image":{
                               "type":"array",
                               "items":[
                                  {
                                     "type":"object",
                                     "description":"Primary image associated with the person.",
                                     "properties":{
                                        "id":{
                                           "type":"integer",
                                           "description":"Rovi ID for the image."
                                        },
                                        "zoom":{
                                           "type":"string",
                                           "description":"How much of the subject appears in the picture. A value here indicates a closer zoom level may be available from the media_image request. A missing value indicates a std zoom."
                                        },
                                        "type":{
                                           "type":"string",
                                           "description":"Type of image."
                                        },
                                        "ref":{
                                           "type":"object",
                                           "properties":{
                                              "id":{
                                                 "type":"integer",
                                                 "description": "ID to use to get information about this resource."
                                              },
                                              "me":{
                                                 "type":"string",
                                                 "description": "URI template to use to get information about this resource."
                                              },
                                              "parent":{
                                                 "type":"string",
                                                 "description": "URI template for information about the parent resource."
                                              },
                                              "children":{
                                                 "type":"array",
                                                 "description": "URI templates for child resources."
                                              }
                                           },
                                           "required":[
                                              "id",
                                              "me"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "id",
                                        "zoom",
                                        "ref"
                                     ]
                                  }
                               ]
                            },
                            "ref":{
                               "type":"object",
                               "properties":{
                                  "id":{
                                     "type":"integer",
                                     "description": "ID to use to get information about this resource."
                                  },
                                  "me":{
                                     "type":"string",
                                     "description": "URI template to use to get information about this resource."
                                  },
                                  "parent":{
                                     "type":"string",
                                     "description": "URI template for information about the parent resource."
                                  },
                                  "children":{
                                     "type":"array",
                                     "description": "URI templates for child resources."
                                  }
                               },
                               "required":[
                                  "id",
                                  "me"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "name",
                            "ref"
                         ]
                      },
                      "organization":{
                         "type":"object",
                         "description":"Information about the company that earned the credit.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the company that earned the credit."
                            },
                            "name":{
                               "type":"string",
                               "description":"Name of the company."
                            },
                            "ref":{
                               "type":"object",
                               "properties":{
                                  "id":{
                                     "type":"integer",
                                     "description": "ID to use to get information about this resource."
                                  },
                                  "me":{
                                     "type":"string",
                                     "description": "URI template to use to get information about this resource."
                                  },
                                  "parent":{
                                     "type":"string",
                                     "description": "URI template for information about the parent resource."
                                  },
                                  "children":{
                                     "type":"array",
                                     "description": "URI templates for child resources."
                                  }
                               },
                               "required":[
                                  "id",
                                  "me"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "ref"
                         ]
                      },
                      "ref":{
                         "type":"object",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description": "ID to use to get information about this resource."
                            },
                            "me":{
                               "type":"string",
                               "description": "URI template to use to get information about this resource."
                            },
                            "parent":{
                               "type":"string",
                               "description": "URI template for information about the parent resource."
                            },
                            "children":{
                               "type":"array",
                               "description": "URI templates for child resources."
                            }
                         },
                         "required":[
                            "id",
                            "me"
                         ]
                      }
                   },
                   "required":[
                      "in",
                      "credit",
                      "ref"
                   ]
                }
             ]
          },
          "ref":{
             "type":"object",
             "properties":{
                "id":{
                   "type":"integer",
                   "description": "ID to use to get information about this resource."
                },
                "me":{
                   "type":"string",
                   "description": "URI template to use to get information about this resource."
                },
                "parent":{
                   "type":"string",
                   "description": "URI template for information about the parent resource."
                },
                "children":{
                   "type":"array",
                   "description": "URI templates for child resources."
                }
             },
             "required":[
                "id",
                "me"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "in",
          "credit",
          "ref"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_release_credits/credits [/data_release_credits/credits?id={id}&in={in}&in2={in2}&in3={in3}&page={page}&by={by}] 
Returns both cast and crew credits for a release of a movie, episode, or other show. Releases of a show differ in language, content, or title.

## GET
This request requires the `data_release_credits` ID for the release, which is returned in responses to the [data_release](/#reference/release/datarelease) request. A `data_release_credits` ID is the same as the `data_release` ID for the release.

+ Parameters
  + id (required, integer, `982760712`)
    The `data_release_credits` ID for the release, returned in responses to the [data_release](/#reference/release/datarelease) request. A `data_release_credits` ID is the same as the `data_release` ID for the release.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
  + by (optional, string, `credit`)
    Response field or object.field to sort by. Child fields must be single-valued, that is, not within an array.
      +  For an ascending sort, replace {by} with the field name like this: __credit__ or __person.alts.last__. For a descending sort, precede the field name with a minus (-) like this: __-credit__.
      +  To start with items that contain a particular field, replace {by} with field-equals-not-null, like this: __person.image=!null__. To start with items that are missing a particular field, specify field-equals-null, like this: __role=null__. 
      +  To start with items that contain a particular value in a top-level field, replace {by} with field-equals-value, like this: __type=director__. To end with items that contain a particular value, precede the value with an exclamation like this: __type=!company__.
      +  Combine alpha and numeric sorts in a comma-separated list in left-to-right priority.
    
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"release_credits",
       "description":"Credits for a release.",
       "properties":{
          "role":{
             "type":"string",
             "description":"Character portrayed."
          },
          "type":{
             "type":"string",
             "description":"Type of credit."
          },
          "person":{
             "type":"object",
             "description":"Information about the person who earned the credit.",
             "properties":{
                "id":{
                   "type":"integer",
                   "description":"Rovi ID for the person."
                },
                "name":{
                   "type":"string",
                   "description":"Name of the person."
                },
                "alts":{
                   "type":"object",
                   "description":"Other names the person is known by.",
                   "properties":{
                      "first":{
                         "type":"string",
                         "description":"First name of the person."
                      },
                      "last":{
                         "type":"string",
                         "description":"Last name of the person."
                      },
                      "ref":{
                         "type":"object",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description": "ID to use to get information about this resource."
                            },
                            "me":{
                               "type":"string",
                               "description": "URI template to use to get information about this resource."
                            },
                            "parent":{
                               "type":"string",
                               "description": "URI template for information about the parent resource."
                            },
                            "children":{
                               "type":"array",
                               "description": "URI templates for child resources."
                            }
                         },
                         "required":[
                            "id",
                            "me"
                         ]
                      }
                   },
                   "required":[
                      "ref"
                   ]
                },
                "image":{
                   "type":"array",
                   "items":[
                      {
                         "type":"object",
                         "description":"Primary image associated with the person.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the image."
                            },
                            "zoom":{
                               "type":"string",
                               "description":"How much of the subject appears in the picture. A value here indicates a closer zoom level may be available from the media_image request. A missing value indicates a std zoom."
                            },
                            "type":{
                               "type":"string",
                               "description":"Type of image."
                            },
                            "ref":{
                               "type":"object",
                               "properties":{
                                  "id":{
                                     "type":"integer",
                                     "description": "ID to use to get information about this resource."
                                  },
                                  "me":{
                                     "type":"string",
                                     "description": "URI template to use to get information about this resource."
                                  },
                                  "parent":{
                                     "type":"string",
                                     "description": "URI template for information about the parent resource."
                                  },
                                  "children":{
                                     "type":"array",
                                     "description": "URI templates for child resources."
                                  }
                               },
                               "required":[
                                  "id",
                                  "me"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "zoom",
                            "ref"
                         ]
                      }
                   ]
                },
                "ref":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description": "ID to use to get information about this resource."
                      },
                      "me":{
                         "type":"string",
                         "description": "URI template to use to get information about this resource."
                      },
                      "parent":{
                         "type":"string",
                         "description": "URI template for information about the parent resource."
                      },
                      "children":{
                         "type":"array",
                         "description": "URI templates for child resources."
                      }
                   },
                   "required":[
                      "id",
                      "me"
                   ]
                }
             },
             "required":[
                "id",
                "name",
                "ref"
             ]
          },
          "organization":{
             "type":"object",
             "description":"Information about the company that earned the credit.",
             "properties":{
                "id":{
                   "type":"integer",
                   "description":"Rovi ID for the company that earned the credit."
                },
                "name":{
                   "type":"string",
                   "description":"Name of the company."
                },
                "ref":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description": "ID to use to get information about this resource."
                      },
                      "me":{
                         "type":"string",
                         "description": "URI template to use to get information about this resource."
                      },
                      "parent":{
                         "type":"string",
                         "description": "URI template for information about the parent resource."
                      },
                      "children":{
                         "type":"array",
                         "description": "URI templates for child resources."
                      }
                   },
                   "required":[
                      "id",
                      "me"
                   ]
                }
             },
             "required":[
                "id",
                "ref"
             ]
          },
          "id":{
             "type":"integer",
             "description":"Rovi ID for the release."
          },
          "in":{
             "type":"string",
             "description":"Language code."
          },
          "credit":{
             "type":"string",
             "description":"The credit."
          },
          "isCast":{
             "type":"boolean",
             "description":"Whether the credit is a cast credit: true or false."
          },
          "credits":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Credits for the release.",
                   "properties":{
                      "in":{
                         "type":"string",
                         "description":"Language code."
                      },
                      "role":{
                         "type":"string",
                         "description":"Character portrayed."
                      },
                      "credit":{
                         "type":"string",
                         "description":"The credit."
                      },
                      "type":{
                         "type":"string",
                         "description":"Type of credit."
                      },
                      "isCast":{
                         "type":"boolean",
                         "description":"Whether the credit is a cast credit: true or false."
                      },
                      "person":{
                         "type":"object",
                         "description":"Information about the person who earned the credit.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the person."
                            },
                            "name":{
                               "type":"string",
                               "description":"Name of the person."
                            },
                            "alts":{
                               "type":"object",
                               "description":"Other names the person is known by.",
                               "properties":{
                                  "first":{
                                     "type":"string",
                                     "description":"First name of the person."
                                  },
                                  "last":{
                                     "type":"string",
                                     "description":"Last name of the person."
                                  },
                                  "ref":{
                                     "type":"object",
                                     "properties":{
                                        "id":{
                                           "type":"integer",
                                           "description": "ID to use to get information about this resource."
                                        },
                                        "me":{
                                           "type":"string",
                                           "description": "URI template to use to get information about this resource."
                                        },
                                        "parent":{
                                           "type":"string",
                                           "description": "URI template for information about the parent resource."
                                        },
                                        "children":{
                                           "type":"array",
                                           "description": "URI templates for child resources."
                                        }
                                     },
                                     "required":[
                                        "id",
                                        "me"
                                     ]
                                  }
                               },
                               "required":[
                                  "ref"
                               ]
                            },
                            "image":{
                               "type":"array",
                               "items":[
                                  {
                                     "type":"object",
                                     "description":"Primary image associated with the person.",
                                     "properties":{
                                        "id":{
                                           "type":"integer",
                                           "description":"Rovi ID for the image."
                                        },
                                        "zoom":{
                                           "type":"string",
                                           "description":"How much of the subject appears in the picture. A value here indicates a closer zoom level may be available from the media_image request. A missing value indicates a std zoom."
                                        },
                                        "type":{
                                           "type":"string",
                                           "description":"Type of image."
                                        },
                                        "ref":{
                                           "type":"object",
                                           "properties":{
                                              "id":{
                                                 "type":"integer",
                                                 "description": "ID to use to get information about this resource."
                                              },
                                              "me":{
                                                 "type":"string",
                                                 "description": "URI template to use to get information about this resource."
                                              },
                                              "parent":{
                                                 "type":"string",
                                                 "description": "URI template for information about the parent resource."
                                              },
                                              "children":{
                                                 "type":"array",
                                                 "description": "URI templates for child resources."
                                              }
                                           },
                                           "required":[
                                              "id",
                                              "me"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "id",
                                        "zoom",
                                        "ref"
                                     ]
                                  }
                               ]
                            },
                            "ref":{
                               "type":"object",
                               "properties":{
                                  "id":{
                                     "type":"integer",
                                     "description": "ID to use to get information about this resource."
                                  },
                                  "me":{
                                     "type":"string",
                                     "description": "URI template to use to get information about this resource."
                                  },
                                  "parent":{
                                     "type":"string",
                                     "description": "URI template for information about the parent resource."
                                  },
                                  "children":{
                                     "type":"array",
                                     "description": "URI templates for child resources."
                                  }
                               },
                               "required":[
                                  "id",
                                  "me"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "name",
                            "ref"
                         ]
                      },
                      "organization":{
                         "type":"object",
                         "description":"Information about the company that earned the credit.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the company that earned the credit."
                            },
                            "name":{
                               "type":"string",
                               "description":"Name of the company."
                            },
                            "ref":{
                               "type":"object",
                               "properties":{
                                  "id":{
                                     "type":"integer",
                                     "description": "ID to use to get information about this resource."
                                  },
                                  "me":{
                                     "type":"string",
                                     "description": "URI template to use to get information about this resource."
                                  },
                                  "parent":{
                                     "type":"string",
                                     "description": "URI template for information about the parent resource."
                                  },
                                  "children":{
                                     "type":"array",
                                     "description": "URI templates for child resources."
                                  }
                               },
                               "required":[
                                  "id",
                                  "me"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "ref"
                         ]
                      },
                      "ref":{
                         "type":"object",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description": "ID to use to get information about this resource."
                            },
                            "me":{
                               "type":"string",
                               "description": "URI template to use to get information about this resource."
                            },
                            "parent":{
                               "type":"string",
                               "description": "URI template for information about the parent resource."
                            },
                            "children":{
                               "type":"array",
                               "description": "URI templates for child resources."
                            }
                         },
                         "required":[
                            "id",
                            "me"
                         ]
                      }
                   },
                   "required":[
                      "in",
                      "credit",
                      "ref"
                   ]
                }
             ]
          },
          "ref":{
             "type":"object",
             "properties":{
                "id":{
                   "type":"integer",
                   "description": "ID to use to get information about this resource."
                },
                "me":{
                   "type":"string",
                   "description": "URI template to use to get information about this resource."
                },
                "parent":{
                   "type":"string",
                   "description": "URI template for information about the parent resource."
                },
                "children":{
                   "type":"array",
                   "description": "URI templates for child resources."
                }
             },
             "required":[
                "id",
                "me"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "in",
          "credit",
          "ref"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_release_ratings [/data_release_ratings?id={id}&country={country}&page={page}] 
Returns parental ratings for a release of a movie, episode, or other show. Releases of a show differ in language, content, or title.

## GET
This request requires the `data_release_ratings` ID for the release, which is returned in responses to [data_release](/#reference/release/datarelease) requests. A `data_release_ratings` ID is the same as the `data_release` ID for the release.

+ Parameters
  + id (required, integer, `982760712`)
    The `data_release_ratings` ID for the release, returned in responses to the [data_release](/#reference/release/datarelease) request. A `data_release_ratings` ID is the same as the `data_release` ID for the release.
  + country (required, string, `US`)
    Country for which you want parental ratings, specified as one of the following ISO 3166-1 alpha-2 codes:
    <table><tr>
    <th>Code</th><th>Country</th><th>Code</th><th>Country</th>
    </tr><tr>
    <td>AR</td><td><p>Argentina</p></td><td>MX</td><td><p>Mexico</p></td>
    </tr><tr>
    <td>AT</td><td><p>Austria</p></td><td>NL</td><td><p>Netherlands</p></td>
    </tr><tr>
    <td>BE</td><td><p>Belgium</p></td><td>NO</td><td><p>Norway</p></td>
    </tr><tr>
    <td>BR</td><td><p>Brazil</p></td><td>PE</td><td><p>Peru</p></td>
    </tr><tr>
    <td>CA</td><td><p>Canada</p></td><td>PL</td><td><p>Poland</p></td>
    </tr><tr>
    <td>CL</td><td><p>Chile</p></td><td>PT</td><td><p>Portugal</p></td>
    </tr><tr>
    <td>CO</td><td><p>Colombia</p></td><td>ES</td><td><p>Spain</p></td>
    </tr><tr>
    <td>DK</td><td><p>Denmark</p></td><td>SE</td><td><p>Sweden</p></td>
    </tr><tr>
    <td>FI</td><td><p>Finland</p></td><td>CH</td><td><p>Switzerland</p></td>
    </tr><tr>
    <td>FR</td><td><p>France</p></td><td>TC</td><td><p>Turks & Caicos</p></td>
    </tr><tr>
    <td>DE</td><td><p>Germany</p></td><td>GB</td><td><p>United Kingdom*</p></td>
    </tr><tr>
    <td>IE</td><td><p>Ireland</p></td><td>US</td><td><p>United States</p></td>
    </tr><tr>
    <td>IT</td><td><p>Italy</p></td><td>VE</td><td><p>Venezuela</p></td>
    </tr></table><br/>*Includes Wales, Scotland, and Northern Ireland.
    
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
    
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"release_ratings",
       "description":"Parental ratings for a release.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the release."
          },
          "ratings":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Parental rating for the release.",
                   "properties":{
                      "in":{
                         "type":"string"
                      },
                      "type":{
                         "type":"string",
                         "description":"Source of the parental rating."
                      },
                      "rating":{
                         "type":"string",
                         "description":"The parental rating."
                      },
                      "medium":{
                         "type":"string",
                         "description":"Media that this rating applies to.",
                         "oneOf":[
                            {
                               "enum":[
                                  "movie"
                               ],
                               "description":"Theatrical film."
                            },
                            {
                               "enum":[
                                  "tv"
                               ],
                               "description":"Television."
                            },
                            {
                               "enum":[
                                  "stars"
                               ],
                               "description":"TV series qualitative rating from 1 to 4 stars. Rated by Rovi."
                            },
                            {
                               "enum":[
                                  "age"
                               ],
                               "description":"TV series youngest appropriate age rating. Rated by Rovi."
                            },
                            {
                               "enum":[
                                  "family"
                               ],
                               "description":"TV series family friendly rating on a scale of 0 to 10."
                            }
                         ]
                      },
                      "countries":{
                         "type":"array",
                         "description":"Countries the parental rating applies to.",
                         "items":{
                            "type":"string"
                         }
                      },
                      "reasons":{
                         "type":"array",
                         "description":"Reasons for the rating.",
                         "items":{
                            "type":"string"
                         }
                      },
                      "subrating":{
                         "type":"string",
                         "description":"Content warning labels that apply to the program."
                      },
                      "ref":{
                         "type":"object",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description": "ID to use to get information about this resource."
                            },
                            "me":{
                               "type":"string",
                               "description": "URI template to use to get information about this resource."
                            },
                            "parent":{
                               "type":"string",
                               "description": "URI template for information about the parent resource."
                            },
                            "children":{
                               "type":"array",
                               "description": "URI templates for child resources."
                            }
                         },
                         "required":[
                            "id",
                            "me"
                         ]
                      }
                   },
                   "required":[
                      "in",
                      "type",
                      "rating",
                      "ref"
                   ]
                }
             ]
          },
          "ref":{
             "type":"object",
             "properties":{
                "id":{
                   "type":"integer",
                   "description": "ID to use to get information about this resource."
                },
                "me":{
                   "type":"string",
                   "description": "URI template to use to get information about this resource."
                },
                "parent":{
                   "type":"string",
                   "description": "URI template for information about the parent resource."
                },
                "children":{
                   "type":"array",
                   "description": "URI templates for child resources."
                }
             },
             "required":[
                "id",
                "me"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "ref"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_release_synopses/collection [/data_release_synopses/collection?id={id}&in={in}&in2={in2}&in3={in3}]
Returns a range of synopses of a release of a movie, episode, or other show. Releases of a show differ in language, content, or title.

## GET
This request requires the `data_release_synopses` ID for the release, which is returned in responses to [data_release](/#reference/release/datarelease) requests. The `data_release_synopses` ID is the same as the `data_release` ID for the release.

+ Parameters
  + id (required, integer, `982760712`)
    The `data_release_synopses` ID for the release, returned in responses to [data_release](/#reference/release/datarelease) requests.  The `data_release_synopses` ID is the same as the `data_release` ID for the release.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"release_synopses",
       "description":"Synopses of a release.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the release."
          },
          "synopses":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Synopsis of the release.",
                   "properties":{
                      "length":{
                         "type":"string",
                         "description":"Type of synopsis.",
                         "oneOf":[
                            {
                               "enum":[
                                  "long"
                               ],
                               "description":"Straightforward, objective plot synopsis with up to 420 characters."
                            },
                            {
                               "enum":[
                                  "short"
                               ],
                               "description":"Straightforward, objective plot synopsis with up to 150 characters."
                            },
                            {
                               "enum":[
                                  "plain"
                               ],
                               "description":"Straightforward description, without credits, that is never critical."
                            },
                            {
                               "enum":[
                                  "extended"
                               ],
                               "description":"Straightforward, objective plot synopsis with up to 2000 characters."
                            },
                            {
                               "enum":[
                                  "source"
                               ],
                               "description":"Synopsis supplied by the channel on which the show is broadcast."
                            },
                            {
                               "enum":[
                                  "review"
                               ],
                               "description":"Movie review."
                            }
                         ]
                      },
                      "in":{
                         "type":"string",
                         "description":"Language of the synopsis."
                      },
                      "synopsis":{
                         "type":"string",
                         "description":"The synopsis."
                      },
                      "cuts":{
                         "type":"array",
                         "description":"Character positions at which you can end the synopsis to conserve space. A cut number is the number of the last character to include, not the first character to cut. Add a period after that point if there is no ending punctuation (a period or a period followed by a single of double quotation mark).",
                         "items":{
                            "type":"string"
                         }
                      },
                      "ref":{
                         "type":"object",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description": "ID to use to get information about this resource."
                            },
                            "me":{
                               "type":"string",
                               "description": "URI template to use to get information about this resource."
                            },
                            "parent":{
                               "type":"string",
                               "description": "URI template for information about the parent resource."
                            },
                            "children":{
                               "type":"array",
                               "description": "URI templates for child resources."
                            }
                         },
                         "required":[
                            "id",
                            "me"
                         ]
                      }
                   },
                   "required":[
                      "length",
                      "in",
                      "synopsis",
                      "ref"
                   ]
                }
             ]
          },
          "ref":{
             "type":"object",
             "properties":{
                "id":{
                   "type":"integer",
                   "description": "ID to use to get information about this resource."
                },
                "me":{
                   "type":"string",
                   "description": "URI template to use to get information about this resource."
                },
                "parent":{
                   "type":"string",
                   "description": "URI template for information about the parent resource."
                },
                "children":{
                   "type":"array",
                   "description": "URI templates for child resources."
                }
             },
             "required":[
                "id",
                "me"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "ref"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_release_synopses/best [/data_release_synopses/best?id={id}&length={length}&length2={length2}&length3={length3}&length4={length4}&in={in}&in2={in2}&in3={in3}]
Returns the best available synopsis of a release of a movie, episode, or other show, as determined by type:
+  `long` &mdash; Straightforward, objective description of the show in up to 420 characters.
+  `short` &mdash; A shorter version of the "long" description.
+  `plain` &mdash; A straightforward description without credits that is never critical.
+  `extended` &mdash; A more detailed description than the "long" description, up to 2000 characters.

## GET
This request requires the `data_release_synopses` ID for the release, which is returned in responses to [data_release](/#reference/release/datarelease) requests. The `data_release_synopses` ID is the same as the `data_other` ID for the release.

+ Parameters
  + id (required, integer, `982760712`)
    The `data_release_synopses` ID for the release, returned in responses to [data_other](/#reference/other/dataother) requests.  The `data_release_synopses` ID is the same as the `data_release` ID for the release.
  + length (required, string enum, `short`)
    First choice for type of description:
    <table>
    <tr><th>Value</th><th>Description</th>
    </tr><tr>
    <td>long</td><td><p>Straightforward, objective description of the show in up to 420 characters.</p></td>
    </tr><tr>
    <td>short</td><td><p>A shorter version of the "long" description.</p></td>
    </tr><tr>
    <td>plain</td><td><p>A straightforward description without credits that is never critical.</p></td>
    </tr><tr>
    <td>extended</td><td><p>A more detailed description than the "long" description, up to 2000 characters.</p></td>
    </tr>
    </table>
    
  + length2 (optional, string enum, `long`)
    Second choice for type of description.
  + length3 (optional, string enum, `plain`)
    Third choice for type of description.
  + length4 (optional, string enum, `extended`)
    Fourth choice for type of description.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"release_synopsis",
       "description":"Synopses of a release.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the release."
          },
          "synopsis":{
             "type":"object",
             "description":"Synopsis of the release.",
             "properties":{
                "length":{
                   "type":"string",
                   "description":"Type of synopsis.",
                   "oneOf":[
                      {
                         "enum":[
                            "long"
                         ],
                         "description":"Straightforward, objective plot synopsis with up to 420 characters."
                      },
                      {
                         "enum":[
                            "short"
                         ],
                         "description":"Straightforward, objective plot synopsis with up to 150 characters."
                      },
                      {
                         "enum":[
                            "plain"
                         ],
                         "description":"Straightforward description, without credits, that is never critical."
                      },
                      {
                         "enum":[
                            "extended"
                         ],
                         "description":"Straightforward, objective plot synopsis with up to 2000 characters."
                      },
                      {
                         "enum":[
                            "source"
                         ],
                         "description":"Synopsis supplied by the channel on which the show is broadcast."
                      },
                      {
                         "enum":[
                            "review"
                         ],
                         "description":"Movie review."
                      }
                   ]
                },
                "in":{
                   "type":"string",
                   "description":"Language of the synopsis."
                },
                "synopsis":{
                   "type":"string",
                   "description":"The synopsis."
                },
                "cuts":{
                   "type":"array",
                   "description":"Character positions at which you can end the synopsis to conserve space. A cut number is the number of the last character to include, not the first character to cut. Add a period after that point if there is no ending punctuation (a period or a period followed by a single of double quotation mark).",
                   "items":{
                      "type":"string"
                   }
                },
                "ref":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description": "ID to use to get information about this resource."
                      },
                      "me":{
                         "type":"string",
                         "description": "URI template to use to get information about this resource."
                      },
                      "parent":{
                         "type":"string",
                         "description": "URI template for information about the parent resource."
                      },
                      "children":{
                         "type":"array",
                         "description": "URI templates for child resources."
                      }
                   },
                   "required":[
                      "id",
                      "me"
                   ]
                }
             },
             "required":[
                "length",
                "in",
                "synopsis",
                "ref"
             ]
          },
          "ref":{
             "type":"object",
             "properties":{
                "id":{
                   "type":"integer",
                   "description": "ID to use to get information about this resource."
                },
                "me":{
                   "type":"string",
                   "description": "URI template to use to get information about this resource."
                },
                "parent":{
                   "type":"string",
                   "description": "URI template for information about the parent resource."
                },
                "children":{
                   "type":"array",
                   "description": "URI templates for child resources."
                }
             },
             "required":[
                "id",
                "me"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "ref"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_release_theatricals [/data_release_theatricals?id={id}&page={page}]
Returns information about the theatrical releases by country of a release of a movie, episode, or other show. Releases of a show differ in language, content, or title.

## GET
This request requires the `data_release` ID for the release, which is returned in responses to the following requests:
+  [data_movie_releases](/#reference/movie/datamoviereleases)
+  [data_episode_releases](/#reference/episode/dataepisodereleases)
+  [data_other_releases](/#reference/other/dataotherreleases)

+ Parameters
  + id (required, integer, `982760712`)
    The `data_release` ID for the release, which is returned in responses to the following requests:
       +  [data_movie_releases](/#reference/movie/datamoviereleases)
       +  [data_episode_releases](/#reference/episode/dataepisodereleases)
       +  [data_other_releases](/#reference/other/dataotherreleases)

  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.

+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"release_theatricals",
       "description":"Information about the theatrical releases of a show.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the release."
          },
          "in":{
             "type":"string"
          },
          "theatricals":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "properties":{
                      "country":{
                         "type":"string",
                         "description":"Country of the theatrical release."
                      },
                      "releases":{
                         "type":"array",
                         "items":[
                            {
                               "type":"object",
                               "properties":{
                                  "type":{
                                     "type":"string",
                                     "description":"Type of release."
                                  },
                                  "date":{
                                     "type":"string"
                                  },
                                  "year":{
                                     "type":"integer"
                                  },
                                  "ref":{
                                     "type":"object",
                                     "properties":{
                                        "id":{
                                           "type":"integer",
                                           "description": "ID to use to get information about this resource."
                                        },
                                        "me":{
                                           "type":"string",
                                           "description": "URI template to use to get information about this resource."
                                        },
                                        "parent":{
                                           "type":"string",
                                           "description": "URI template for information about the parent resource."
                                        },
                                        "children":{
                                           "type":"array",
                                           "description": "URI templates for child resources."
                                        }
                                     },
                                     "required":[
                                        "id",
                                        "me"
                                     ]
                                  }
                               },
                               "required":[
                                  "date",
                                  "year",
                                  "ref"
                               ]
                            }
                         ]
                      },
                      "ref":{
                         "type":"object",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description": "ID to use to get information about this resource."
                            },
                            "me":{
                               "type":"string",
                               "description": "URI template to use to get information about this resource."
                            },
                            "parent":{
                               "type":"string",
                               "description": "URI template for information about the parent resource."
                            },
                            "children":{
                               "type":"array",
                               "description": "URI templates for child resources."
                            }
                         },
                         "required":[
                            "id",
                            "me"
                         ]
                      }
                   },
                   "required":[
                      "country",
                      "ref"
                   ]
                }
             ]
          },
          "ref":{
             "type":"object",
             "properties":{
                "id":{
                   "type":"integer",
                   "description": "ID to use to get information about this resource."
                },
                "me":{
                   "type":"string",
                   "description": "URI template to use to get information about this resource."
                },
                "parent":{
                   "type":"string",
                   "description": "URI template for information about the parent resource."
                },
                "children":{
                   "type":"array",
                   "description": "URI templates for child resources."
                }
             },
             "required":[
                "id",
                "me"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "in",
          "theatricals",
          "ref"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# Group Content

This section documents the data_content API request, which returns information about a Rovi ID that applies to a show.

*Design Note:*  Rovi Cloud assigns a unique ID, a `data_content` ID, to every show, every movie, series, season, release, episode, and other show. A Rovi `data_content` ID is the same ID for a show as the `data_movie`, `data_series`, `data_season`, `data_release`, `data_episode` or `data_other` ID. 

# data_content [/data_content?id={id}&in={in}&in2={in2}&in3={in3}]
Returns information about a Rovi ID that applies to a show.

Information returned includes the title and type of show.

## GET
This request requires a Rovi ID for a show.

+ Parameters
  + id (required, integer, `914806985`)
    The `data_content` or other Rovi ID for a show. A `data_content` ID is the same ID as the `data_movie`, `data_series`, `data_season`, `data_release`, `data_episode` or `data_other` ID for the show.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"content",
       "description":"Information about a show.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the show."
          },
          "market":{
             "type":"array",
             "items":{
                "type":"string"
             }
          },
          "in":{
             "type":"string"
          },
          "type":{
             "type":"string",
             "oneOf":[
                {
                   "enum":[
                      "movie"
                   ],
                   "description":"Movie."
                },
                {
                   "enum":[
                      "season"
                   ],
                   "description":"Season in a TV series."
                },
                {
                   "enum":[
                      "episode"
                   ],
                   "description":"Episode in a TV series."
                },
                {
                   "enum":[
                      "series"
                   ],
                   "description":"TV series."
                },
                {
                   "enum":[
                      "other"
                   ],
                   "description":"A program other than a movie or TV series."
                }
             ]
          },
          "title":{
             "type":"string",
             "description":"Title of the show."
          },
          "synonyms":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "properties":{
                      "program":{
                         "type":"integer",
                         "description":"Cosmo ID."
                      },
                      "iguide":{
                         "type":"integer",
                         "description":"iGuide ID."
                      },
                      "amg":{
                         "type":"string",
                         "description":"AMG ID."
                      },
                      "eidr":{
                         "type":"string",
                         "description":"EIDR ID."
                      },
                      "in":{
                         "type":"string",
                         "description":"Language of the show."
                      },
                      "title":{
                         "type":"string",
                         "description":"Title of the show."
                      },
                      "ref":{
                         "type":"object",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description": "ID to use to get information about this resource."
                            },
                            "me":{
                               "type":"string",
                               "description": "URI template to use to get information about this resource."
                            },
                            "parent":{
                               "type":"string",
                               "description": "URI template for information about the parent resource."
                            },
                            "children":{
                               "type":"array",
                               "description": "URI templates for child resources."
                            }
                         },
                         "required":[
                            "id",
                            "me"
                         ]
                      }
                   },
                   "required":[
                      "in",
                      "title",
                      "ref"
                   ]
                }
             ]
          },
          "ref":{
             "type":"object",
             "properties":{
                "id":{
                   "type":"integer",
                   "description": "ID to use to get information about this resource."
                },
                "me":{
                   "type":"string",
                   "description": "URI template to use to get information about this resource."
                },
                "parent":{
                   "type":"string",
                   "description": "URI template for information about the parent resource."
                },
                "children":{
                   "type":"array",
                   "description": "URI templates for child resources."
                }
             },
             "required":[
                "id",
                "me"
             ]
          }
       },
       "required":[
          "id",
          "in",
          "type",
          "title",
          "ref"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# Group Person

This section documents the calls that return data about a person and includes the data_name request that returns information about a team or organization.

*Design Note:* The `data_person` ID for a person identifies the person in all of the following API calls.
- [data_person](/#reference/person/dataperson)
- [data_delta_person](/#reference/person/datadeltaperson)
- [data_name](/#reference/person/dataname)
- [data_person_bios](/#reference/person/datapersonbios)
- [data_person_relatives](/#reference/person/datapersonrelatives)
- [data_person_awards](/#reference/awards/datapersonawards) (in the Awards section)
- [data_name_images/best](/#reference/image/datanameimagesbest) (in the Image section)
- [data_name_images/collection](/#reference/image/datanameimagescollection) (in the Image section)
- [data_person_appearances](/#reference/tv-schedule/datapersonappearances) (in the TV Schedule section)

# data_person [/data_person?id={id}&in={in}&in2={in2}&in3={in3}]
Returns information and related social media resources about a person in movies or television.

## GET
This request requires the `data_person` ID for the person, which is returned in responses to the following requests:
+  [data_airing_credits/cast](/#reference/tv-schedule/dataairingcreditscast)
+  [data_airing_credits/crew](/#reference/tv-schedule/dataairingcreditscrew)
+  [data_airing_credits/credits](/#reference/tv-schedule/dataairingcreditscredits)
+  [data_other_credits/cast](/#reference/other/dataothercreditscast)
+  [data_other_credits/crew](/#reference/other/dataothercreditscrew)
+  [data_other_credits/credits](/#reference/other/dataothercreditscredits)
+  [data_series_credits/cast](/#reference/series/dataseriescreditscast)
+  [data_series_credits/crew](/#reference/series/dataseriescreditscrew)
+  [data_series_credits/credits](/#reference/series/dataseriescreditscredits)
+  [data_movie_credits/cast](/#reference/movie/datamoviecreditscast)
+  [data_movie_credits/crew](/#reference/movie/datamoviecreditscrew)
+  [data_movie_credits/credits](/#reference/movie/datamoviecreditscredits)

+ Parameters
  + id (required, integer, `6781337`)
    The `data_person` ID for the person, returned in responses to the following requests:
        +  [data_airing_credits/cast](/#reference/tv-schedule/dataairingcreditscast)
        +  [data_airing_credits/crew](/#reference/tv-schedule/dataairingcreditscrew)
        +  [data_airing_credits/credits](/#reference/tv-schedule/dataairingcreditscredits)
        +  [data_other_credits/cast](/#reference/other/dataothercreditscast)
        +  [data_other_credits/crew](/#reference/other/dataothercreditscrew)
        +  [data_other_credits/credits](/#reference/other/dataothercreditscredits)
        +  [data_series_credits/cast](/#reference/series/dataseriescreditscast)
        +  [data_series_credits/crew](/#reference/series/dataseriescreditscrew)
        +  [data_series_credits/credits](/#reference/series/dataseriescreditscredits)
        +  [data_movie_credits/cast](/#reference/movie/datamoviecreditscast)
        +  [data_movie_credits/crew](/#reference/movie/datamoviecreditscrew)
        +  [data_movie_credits/credits](/#reference/movie/datamoviecreditscredits)
        
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)
```
    {
       "$schema":"http://json-schema.org/draft-04/schema#",
       "type":"object",
       "title":"person",
       "description":"Information about a person.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the person."
          },
          "in":{
             "type":"string",
             "description":"Personal details."
          },
          "name":{
             "type":"string",
             "description":"Name of the person."
          },
          "alts":{
             "type":"object",
             "description":"Other names the person is known by.",
             "properties":{
                "first":{
                   "type":"string",
                   "description":"Another first name the person is known by."
                },
                "last":{
                   "type":"string",
                   "description":"Another last name the person is known by."
                },
                "birth":{
                   "type":"string",
                   "description":"Birth name of the person."
                }
             }
          },
          "alias":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Other names the person is known by.",
                   "properties":{
                      "name":{
                         "type":"string",
                         "description":"Full name of the person."
                      },
                      "first":{
                         "type":"string",
                         "description":"First name of the person."
                      },
                      "last":{
                         "type":"string",
                         "description":"Last name of the person."
                      }
                   },
                   "required":[
                      "name",
                      "last"
                   ]
                }
             ]
          },
          "gender":{
             "type":"string",
             "description":"Gender of the person in a single character: M, F, or U (unknown)."
          },
          "isCelebrity":{
             "type":"boolean",
             "description":"True if the person is a celebrity. Element is omitted otherwise."
          },
          "professions":{
             "type":"array",
             "description":"Professions the person is known for.",
             "items":{
                "type":"string"
             }
          },
          "dob":{
             "type":"string",
             "description":"Birthdate of the person."
          },
          "dod":{
             "type":"string",
             "description":"Death date of the person."
          },
          "zodiac":{
             "type":"string",
             "description":"Zodiac sign the person was born under."
          },
          "birthplace":{
             "type":"string",
             "description":"Place the person was born."
          },
          "highSchool":{
             "type":"string",
             "description":"High school the person attended."
          },
          "college":{
             "type":"string",
             "description":"College the person attended."
          },
          "homepage":{
             "type":"string",
             "description":"Website for the person."
          },
          "links":{
             "type":"object",
             "properties":{
                "data_person":{
                   "type":"object",
                   "description":"ID to use in a data_person request to get information about the person.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_person_appearances":{
                   "type":"object",
                   "description":"ID to use in a data_person_appearances request to get a schedule of upcoming broadcast appearances.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_person_bio":{
                   "type":"object",
                   "description":"ID to use in a data_person_bio request to get a biography of the person.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_person_related":{
                   "type":"object",
                   "description":"ID to use in a data_person_relatives request to get information about a person's relatives.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_name":{
                   "type":"object",
                   "description":"",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_name_images":{
                   "type":"object",
                   "description":"ID to use in a data_name_images request to find images of the person.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_person",
                "data_person_appearances",
                "data_person_bio",
                "data_person_related",
                "data_name",
                "data_name_images"
             ]
          }
       },
       "required":[
          "id",
          "in",
          "name",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_delta_person [/data_delta_person?day={day}&next={next}]
Returns IDs and ETags for [data_person](/#reference/person/dataperson) response data that changed during a single UTC date one to four days ago.

Use this request as a first step toward updating your cached [data_person](/#reference/person/dataperson) response data.

## GET
If more than 100 results are available, the response includes a __next__ field to identify the starting point of the next page of results.

+ Parameters
  + day (required, string matching \d{4}-\d{2}-\d{2}, `2015-06-03`)
    A UTC date, specified in YYYY-MM-DD format, that is one to four days before the current UTC date.
  + next (optional, integer)
    The starting point for the next page of results, returned in the __next__ field in a response to this request if another page of results is available.
    
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"person",
       "properties":{
          "date":{
             "type":"string",
             "description":"UTC date requested."
          },
          "links":{
             "type":"object",
             "data_delta_person":{
                "type":"object",
                "properties":{
                   "date":{
                      "type":"string",
                      "description":"UTC date requested."
                   },
                   "next":{
                      "type":"string",
                      "description":"Starting point for the next page of results."
                   }
                }
             }
          },
          "type":{
             "type":"string",
             "description":"Type of changed data."
          },
          "size":{
             "type":"integer",
             "description":"Number of items in this response."
          },
          "deltas":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"Rovi ID for data that changed."
                      },
                      "links":{
                         "type":"object",
                         "data_person":{
                            "type":"object",
                            "properties":{
                               "id":{
                                  "type":"integer",
                                  "description":"ID to use in a data_person request to get the changed data."
                               }
                            }
                         }
                      },
                      "etag":{
                         "type":"string",
                         "description":"ETag for the latest data for that ID."
                      }
                   }
                }
             ]
          }
       }
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_name [/data_name?id={id}&in={in}&in2={in2}&in3={in3}]
Returns information about a person, team, or organization in movies or television.

**Design note:**  The `data_name` ID for a person is the same as the `data_person` ID for the person. For a team or organization, however, just the `data_name` ID applies.

## GET
This request requires the ID for the person, team, or organization, returned in responses to the following requests:
+  [data_airing_credits/crew](/#reference/tv-schedule/dataairingcreditscrew)
+  [data_airing_credits/credits](/#reference/tv-schedule/dataairingcreditscredits)
+  [data_other_credits/crew](/#reference/other/dataothercreditscrew)
+  [data_other_credits/credits](/#reference/other/dataothercreditscredits)
+  [data_series_credits/crew](/#reference/series/dataseriescreditscrew)
+  [data_series_credits/credits](/#reference/series/dataseriescreditscredits)
+  [data_movie_credits/crew](/#reference/movie/datamoviecreditscrew)
+  [data_movie_credits/credits](/#reference/movie/datamoviecreditscredits)

+ Parameters
  + id (required, integer, `6781337`)
    The `data_person` ID for the person, returned in responses to the following requests:
        +  [data_airing_credits/crew](/#reference/tv-schedule/dataairingcreditscrew)
        +  [data_airing_credits/credits](/#reference/tv-schedule/dataairingcreditscredits)
        +  [data_other_credits/crew](/#reference/other/dataothercreditscrew)
        +  [data_other_credits/credits](/#reference/other/dataothercreditscredits)
        +  [data_series_credits/crew](/#reference/series/dataseriescreditscrew)
        +  [data_series_credits/credits](/#reference/series/dataseriescreditscredits)
        +  [data_movie_credits/crew](/#reference/movie/datamoviecreditscrew)
        +  [data_movie_credits/credits](/#reference/movie/datamoviecreditscredits)
        
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"name",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi data_name ID for the person, team, or organization."
          },
          "name":{
             "type":"string",
             "description":"Information about the person, team, or organization."
          },
          "links":{
             "type":"object",
             "properties":{
                "data_name":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"ID to use in a data_name request to get information about the person, team, or organization."
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_name_images":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"ID to use in a data\_name\_images request to get images for the person, team, or organization."
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_person":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"ID to use in a data_person request to get details about a person."
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_name",
                "data_name_images"
             ]
          }
       },
       "required":[
          "id",
          "name",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_person_bios [/data_person_bios?id={id}&type={type}&in={in}&in2={in2}&in3={in3}]
Returns up to two biographies about a person, one as a paragraph and the other as a bulleted list. Both biographies are HTML-formatted, ready to drop into a webpage.

## GET
This request requires the `data_person_bios` ID for the person, which is returned in responses to [data_person](/#reference/tv-and-movie-data/dataperson) requests. A `data_person_bios` ID is the same as the `data_person` ID for the person.

+ Parameters
  + id (required, integer, `6781068`)
    The `data_person_bios` ID for the person, returned in responses to [data_person](/#reference/tv-and-movie-data/dataperson) requests. A `data_person_bios` ID is the same as the `data_person` ID for the person.
  + type (optional, string, `short`)
    Type of biography. If not specified, all available types are returned.
    <table>
    <tr><th>Value</th><th>Description</th>
    </tr><tr>
    <td>short</td>
    <td><p>A biography in paragraph format.</p></td>
    </tr><tr>
    <td>bulleted</td>
    <td><p>A biography in a bulleted list.</p></td>
    </tr>
    </table>
    
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
     
+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"person_bios",
       "description":"Biographies of a person.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the person."
          },
          "bios":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Biographies of the person.",
                   "properties":{
                      "type":{
                         "type":"string",
                         "oneOf":[
                            {
                               "enum":[
                                  "short"
                               ],
                               "description":"HTML-formatted paragraph."
                            },
                            {
                               "enum":[
                                  "bulleted"
                               ],
                               "description":"HTML-formatted bulleted list."
                            }
                         ]
                      },
                      "in":{
                         "type":"string",
                         "description":"Language of the biography."
                      },
                      "bio":{
                         "type":"string",
                         "description":"A biography of the person."
                      }
                   },
                   "required":[
                      "type",
                      "in",
                      "bio"
                   ]
                }
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_person_bios":{
                   "type":"object",
                   "description":"ID to use in a data_person_bios request to get biography for the person.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_person":{
                   "type":"object",
                   "description":"ID to use in an data_person request to get information about the person.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_person_bios",
                "data_person"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "bios",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_person_relatives [/data_person_relatives?id={id}&in={in}&in2={in2}&in3={in3}&page={page}]
Returns information about a person's relatives.

## GET
This request requires the `data_person_relatives` ID for the person, which is returned in responses to [data_person](/#reference/tv-and-movie-data/dataperson) requests. A `data_person_relatives` ID is the same as the `data_person` ID for the person.

+ Parameters
  + id (required, integer, `6781337`)
    The `data_person_relatives` ID for the person, which is returned in responses to [data_person](/#reference/tv-and-movie-data/dataperson) requests. A `data_person_relatives` ID is the same as the `data_person` ID for the person.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.

+ Response 200 (application/json)
```
    {
       "$schema":"http://json-schema.org/draft-04/schema#",
       "type":"object",
       "title":"person_relatives",
       "description":" Relatives of a person.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the person."
          },
          "in":{
             "type":"string"
          },
          "relatives":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Relative of the person.",
                   "properties":{
                      "d_relativeType":{
                         "type":"string",
                         "description":"Family relationship."
                      },
                      "person":{
                         "type":"object",
                         "description":"Information about the relative.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the person."
                            },
                            "name":{
                               "type":"string",
                               "description":"Name of the person."
                            },
                            "alts":{
                               "type":"object",
                               "properties":{
                                  "first":{
                                     "type":"string",
                                     "description":"First name of the person."
                                  },
                                  "last":{
                                     "type":"string",
                                     "description":"Last name of the person."
                                  }
                               }
                            },
                            "image":{
                               "type":"object",
                               "properties":{
                                  "id":{
                                     "type":"integer",
                                     "description":"Rovi ID for the image."
                                  },
                                  "zoom":{
                                     "type":"string",
                                     "description":"How much of the subject appears in the picture. A value here indicates a closer zoom level may be available from the media_image request. A missing value indicates a std zoom.",
                                     "oneOf":[
                                        {
                                           "enum":[
                                              "head"
                                           ],
                                           "description":"Head or shoulders to top of head."
                                        },
                                        {
                                           "enum":[
                                              "torso"
                                           ],
                                           "description":"Chest or thigh to top of head."
                                        },
                                        {
                                           "enum":[
                                              "body"
                                           ],
                                           "description":"Body fills at least 80% of frame."
                                        },
                                        {
                                           "enum":[
                                              "framed"
                                           ],
                                           "description":"Full body fills 50% to 80% of frame."
                                        },
                                        {
                                           "enum":[
                                              "std"
                                           ],
                                           "description":"Full body fills 50% of frame or less."
                                        }
                                     ]
                                  },
                                  "links":{
                                     "type":"object",
                                     "properties":{
                                        "media_image":{
                                           "type":"object",
                                           "description":"ID to use in a media_image request to get the image file.",
                                           "properties":{
                                              "id":{
                                                 "type":"integer"
                                              }
                                           },
                                           "required":[
                                              "id"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "media_image"
                                     ]
                                  }
                               },
                               "required":[
                                  "id",
                                  "zoom",
                                  "links"
                               ]
                            },
                            "links":{
                               "type":"object",
                               "properties":{
                                  "data_person":{
                                     "type":"object",
                                     "description":"ID to use in a data_person request to get details about the person.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  }
                               },
                               "required":[
                                  "data_person"
                               ]
                            }
                         },
                         "required":[
                            "id",
                            "name",
                            "links"
                         ]
                      },
                      "name":{
                         "type":"string",
                         "description":"Name of the relative."
                      },
                      "note":{
                         "type":"string",
                         "description":"Comments about the relative."
                      }
                   },
                   "required":[
                      "d_relativeType"
                   ]
                }
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_person_relatives":{
                   "type":"object",
                   "description":"ID to use in a data_person_relatives request to get information about relatives of the person.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_person":{
                   "type":"object",
                   "description":"ID to use in a data_person request to get information about the person.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_person_relatives",
                "data_person"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "in",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_person_filmography [/data_person_filmography?id={id}&in={in}&in2={in2}&in3={in3}&page={page}]
Returns information about movies and TV programs a person contributed to.

## GET
This request requires the `data_person_filmography` ID, which is returned in responses to [data_person](/#reference/tv-and-movie-data/dataperson) requests. A `data_person_filmography` ID is the same as the `data_person` ID for the person.

+ Parameters
  + id (required, integer, `6781337`)
    The `data_person_filmography` ID, returned in responses to [data_person](/#reference/tv-and-movie-data/dataperson) requests. A `data_person_filmography` ID is the same as the `data_person` ID for the person.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.

+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"person_filmography",
       "description":"Film credits for a person.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the person."
          },
          "in":{
             "type":"string"
          },
          "filmography":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Film credits for the person.",
                   "properties":{
                      "type":{
                         "type":"string",
                         "description":"Type of credit.",
                         "oneOf":[
                            {
                               "enum":[
                                  "actor"
                               ],
                               "description":"Actor."
                            },
                            {
                               "enum":[
                                  "company"
                               ],
                               "description":"Production company."
                            },
                            {
                               "enum":[
                                  "creator"
                               ],
                               "description":"Creator."
                            },
                            {
                               "enum":[
                                  "director"
                               ],
                               "description":"Director."
                            },
                            {
                               "enum":[
                                  "producer"
                               ],
                               "description":"Producer."
                            },
                            {
                               "enum":[
                                  "studio"
                               ],
                               "description":"Studio."
                            },
                            {
                               "enum":[
                                  "subject"
                               ],
                               "description":"Person who is the subject of the movie or program."
                            },
                            {
                               "enum":[
                                  "writer"
                               ],
                               "description":"Writer."
                            }
                         ]
                      },
                      "credit":{
                         "type":"string",
                         "description":"The credit."
                      },
                      "isCast":{
                         "type":"boolean",
                         "description":"Whether the credit is a cast credit: true or false."
                      },
                      "roles":{
                         "type":"array",
                         "description":"Characters portrayed.",
                         "items":{
                            "type":"string"
                         }
                      },
                      "content":{
                         "type":"object",
                         "description":"Information about the film.",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description":"Rovi ID for the show."
                            },
                            "in":{
                               "type":"string",
                               "description":"Language of the show."
                            },
                            "title":{
                               "type":"string",
                               "description":"Title of the show."
                            },
                            "image":{
                               "type":"object",
                               "description":"Information about the primary image associated with the show.",
                               "properties":{
                                  "id":{
                                     "type":"integer",
                                     "description":"Rovi ID for the image."
                                  },
                                  "zoom":{
                                     "type":"string",
                                     "description":"How much of the subject appears in the picture.",
                                     "oneOf":[
                                        {
                                           "enum":[
                                              "head"
                                           ],
                                           "description":"Head or shoulders to top of head."
                                        },
                                        {
                                           "enum":[
                                              "torso"
                                           ],
                                           "description":"Chest or thigh to top of head."
                                        },
                                        {
                                           "enum":[
                                              "body"
                                           ],
                                           "description":"Body fills at least 80% of frame."
                                        },
                                        {
                                           "enum":[
                                              "framed"
                                           ],
                                           "description":"Full body fills 50% to 80% of frame."
                                        },
                                        {
                                           "enum":[
                                              "std"
                                           ],
                                           "description":"Full body fills 50% of frame or less."
                                        }
                                     ]
                                  },
                                  "links":{
                                     "type":"object",
                                     "properties":{
                                        "media_image":{
                                           "type":"object",
                                           "description":"ID to use in a media_image request to get the image file.",
                                           "properties":{
                                              "id":{
                                                 "type":"integer"
                                              }
                                           },
                                           "required":[
                                              "id"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "media_image"
                                     ]
                                  }
                               },
                               "required":[
                                  "id",
                                  "zoom",
                                  "links"
                               ]
                            },
                            "year":{
                               "type":"integer",
                               "description":"Year in which the show was released."
                            },
                            "type":{
                               "type":"string",
                               "description":"Type of show.",
                               "oneOf":[
                                  {
                                     "enum":[
                                        "movie"
                                     ],
                                     "description":"Movie."
                                  },
                                  {
                                     "enum":[
                                        "season"
                                     ],
                                     "description":"Season in a TV series."
                                  },
                                  {
                                     "enum":[
                                        "episode"
                                     ],
                                     "description":"Episode in a TV series."
                                  },
                                  {
                                     "enum":[
                                        "series"
                                     ],
                                     "description":"TV series."
                                  },
                                  {
                                     "enum":[
                                        "other"
                                     ],
                                     "description":"A program other than a movie or TV series."
                                  }
                               ]
                            },
                            "links":{
                               "type":"object",
                               "properties":{
                                  "data_movie":{
                                     "type":"object",
                                     "description":"ID to use in a data_movie request to get information about the movie.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  },
                                  "data_series":{
                                     "type":"object",
                                     "description":"ID to use in a data_series request to get information about the TV series.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  },
                                  "data_other":{
                                     "type":"object",
                                     "description":"ID to use in a data_other request to get information about the program.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  }
                               }
                            }
                         },
                         "required":[
                            "id",
                            "in",
                            "type",
                            "links"
                         ]
                      }
                   },
                   "required":[
                      "credit",
                      "content"
                   ]
                }
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_person_filmography":{
                   "type":"object",
                   "description":"ID to use in a data_person_filmography request to get film credits for the person.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_person":{
                   "type":"object",
                   "description":"ID to use in a data_person request to get information about the person.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_person_filmography",
                "data_person"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "in",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# Group Awards

This section documents the calls that return data about awards nominated and won by a person, movie, series, or other:
- [data_movie_awards](/#reference/awards/datamovieawards)
- [data_other_awards](/#reference/awards/dataotherawards)
- [data_person_awards](/#reference/awards/datapersonawards)
- [data_series_awards](/#reference/awards/dataseriesawards)
- [data_award](/#reference/awards/dataaward)

*Design Note:* The awards ID required for these calls is the same as the ID for the person, movie, series, or other:
- [data_movie_awards](/#reference/awards/datamovieawards)
- [data_other_awards](/#reference/awards/dataotherawards)
- [data_person_awards](/#reference/awards/datapersonawards)
- [data_series_awards](/#reference/awards/dataseriesawards)

# data_movie_awards [/data_movie_awards?id={id}&in={in}&in2={in2}&in3={in3}&page={page}&by={by}]
Returns awards a movie has been nominated for or won.

## GET
This request requires the `data_movie_awards` ID, which is returned in responses to responses to [data_movie](/#reference/movie/datamovie) requests. A `data_movie_awards` ID is the same as the `data_movie` ID for the movie.

+ Parameters
  + id (required, integer, `914806985`)
    The `data_movie_awards` ID, returned in responses to [data_movie](/#reference/movie/datamovie) requests. A `data_movie_awards` ID is the same as the `data_movie` ID for the movie.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
  + by (optional, string, `category`)
    Response field to sort by. Only top-level response fields are valid, not objects or fields in objects.
      +  For an ascending sort, replace {by} with the field name like this: __category__. For a descending sort, precede the field name with a minus (-) sign like this: __-status__.
      +  To insert a value at the top of the sort, replace {by} with the field and value, like this: __status=won__.
      +  To filter out, precede the value with an exclamation like this: __status=!nominated__.
      +  Combine alpha and numeric sorts in a comma-separated list in left-to-right priority.

+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"movie_awards",
       "description":"Awards and award nominations for a movie.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the movie."
          },
          "awards":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Awards and nominations for the movie.",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"Rovi ID for the award."
                      },
                      "association":{
                         "type":"object",
                         "description":"Information about the organization that presents the award.",
                         "properties":{
                            "name":{
                               "type":"string",
                               "description":"Name of the award."
                            },
                            "links":{
                               "type":"object",
                               "properties":{
                                  "data_association":{
                                     "type":"object",
                                     "description":"ID to use in a data_association request to get information about the organization that presents the award.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  }
                               },
                               "required":[
                                  "data_association"
                               ]
                            }
                         },
                         "required":[
                            "name",
                            "links"
                         ]
                      },
                      "in":{
                         "type":"string"
                      },
                      "category":{
                         "type":"string",
                         "description":"Award category."
                      },
                      "year":{
                         "type":"integer",
                         "description":"Year for which the work is recognized."
                      },
                      "status":{
                         "type":"string",
                         "description":"Status of the award.",
                         "oneOf":[
                            {
                               "enum":[
                                  "nominated"
                               ],
                               "description":"Nominated for award."
                            },
                            {
                               "enum":[
                                  "pending"
                               ],
                               "description":"Award pending."
                            },
                            {
                               "enum":[
                                  "won"
                               ],
                               "description":"Won award."
                            }
                         ]
                      },
                      "recipients":{
                         "type":"array",
                         "items":[
                            {
                               "type":"object",
                               "description":"People and organizations recognized.",
                               "properties":{
                                  "in":{
                                     "type":"string"
                                  },
                                  "contribution":{
                                     "type":"string",
                                     "description":"Contribution that earned the recognition."
                                  },
                                  "person":{
                                     "type":"object",
                                     "description":"Person who earned the recognition.",
                                     "properties":{
                                        "id":{
                                           "type":"integer",
                                           "description":"Rovi ID for the person."
                                        },
                                        "name":{
                                           "type":"string",
                                           "description":"Name of the person."
                                        },
                                        "alts":{
                                           "type":"object",
                                           "properties":{
                                              "first":{
                                                 "type":"string",
                                                 "description":"First name of the person."
                                              },
                                              "last":{
                                                 "type":"string",
                                                 "description":"Last name of the person."
                                              }
                                           }
                                        },
                                        "links":{
                                           "type":"object",
                                           "properties":{
                                              "data_person":{
                                                 "type":"object",
                                                 "description":"ID to use in a data_person request to get details about the person.",
                                                 "properties":{
                                                    "id":{
                                                       "type":"integer"
                                                    }
                                                 },
                                                 "required":[
                                                    "id"
                                                 ]
                                              }
                                           },
                                           "required":[
                                              "data_person"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "id",
                                        "name",
                                        "links"
                                     ]
                                  },
                                  "organization":{
                                     "type":"object",
                                     "description":"Organization that earned the recognition.",
                                     "properties":{
                                        "id":{
                                           "type":"integer",
                                           "description":"Rovi ID for the company that earned the credit."
                                        },
                                        "name":{
                                           "type":"string",
                                           "description":"Name of the company."
                                        },
                                        "links":{
                                           "type":"object",
                                           "properties":{
                                              "data_organization":{
                                                 "type":"object",
                                                 "description":"ID to use in a data_organization request to get details about the company.",
                                                 "properties":{
                                                    "id":{
                                                       "type":"integer"
                                                    }
                                                 },
                                                 "required":[
                                                    "id"
                                                 ]
                                              }
                                           },
                                           "required":[
                                              "data_organization"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "id",
                                        "links"
                                     ]
                                  }
                               },
                               "required":[
                                  "in"
                               ]
                            }
                         ]
                      },
                      "links":{
                         "type":"object",
                         "properties":{
                            "data_award":{
                               "type":"object",
                               "description":"ID to use in a data_award request to get information about the award.",
                               "properties":{
                                  "id":{
                                     "type":"integer"
                                  }
                               },
                               "required":[
                                  "id"
                               ]
                            }
                         },
                         "required":[
                            "data_award"
                         ]
                      }
                   },
                   "required":[
                      "id",
                      "in",
                      "year",
                      "status",
                      "links"
                   ]
                }
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_movie_awards":{
                   "type":"object",
                   "description":"ID to use in a data_movie_awards request to get awards and award nominations for the movie.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_movie":{
                   "type":"object",
                   "description":"ID to use in a data_movie request to get information about the movie.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_movie_awards",
                "data_movie"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_other_awards [/data_other_awards?id={id}&in={in}&in2={in2}&in3={in3}&page={page}&by={by}]
Returns awards that a program (that is not a movie or TV series) has been nominated for or won.

## GET
This request requires the `data_other_awards` ID, which is returned in responses to [data_other](/#reference/other/dataother) requests. A `data_other_awards` ID is the same as the `data_other` ID for the program.

+ Parameters
  + id (required, integer, `914271490`)
    The `data_other_awards` ID, returned in responses to [data_other](/#reference/other/dataother) requests. A `data_other_awards` ID is the same as the `data_other` ID for the program.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
  + by (optional, string, `category`)
    Response field to sort by. Only top-level response fields are valid, not objects or fields in objects.
      +  For an ascending sort, replace {by} with the field name like this: __category__. For a descending sort, precede the field name with a minus (-) sign like this: __-status__.
      +  To insert a value at the top of the sort, replace {by} with the field and value, like this: __status=won__.
      +  To filter out, precede the value with an exclamation like this: __status=!nominated__.
      +  Combine alpha and numeric sorts in a comma-separated list in left-to-right priority.

+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"other_awards",
       "description":"Awards and nominations for a program that is not a movie or TV series.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the program."
          },
          "awards":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Awards and award nominations for the program.",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"Rovi ID for the award."
                      },
                      "association":{
                         "type":"object",
                         "description":"Information about the organization that presents the award.",
                         "properties":{
                            "name":{
                               "type":"string",
                               "description":"Name of the award."
                            },
                            "links":{
                               "type":"object",
                               "properties":{
                                  "data_association":{
                                     "type":"object",
                                     "description":"ID to use in a data_association request to get information about the organization that presents the award.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  }
                               },
                               "required":[
                                  "data_association"
                               ]
                            }
                         },
                         "required":[
                            "name",
                            "links"
                         ]
                      },
                      "in":{
                         "type":"string"
                      },
                      "category":{
                         "type":"string",
                         "description":"Award category."
                      },
                      "year":{
                         "type":"integer",
                         "description":"Year for which the work is recognized."
                      },
                      "status":{
                         "type":"string",
                         "description":"Status of the award.",
                         "oneOf":[
                            {
                               "enum":[
                                  "nominated"
                               ],
                               "description":"Nominated for award."
                            },
                            {
                               "enum":[
                                  "pending"
                               ],
                               "description":"Award pending."
                            },
                            {
                               "enum":[
                                  "won"
                               ],
                               "description":"Won award."
                            }
                         ]
                      },
                      "recipients":{
                         "type":"array",
                         "items":[
                            {
                               "type":"object",
                               "description":"People and organizations recognized.",
                               "properties":{
                                  "in":{
                                     "type":"string"
                                  },
                                  "contribution":{
                                     "type":"string",
                                     "description":"Contribution that earned the recognition."
                                  },
                                  "person":{
                                     "type":"object",
                                     "description":"Person who earned the recognition.",
                                     "properties":{
                                        "id":{
                                           "type":"integer",
                                           "description":"Rovi ID for the person."
                                        },
                                        "name":{
                                           "type":"string",
                                           "description":"Name of the person."
                                        },
                                        "alts":{
                                           "type":"object",
                                           "properties":{
                                              "first":{
                                                 "type":"string",
                                                 "description":"First name of the person."
                                              },
                                              "last":{
                                                 "type":"string",
                                                 "description":"Last name of the person."
                                              }
                                           }
                                        },
                                        "links":{
                                           "type":"object",
                                           "properties":{
                                              "data_person":{
                                                 "type":"object",
                                                 "description":"ID to use in a data_person request to get details about the person.",
                                                 "properties":{
                                                    "id":{
                                                       "type":"integer"
                                                    }
                                                 },
                                                 "required":[
                                                    "id"
                                                 ]
                                              }
                                           },
                                           "required":[
                                              "data_person"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "id",
                                        "name",
                                        "links"
                                     ]
                                  },
                                  "organization":{
                                     "type":"object",
                                     "description":"Organization that earned the recognition.",
                                     "properties":{
                                        "id":{
                                           "type":"integer",
                                           "description":"Rovi ID for the company that earned the credit."
                                        },
                                        "name":{
                                           "type":"string",
                                           "description":"Name of the company."
                                        },
                                        "links":{
                                           "type":"object",
                                           "properties":{
                                              "data_organization":{
                                                 "type":"object",
                                                 "description":"ID to use in a data_organization request to get details about the company.",
                                                 "properties":{
                                                    "id":{
                                                       "type":"integer"
                                                    }
                                                 },
                                                 "required":[
                                                    "id"
                                                 ]
                                              }
                                           },
                                           "required":[
                                              "data_organization"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "id",
                                        "links"
                                     ]
                                  }
                               },
                               "required":[
                                  "in"
                               ]
                            }
                         ]
                      },
                      "links":{
                         "type":"object",
                         "properties":{
                            "data_award":{
                               "type":"object",
                               "description":"ID to use in a data_award request to get information about the award.",
                               "properties":{
                                  "id":{
                                     "type":"integer"
                                  }
                               },
                               "required":[
                                  "id"
                               ]
                            }
                         },
                         "required":[
                            "data_award"
                         ]
                      }
                   },
                   "required":[
                      "id",
                      "in",
                      "year",
                      "status",
                      "links"
                   ]
                }
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_other_awards":{
                   "type":"object",
                   "description":"ID to use in a data_other_awards request to get awards and award nominations for the program.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_other":{
                   "type":"object",
                   "description":"ID to use in a data_other request to get information about the program.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_other_awards",
                "data_other"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_person_awards [/data_person_awards?id={id}&in={in}&in2={in2}&in3={in3}&page={page}&by={by}]
Returns awards a person has been nominated for or won.

## GET
This request requires the `data_person_awards` ID, which is returned in responses to responses to [data_person](/#reference/tv-and-movie-data/dataperson) requests. A `data_person_awards` ID is the same as the `data_person` ID for the person.

+ Parameters
  + id (required, integer, `6781337`)
    The `data_person_awards` ID, returned in responses to [data_person](/#reference/tv-and-movie-data/dataperson) requests. A `data_person_awards` ID is the same as the `data_person` ID for the person.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
  + by (optional, string, `-year`)
    Response field to sort by. Only top-level response fields are valid, not objects or fields in objects.
      +  For an ascending sort, replace {by} with the field name like this: __category__. For a descending sort, precede the field name with a minus (-) sign like this: __-year__.
      +  To insert a value at the top of the sort, replace {by} with the field and value, like this: __status=won__.
      +  To filter out, precede the value with an exclamation like this: __status=!nominated__.
      +  Combine alpha and numeric sorts in a comma-separated list in left-to-right priority.

+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"person_awards",
       "description":"Awards and award nominations for a person.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the person."
          },
          "awards":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Awards and award nominations for the person.",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"Rovi ID for the award."
                      },
                      "association":{
                         "type":"object",
                         "description":"Information about the organization that presents the award.",
                         "properties":{
                            "name":{
                               "type":"string",
                               "description":"Name of the award."
                            },
                            "links":{
                               "type":"object",
                               "properties":{
                                  "data_association":{
                                     "type":"object",
                                     "description":"ID to use in a data_association request to get information about the organization that presents the award.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  }
                               },
                               "required":[
                                  "data_association"
                               ]
                            }
                         },
                         "required":[
                            "name",
                            "links"
                         ]
                      },
                      "in":{
                         "type":"string"
                      },
                      "category":{
                         "type":"string",
                         "description":"Award category."
                      },
                      "year":{
                         "type":"integer",
                         "description":"Year for which the work is recognized."
                      },
                      "status":{
                         "type":"string",
                         "description":"Status of the award.",
                         "oneOf":[
                            {
                               "enum":[
                                  "nominated"
                               ],
                               "description":"Nominated for award."
                            },
                            {
                               "enum":[
                                  "pending"
                               ],
                               "description":"Award pending."
                            },
                            {
                               "enum":[
                                  "won"
                               ],
                               "description":"Won award."
                            }
                         ]
                      },
                      "contribution":{
                         "type":"string",
                         "description":"Contribution that earned the recognition."
                      },
                      "content":{
                         "type":"array",
                         "items":[
                            {
                               "type":"object",
                               "description":"Information about the work that earned the recognition.",
                               "properties":{
                                  "id":{
                                     "type":"integer",
                                     "description":"Rovi ID for the work that earned the recognition."
                                  },
                                  "type":{
                                     "type":"string",
                                     "description":"Type of program.",
                                     "oneOf":[
                                        {
                                           "enum":[
                                              "movie"
                                           ],
                                           "description":"Movie."
                                        },
                                        {
                                           "enum":[
                                              "season"
                                           ],
                                           "description":"Season in a TV series."
                                        },
                                        {
                                           "enum":[
                                              "episode"
                                           ],
                                           "description":"Episode in a TV series."
                                        },
                                        {
                                           "enum":[
                                              "series"
                                           ],
                                           "description":"TV series."
                                        },
                                        {
                                           "enum":[
                                              "other"
                                           ],
                                           "description":"A program other than a movie or TV series."
                                        }
                                     ]
                                  },
                                  "in":{
                                     "type":"string",
                                     "description":"Language of the work that earned the recognition."
                                  },
                                  "title":{
                                     "type":"string",
                                     "description":"Title of the work that earned the recognition."
                                  },
                                  "image":{
                                     "type":"object",
                                     "description":"Information about the primary image associated with the work.",
                                     "properties":{
                                        "id":{
                                           "type":"integer",
                                           "description":"Rovi ID for the image."
                                        },
                                        "zoom":{
                                           "type":"string",
                                           "description":"How much of the subject appears in the picture.",
                                           "oneOf":[
                                              {
                                                 "enum":[
                                                    "head"
                                                 ],
                                                 "description":"Head or shoulders to top of head."
                                              },
                                              {
                                                 "enum":[
                                                    "torso"
                                                 ],
                                                 "description":"Chest or thigh to top of head."
                                              },
                                              {
                                                 "enum":[
                                                    "body"
                                                 ],
                                                 "description":"Body fills at least 80% of frame."
                                              },
                                              {
                                                 "enum":[
                                                    "framed"
                                                 ],
                                                 "description":"Full body fills 50% to 80% of frame."
                                              },
                                              {
                                                 "enum":[
                                                    "std"
                                                 ],
                                                 "description":"Full body fills 50% of frame or less."
                                              }
                                           ]
                                        },
                                        "links":{
                                           "type":"object",
                                           "properties":{
                                              "media_image":{
                                                 "type":"object",
                                                 "description":"ID to use in a media_image request to get the image file.",
                                                 "properties":{
                                                    "id":{
                                                       "type":"integer"
                                                    }
                                                 },
                                                 "required":[
                                                    "id"
                                                 ]
                                              }
                                           },
                                           "required":[
                                              "media_image"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "id",
                                        "zoom",
                                        "links"
                                     ]
                                  },
                                  "links":{
                                     "type":"object",
                                     "properties":{
                                        "data_content":{
                                           "type":"object",
                                           "description":"ID to use in a data_content request to get information about the movie or program.",
                                           "properties":{
                                              "id":{
                                                 "type":"integer"
                                              }
                                           },
                                           "required":[
                                              "id"
                                           ]
                                        },
                                        "data_episode":{
                                           "type":"object",
                                           "description":"ID to use in a data_episode request to get information about the episode.",
                                           "properties":{
                                              "id":{
                                                 "type":"integer"
                                              }
                                           },
                                           "required":[
                                              "id"
                                           ]
                                        },
                                        "data_movie":{
                                           "type":"object",
                                           "description":"ID to use in a data_movie request to get information about the movie.",
                                           "properties":{
                                              "id":{
                                                 "type":"integer"
                                              }
                                           },
                                           "required":[
                                              "id"
                                           ]
                                        },
                                        "data_other":{
                                           "type":"object",
                                           "description":"ID to use in a data_other request to get information about the program.",
                                           "properties":{
                                              "id":{
                                                 "type":"integer"
                                              }
                                           },
                                           "required":[
                                              "id"
                                           ]
                                        },
                                        "data_series":{
                                           "type":"object",
                                           "description":"ID to use in a data_series request to get information about the TV series.",
                                           "properties":{
                                              "id":{
                                                 "type":"integer"
                                              }
                                           },
                                           "required":[
                                              "id"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "data_content"
                                     ]
                                  }
                               },
                               "required":[
                                  "id",
                                  "type",
                                  "in",
                                  "links"
                               ]
                            }
                         ]
                      },
                      "links":{
                         "type":"object",
                         "properties":{
                            "data_award":{
                               "type":"object",
                               "description":"ID to use in a data_award request to get information about the award.",
                               "properties":{
                                  "id":{
                                     "type":"integer"
                                  }
                               },
                               "required":[
                                  "id"
                               ]
                            }
                         },
                         "required":[
                            "data_award"
                         ]
                      }
                   },
                   "required":[
                      "id",
                      "in",
                      "year",
                      "status",
                      "links"
                   ]
                }
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_person_awards":{
                   "type":"object",
                   "description":"ID to use in a data_person_awards request to get awards for the person.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_person":{
                   "type":"object",
                   "description":"ID to use in a data_person request to get information about the person.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_person_awards",
                "data_person"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_series_awards [/data_series_awards?id={id}&in={in}&in2={in2}&in3={in3}&page={page}&by={by}]
Returns awards a TV series has been nominated for or won.

## GET
This request requires the `data_series_awards` ID, which is returned in responses to responses to [data_series](/#reference/series/dataseries) requests. A `data_series_awards` ID is the same as the `data_series` ID for the series.

+ Parameters
  + id (required, integer, `915363654`)
    The `data_series_awards` ID, returned in responses to [data_series](/#reference/series/dataseries) requests. A `data_series_awards` ID is the same as the `data_series` ID for the series.
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.
  + page (optional, integer, `1`)
    Page number to return. Default is 1, which returns the first page in a list of items. A page number greater than the number of available pages returns status code 404.
  + by (optional, string, `category`)
    Response field to sort by. Only top-level response fields are valid, not objects or fields in objects.
      +  For an ascending sort, replace {by} with the field name like this: __category__. For a descending sort, precede the field name with a minus (-) sign like this: __-status__.
      +  To insert a value at the top of the sort, replace {by} with the field and value, like this: __status=won__.
      +  To filter out, precede the value with an exclamation like this: __status=!nominated__.
      +  Combine alpha and numeric sorts in a comma-separated list in left-to-right priority.

+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"series_awards",
       "description":"Awards and award nominations for a TV series.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the series."
          },
          "awards":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Awards and award nominations for the TV series.",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description":"Rovi ID for the award."
                      },
                      "association":{
                         "type":"object",
                         "description":"Information about the organization that presents the award.",
                         "properties":{
                            "name":{
                               "type":"string",
                               "description":"Name of the award."
                            },
                            "links":{
                               "type":"object",
                               "properties":{
                                  "data_association":{
                                     "type":"object",
                                     "description":"ID to use in a data_association request to get information about the organization that presents the award.",
                                     "properties":{
                                        "id":{
                                           "type":"integer"
                                        }
                                     },
                                     "required":[
                                        "id"
                                     ]
                                  }
                               },
                               "required":[
                                  "data_association"
                               ]
                            }
                         },
                         "required":[
                            "name",
                            "links"
                         ]
                      },
                      "in":{
                         "type":"string"
                      },
                      "category":{
                         "type":"string",
                         "description":"Award category."
                      },
                      "year":{
                         "type":"integer",
                         "description":"Year for which the work is recognized."
                      },
                      "status":{
                         "type":"string",
                         "description":"Status of the award.",
                         "oneOf":[
                            {
                               "enum":[
                                  "nominated"
                               ],
                               "description":"Nominated for award."
                            },
                            {
                               "enum":[
                                  "pending"
                               ],
                               "description":"Award pending."
                            },
                            {
                               "enum":[
                                  "won"
                               ],
                               "description":"Won award."
                            }
                         ]
                      },
                      "recipients":{
                         "type":"array",
                         "items":[
                            {
                               "type":"object",
                               "description":"People and organizations recognized.",
                               "properties":{
                                  "in":{
                                     "type":"string"
                                  },
                                  "contribution":{
                                     "type":"string",
                                     "description":"Contribution that earned the recognition."
                                  },
                                  "person":{
                                     "type":"object",
                                     "description":"Person who earned the recognition.",
                                     "properties":{
                                        "id":{
                                           "type":"integer",
                                           "description":"Rovi ID for the person."
                                        },
                                        "name":{
                                           "type":"string",
                                           "description":"Name of the person."
                                        },
                                        "alts":{
                                           "type":"object",
                                           "properties":{
                                              "first":{
                                                 "type":"string",
                                                 "description":"First name of the person."
                                              },
                                              "last":{
                                                 "type":"string",
                                                 "description":"Last name of the person."
                                              }
                                           }
                                        },
                                        "links":{
                                           "type":"object",
                                           "properties":{
                                              "data_person":{
                                                 "type":"object",
                                                 "description":"ID to use in a data_person request to get details about the person.",
                                                 "properties":{
                                                    "id":{
                                                       "type":"integer"
                                                    }
                                                 },
                                                 "required":[
                                                    "id"
                                                 ]
                                              }
                                           },
                                           "required":[
                                              "data_person"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "id",
                                        "name",
                                        "links"
                                     ]
                                  },
                                  "organization":{
                                     "type":"object",
                                     "description":"Organization that earned the recognition.",
                                     "properties":{
                                        "id":{
                                           "type":"integer",
                                           "description":"Rovi ID for the company that earned the credit."
                                        },
                                        "name":{
                                           "type":"string",
                                           "description":"Name of the company."
                                        },
                                        "links":{
                                           "type":"object",
                                           "properties":{
                                              "data_organization":{
                                                 "type":"object",
                                                 "description":"ID to use in a data_organization request to get details about the company.",
                                                 "properties":{
                                                    "id":{
                                                       "type":"integer"
                                                    }
                                                 },
                                                 "required":[
                                                    "id"
                                                 ]
                                              }
                                           },
                                           "required":[
                                              "data_organization"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "id",
                                        "links"
                                     ]
                                  }
                               },
                               "required":[
                                  "in"
                               ]
                            }
                         ]
                      },
                      "links":{
                         "type":"object",
                         "properties":{
                            "data_award":{
                               "type":"object",
                               "description":"ID to use in a data_award request to get information about the award.",
                               "properties":{
                                  "id":{
                                     "type":"integer"
                                  }
                               },
                               "required":[
                                  "id"
                               ]
                            }
                         },
                         "required":[
                            "data_award"
                         ]
                      }
                   },
                   "required":[
                      "id",
                      "in",
                      "year",
                      "status",
                      "links"
                   ]
                }
             ]
          },
          "links":{
             "type":"object",
             "properties":{
                "data_series_awards":{
                   "type":"object",
                   "description":"ID to use in a data_series_awards request to get awards and award nominations for the series.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                },
                "data_series":{
                   "type":"object",
                   "description":"ID to use in a data_series request to get information about the series.",
                   "properties":{
                      "id":{
                         "type":"integer"
                      }
                   },
                   "required":[
                      "id"
                   ]
                }
             },
             "required":[
                "data_series_awards",
                "data_series"
             ]
          },
          "page":{
             "type":"integer",
             "description":"Page number of the response."
          },
          "size":{
             "type":"integer",
             "description":"Number of elements in this page."
          },
          "total":{
             "type":"integer",
             "description":"Total number of elements available."
          }
       },
       "required":[
          "id",
          "links"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# data_award [/data_award?id={id}&in={in}&in2={in2}&in3={in3}]
Returns information about an award.

## GET
This request requires the `data_award` ID, which is returned in responses to the following requests:
+  [data_series_awards](/#reference/awards/dataseriesawards)
+  [data_movie_awards](/#reference/awards/datamovieawards)
+  [data_other_awards](/#reference/awards/dataotherawards)
+  [data_person_awards](/#reference/awards/datapersonawards)

+ Parameters
  + id (required, integer, `67899531`)
    The `data_award` ID, returned in responses to the following requests:
      +  [data_series_awards](/#reference/awards/dataseriesawards)
      +  [data_movie_awards](/#reference/awards/datamovieawards)
      +  [data_other_awards](/#reference/awards/dataotherawards)
      +  [data_person_awards](/#reference/awards/datapersonawards)
      
  + in (optional, string, `en-US`)
    Language and country of the response data. Replace {in} with an ISO 639 language and ISO 3166-1 country code like this: __en-US__. If data is unavailable for that language and country, we try your {in2} and then {in3} choices. 
    <br> &emsp; To specify language only, replace country with an asterisk like this: __en-\*__. To specify the default, the language and country associated with the content, use just an asterisk: __\*__. 
    <br> &emsp; If you specify only language-and-country choices and those choices are unavailable, we will fall back to 1) just the language, 2) the language in another region, or 3) the default, in that order. To prevent the fallback and return a 404 error if your choices are unavailable, specify __!\*__ (exclamation and asterisk) in {in2} or {in3}. For a list of languages and countries with strong data support, see "Supported Locales" in the _Getting Started_ section.
  + in2 (optional, string, `en-*`)
    Second choice for language or localized content, specified in the same way: __fr-CA__ or __fr-\*__ or __\*__. To limit results instead to the first choice and return a 404 error for unavailable content, replace {in2} with __!\*__ (exclamation and asterisk).
  + in3 (optional, string, `*`)
    Third choice for language or localized content. If there is still no content match, we follow the standard fallback rules. To limit results to the previous choices, replace {in3} with __!\*__.

+ Response 200 (application/json)
```
    {
       "$schema":"http:\/\/json-schema.org\/draft-04\/schema#",
       "type":"object",
       "title":"award",
       "description":"Information about an award.",
       "properties":{
          "id":{
             "type":"integer",
             "description":"Rovi ID for the award."
          },
          "in":{
             "type":"string"
          },
          "category":{
             "type":"string",
             "description":"Award category."
          },
          "association":{
             "type":"object",
             "description":"Information about the organization that presents the award.",
             "properties":{
                "name":{
                   "type":"string",
                   "description":"Name of the award."
                },
                "ref":{
                   "type":"object",
                   "properties":{
                      "id":{
                         "type":"integer",
                         "description": "ID to use to get information about this resource."
                      },
                      "me":{
                         "type":"string",
                         "description": "URI template to use to get information about this resource."
                      },
                      "parent":{
                         "type":"string",
                         "description": "URI template for information about the parent resource."
                      },
                      "children":{
                         "type":"array",
                         "description": "URI templates for child resources."
                      }
                   },
                   "required":[
                      "id",
                      "me"
                   ]
                }
             },
             "required":[
                "name",
                "ref"
             ]
          },
          "year":{
             "type":"integer",
             "description":"Year for which the work is recognized."
          },
          "mediums":{
             "type":"array",
             "description":"Media category of the award.",
             "items":{
                "type":"string",
                "oneOf":[
                   {
                      "enum":[
                         "film"
                      ],
                      "description":"Film."
                   },
                   {
                      "enum":[
                         "music"
                      ],
                      "description":"Music."
                   },
                   {
                      "enum":[
                         "radio"
                      ],
                      "description":"Radio."
                   },
                   {
                      "enum":[
                         "sports"
                      ],
                      "description":"Sports."
                   },
                   {
                      "enum":[
                         "theater"
                      ],
                      "description":"Theater."
                   },
                   {
                      "enum":[
                         "tv"
                      ],
                      "description":"Television."
                   },
                   {
                      "enum":[
                         "none"
                      ],
                      "description":"None or unknown."
                   }
                ]
             }
          },
          "winners":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Award winners.",
                   "properties":{
                      "in":{
                         "type":"string"
                      },
                      "content":{
                         "type":"array",
                         "items":[
                            {
                               "type":"object",
                               "description":"Information about the work that earned the recognition.",
                               "properties":{
                                  "id":{
                                     "type":"integer",
                                     "description":"Rovi ID for the work that earned the recognition."
                                  },
                                  "type":{
                                     "type":"string",
                                     "description":"Type of program.",
                                     "oneOf":[
                                        {
                                           "enum":[
                                              "movie"
                                           ],
                                           "description":"Movie."
                                        },
                                        {
                                           "enum":[
                                              "season"
                                           ],
                                           "description":"Season in a TV series."
                                        },
                                        {
                                           "enum":[
                                              "episode"
                                           ],
                                           "description":"Episode in a TV series."
                                        },
                                        {
                                           "enum":[
                                              "series"
                                           ],
                                           "description":"TV series."
                                        },
                                        {
                                           "enum":[
                                              "other"
                                           ],
                                           "description":"A program other than a movie or TV series."
                                        }
                                     ]
                                  },
                                  "in":{
                                     "type":"string",
                                     "description":"Language of the work that earned the recognition."
                                  },
                                  "market":{
                                     "type":"array",
                                     "items":{
                                        "type":"string"
                                     }
                                  },
                                  "title":{
                                     "type":"string",
                                     "description":"Title of the show."
                                  },
                                  "alts":{
                                     "type":"object",
                                     "description":"Alternate titles for the season.",
                                     "properties":{
                                        "short15":{
                                           "type":"string",
                                           "description":"Title with up to 15 characters for a grid cell. Creative abbreviations used as needed."
                                        },
                                        "short30":{
                                           "type":"string",
                                           "description":"Title with up to 30 characters. Creative abbreviations used as needed."
                                        },
                                        "short8":{
                                           "type":"string",
                                           "description":"Title with up to 8 characters for a grid cell. Creative abbreviations used as needed."
                                        },
                                        "short50":{
                                           "type":"string",
                                           "description":"Title with up to 50 characters. Creative abbreviations used as needed."
                                        },
                                        "alias":{
                                           "type":"string",
                                           "description":"Alternate title by which a show has been distributed."
                                        },
                                        "alias2":{
                                           "type":"string",
                                           "description":"Another alternate title by which a show has been distributed."
                                        },
                                        "alias3":{
                                           "type":"string",
                                           "description":"Another alternate title by which a show has been distributed."
                                        },
                                        "alias4":{
                                           "type":"string",
                                           "description":"Another alternate title by which a show has been distributed."
                                        },
                                        "subtitle":{
                                           "type":"string",
                                           "description":"Subtitle of the show."
                                        },
                                        "ref":{
                                           "type":"object",
                                           "properties":{
                                              "id":{
                                                 "type":"integer",
                                                 "description": "ID to use to get information about this resource."
                                              },
                                              "me":{
                                                 "type":"string",
                                                 "description": "URI template to use to get information about this resource."
                                              },
                                              "parent":{
                                                 "type":"string",
                                                 "description": "URI template for information about the parent resource."
                                              },
                                              "children":{
                                                 "type":"array",
                                                 "description": "URI templates for child resources."
                                              }
                                           },
                                           "required":[
                                              "id",
                                              "me"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "ref"
                                     ]
                                  },
                                  "image":{
                                     "type":"object",
                                     "description":"Information about the primary image associated with the show.",
                                     "properties":{
                                        "id":{
                                           "type":"integer",
                                           "description":"Rovi ID for the image."
                                        },
                                        "zoom":{
                                           "type":"string",
                                           "description":"How much of the subject appears in the picture. A value here indicates a closer zoom level may be available from the media_image request. A missing value indicates a std zoom.",
                                           "oneOf":[
                                              {
                                                 "enum":[
                                                    "head"
                                                 ],
                                                 "description":"Head or shoulders to top of head."
                                              },
                                              {
                                                 "enum":[
                                                    "torso"
                                                 ],
                                                 "description":"Chest or thigh to top of head."
                                              },
                                              {
                                                 "enum":[
                                                    "body"
                                                 ],
                                                 "description":"Body fills at least 80% of frame."
                                              },
                                              {
                                                 "enum":[
                                                    "framed"
                                                 ],
                                                 "description":"Full body fills 50% to 80% of frame."
                                              },
                                              {
                                                 "enum":[
                                                    "std"
                                                 ],
                                                 "description":"Full body fills 50% of frame or less."
                                              }
                                           ]
                                        },
                                        "type":{
                                           "type":"string",
                                           "description":"Type of image.",
                                           "oneOf":[
                                              {
                                                 "enum":[
                                                    "album"
                                                 ],
                                                 "description":"Album cover front."
                                              },
                                              {
                                                 "enum":[
                                                    "album2"
                                                 ],
                                                 "description":"Album cover back."
                                              },
                                              {
                                                 "enum":[
                                                    "box"
                                                 ],
                                                 "description":"VHS box cover."
                                              },
                                              {
                                                 "enum":[
                                                    "celebrity"
                                                 ],
                                                 "description":"Celebrity."
                                              },
                                              {
                                                 "enum":[
                                                    "dvd"
                                                 ],
                                                 "description":"DVD box cover."
                                              },
                                              {
                                                 "enum":[
                                                    "gallery"
                                                 ],
                                                 "description":"Key cast, no set."
                                              },
                                              {
                                                 "enum":[
                                                    "gallery2"
                                                 ],
                                                 "description":"Supporting cast, no set."
                                              },
                                              {
                                                 "enum":[
                                                    "generic"
                                                 ],
                                                 "description":"Placeholder iconography or photograph."
                                              },
                                              {
                                                 "enum":[
                                                    "group"
                                                 ],
                                                 "description":"Over four cast members."
                                              },
                                              {
                                                 "enum":[
                                                    "head"
                                                 ],
                                                 "description":"One key cast member."
                                              },
                                              {
                                                 "enum":[
                                                    "head2"
                                                 ],
                                                 "description":"One supporting cast member."
                                              },
                                              {
                                                 "enum":[
                                                    "jersey"
                                                 ],
                                                 "description":"Sports jersey."
                                              },
                                              {
                                                 "enum":[
                                                    "key"
                                                 ],
                                                 "description":"Key cast or show image."
                                              },
                                              {
                                                 "enum":[
                                                    "league"
                                                 ],
                                                 "description":"Sports league logo."
                                              },
                                              {
                                                 "enum":[
                                                    "olympic"
                                                 ],
                                                 "description":"Olympics image."
                                              },
                                              {
                                                 "enum":[
                                                    "poster"
                                                 ],
                                                 "description":"Poster art."
                                              },
                                              {
                                                 "enum":[
                                                    "prod"
                                                 ],
                                                 "description":"Key cast on set."
                                              },
                                              {
                                                 "enum":[
                                                    "prod2"
                                                 ],
                                                 "description":"Supporting cast on set."
                                              },
                                              {
                                                 "enum":[
                                                    "program"
                                                 ],
                                                 "description":"Key cast from program."
                                              },
                                              {
                                                 "enum":[
                                                    "program2"
                                                 ],
                                                 "description":"Supporting cast from program."
                                              },
                                              {
                                                 "enum":[
                                                    "set"
                                                 ],
                                                 "description":"DVD box set cover."
                                              },
                                              {
                                                 "enum":[
                                                    "showcard"
                                                 ],
                                                 "description":"TV series poster."
                                              },
                                              {
                                                 "enum":[
                                                    "team"
                                                 ],
                                                 "description":"Sports team logo."
                                              },
                                              {
                                                 "enum":[
                                                    "trailer"
                                                 ],
                                                 "description":"Image for trailer, 16:9."
                                              },
                                              {
                                                 "enum":[
                                                    "video"
                                                 ],
                                                 "description":"Video box cover."
                                              }
                                           ]
                                        },
                                        "genres":{
                                           "type":"array",
                                           "items":{
                                              "type":"integer"
                                           }
                                        },
                                        "ref":{
                                           "type":"object",
                                           "properties":{
                                              "id":{
                                                 "type":"integer",
                                                 "description": "ID to use to get information about this resource."
                                              },
                                              "me":{
                                                 "type":"string",
                                                 "description": "URI template to use to get information about this resource."
                                              },
                                              "parent":{
                                                 "type":"string",
                                                 "description": "URI template for information about the parent resource."
                                              },
                                              "children":{
                                                 "type":"array",
                                                 "description": "URI templates for child resources."
                                              }
                                           },
                                           "required":[
                                              "id",
                                              "me"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "ref"
                                     ]
                                  },
                                  "ref":{
                                     "type":"object",
                                     "properties":{
                                        "id":{
                                           "type":"integer",
                                           "description": "ID to use to get information about this resource."
                                        },
                                        "me":{
                                           "type":"string",
                                           "description": "URI template to use to get information about this resource."
                                        },
                                        "parent":{
                                           "type":"string",
                                           "description": "URI template for information about the parent resource."
                                        },
                                        "children":{
                                           "type":"array",
                                           "description": "URI templates for child resources."
                                        }
                                     },
                                     "required":[
                                        "id",
                                        "me"
                                     ]
                                  }
                               },
                               "required":[
                                  "id",
                                  "type",
                                  "in",
                                  "title",
                                  "ref"
                               ]
                            }
                         ]
                      },
                      "recipients":{
                         "type":"array",
                         "items":[
                            {
                               "type":"object",
                               "description":"Information about the recipients that earned the recognition.",
                               "properties":{
                                  "in":{
                                     "type":"string"
                                  },
                                  "contribution":{
                                     "type":"string",
                                     "description":"Contribution that earned the recognition."
                                  },
                                  "person":{
                                     "type":"object",
                                     "description":"Person who earned the recognition.",
                                     "properties":{
                                        "id":{
                                           "type":"integer",
                                           "description":"Rovi ID for the person."
                                        },
                                        "name":{
                                           "type":"string",
                                           "description":"Name of the person."
                                        },
                                        "alts":{
                                           "type":"object",
                                           "description":"Other names the person is known by.",
                                           "properties":{
                                              "first":{
                                                 "type":"string",
                                                 "description":"First name of the person."
                                              },
                                              "last":{
                                                 "type":"string",
                                                 "description":"Last name of the person."
                                              },
                                              "ref":{
                                                 "type":"object",
                                                 "properties":{
                                                    "id":{
                                                       "type":"integer",
                                                       "description": "ID to use to get information about this resource."
                                                    },
                                                    "me":{
                                                       "type":"string",
                                                       "description": "URI template to use to get information about this resource."
                                                    },
                                                    "parent":{
                                                       "type":"string",
                                                       "description": "URI template for information about the parent resource."
                                                    },
                                                    "children":{
                                                       "type":"array",
                                                       "description": "URI templates for child resources."
                                                    }
                                                 },
                                                 "required":[
                                                    "id",
                                                    "me"
                                                 ]
                                              }
                                           },
                                           "required":[
                                              "ref"
                                           ]
                                        },
                                        "image":{
                                           "type":"array",
                                           "items":[
                                              {
                                                 "type":"object",
                                                 "description":"Primary image associated with the person.",
                                                 "properties":{
                                                    "id":{
                                                       "type":"integer",
                                                       "description":"Rovi ID for the image."
                                                    },
                                                    "zoom":{
                                                       "type":"string",
                                                       "description":"How much of the subject appears in the picture. A value here indicates a closer zoom level may be available from the media_image request. A missing value indicates a std zoom.",
                                                       "oneOf":[
                                                          {
                                                             "enum":[
                                                                "head"
                                                             ],
                                                             "description":"Head or shoulders to top of head."
                                                          },
                                                          {
                                                             "enum":[
                                                                "torso"
                                                             ],
                                                             "description":"Chest or thigh to top of head."
                                                          },
                                                          {
                                                             "enum":[
                                                                "body"
                                                             ],
                                                             "description":"Body fills at least 80% of frame."
                                                          },
                                                          {
                                                             "enum":[
                                                                "framed"
                                                             ],
                                                             "description":"Full body fills 50% to 80% of frame."
                                                          },
                                                          {
                                                             "enum":[
                                                                "std"
                                                             ],
                                                             "description":"Full body fills 50% of frame or less."
                                                          }
                                                       ]
                                                    },
                                                    "type":{
                                                       "type":"string",
                                                       "description":"Type of image.",
                                                       "oneOf":[
                                                          {
                                                             "enum":[
                                                                "album"
                                                             ],
                                                             "description":"Album cover front."
                                                          },
                                                          {
                                                             "enum":[
                                                                "album2"
                                                             ],
                                                             "description":"Album cover back."
                                                          },
                                                          {
                                                             "enum":[
                                                                "box"
                                                             ],
                                                             "description":"VHS box cover."
                                                          },
                                                          {
                                                             "enum":[
                                                                "celebrity"
                                                             ],
                                                             "description":"Celebrity."
                                                          },
                                                          {
                                                             "enum":[
                                                                "dvd"
                                                             ],
                                                             "description":"DVD box cover."
                                                          },
                                                          {
                                                             "enum":[
                                                                "gallery"
                                                             ],
                                                             "description":"Key cast, no set."
                                                          },
                                                          {
                                                             "enum":[
                                                                "gallery2"
                                                             ],
                                                             "description":"Supporting cast, no set."
                                                          },
                                                          {
                                                             "enum":[
                                                                "generic"
                                                             ],
                                                             "description":"Placeholder iconography or photograph."
                                                          },
                                                          {
                                                             "enum":[
                                                                "group"
                                                             ],
                                                             "description":"Over four cast members."
                                                          },
                                                          {
                                                             "enum":[
                                                                "head"
                                                             ],
                                                             "description":"One key cast member."
                                                          },
                                                          {
                                                             "enum":[
                                                                "head2"
                                                             ],
                                                             "description":"One supporting cast member."
                                                          },
                                                          {
                                                             "enum":[
                                                                "jersey"
                                                             ],
                                                             "description":"Sports jersey."
                                                          },
                                                          {
                                                             "enum":[
                                                                "key"
                                                             ],
                                                             "description":"Key cast or show image."
                                                          },
                                                          {
                                                             "enum":[
                                                                "league"
                                                             ],
                                                             "description":"Sports league logo."
                                                          },
                                                          {
                                                             "enum":[
                                                                "olympic"
                                                             ],
                                                             "description":"Olympics image."
                                                          },
                                                          {
                                                             "enum":[
                                                                "poster"
                                                             ],
                                                             "description":"Poster art."
                                                          },
                                                          {
                                                             "enum":[
                                                                "prod"
                                                             ],
                                                             "description":"Key cast on set."
                                                          },
                                                          {
                                                             "enum":[
                                                                "prod2"
                                                             ],
                                                             "description":"Supporting cast on set."
                                                          },
                                                          {
                                                             "enum":[
                                                                "program"
                                                             ],
                                                             "description":"Key cast from program."
                                                          },
                                                          {
                                                             "enum":[
                                                                "program2"
                                                             ],
                                                             "description":"Supporting cast from program."
                                                          },
                                                          {
                                                             "enum":[
                                                                "set"
                                                             ],
                                                             "description":"DVD box set cover."
                                                          },
                                                          {
                                                             "enum":[
                                                                "showcard"
                                                             ],
                                                             "description":"TV series poster."
                                                          },
                                                          {
                                                             "enum":[
                                                                "team"
                                                             ],
                                                             "description":"Sports team logo."
                                                          },
                                                          {
                                                             "enum":[
                                                                "trailer"
                                                             ],
                                                             "description":"Image for trailer, 16:9."
                                                          },
                                                          {
                                                             "enum":[
                                                                "video"
                                                             ],
                                                             "description":"Video box cover."
                                                          }
                                                       ]
                                                    },
                                                    "ref":{
                                                       "type":"object",
                                                       "properties":{
                                                          "id":{
                                                             "type":"integer",
                                                             "description": "ID to use to get information about this resource."
                                                          },
                                                          "me":{
                                                             "type":"string",
                                                             "description": "URI template to use to get information about this resource."
                                                          },
                                                          "parent":{
                                                             "type":"string",
                                                             "description": "URI template for information about the parent resource."
                                                          },
                                                          "children":{
                                                             "type":"array",
                                                             "description": "URI templates for child resources."
                                                          }
                                                       },
                                                       "required":[
                                                          "id",
                                                          "me"
                                                       ]
                                                    }
                                                 },
                                                 "required":[
                                                    "id",
                                                    "zoom",
                                                    "ref"
                                                 ]
                                              }
                                           ]
                                        },
                                        "ref":{
                                           "type":"object",
                                           "properties":{
                                              "id":{
                                                 "type":"integer",
                                                 "description": "ID to use to get information about this resource."
                                              },
                                              "me":{
                                                 "type":"string",
                                                 "description": "URI template to use to get information about this resource."
                                              },
                                              "parent":{
                                                 "type":"string",
                                                 "description": "URI template for information about the parent resource."
                                              },
                                              "children":{
                                                 "type":"array",
                                                 "description": "URI templates for child resources."
                                              }
                                           },
                                           "required":[
                                              "id",
                                              "me"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "id",
                                        "name",
                                        "ref"
                                     ]
                                  },
                                  "organization":{
                                     "type":"object",
                                     "description":"Organization that earned the recognition.",
                                     "properties":{
                                        "id":{
                                           "type":"integer",
                                           "description":"Rovi ID for the company that earned the credit."
                                        },
                                        "name":{
                                           "type":"string",
                                           "description":"Name of the company."
                                        },
                                        "ref":{
                                           "type":"object",
                                           "properties":{
                                              "id":{
                                                 "type":"integer",
                                                 "description": "ID to use to get information about this resource."
                                              },
                                              "me":{
                                                 "type":"string",
                                                 "description": "URI template to use to get information about this resource."
                                              },
                                              "parent":{
                                                 "type":"string",
                                                 "description": "URI template for information about the parent resource."
                                              },
                                              "children":{
                                                 "type":"array",
                                                 "description": "URI templates for child resources."
                                              }
                                           },
                                           "required":[
                                              "id",
                                              "me"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "id",
                                        "ref"
                                     ]
                                  },
                                  "ref":{
                                     "type":"object",
                                     "properties":{
                                        "id":{
                                           "type":"integer",
                                           "description": "ID to use to get information about this resource."
                                        },
                                        "me":{
                                           "type":"string",
                                           "description": "URI template to use to get information about this resource."
                                        },
                                        "parent":{
                                           "type":"string",
                                           "description": "URI template for information about the parent resource."
                                        },
                                        "children":{
                                           "type":"array",
                                           "description": "URI templates for child resources."
                                        }
                                     },
                                     "required":[
                                        "id",
                                        "me"
                                     ]
                                  }
                               },
                               "required":[
                                  "in",
                                  "ref"
                               ]
                            }
                         ]
                      },
                      "network":{
                         "type":"string",
                         "description":"TV network associated with the work for the year in which the work is recogized."
                      },
                      "details":{
                         "type":"string",
                         "description":"Notes related to the award."
                      },
                      "ref":{
                         "type":"object",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description": "ID to use to get information about this resource."
                            },
                            "me":{
                               "type":"string",
                               "description": "URI template to use to get information about this resource."
                            },
                            "parent":{
                               "type":"string",
                               "description": "URI template for information about the parent resource."
                            },
                            "children":{
                               "type":"array",
                               "description": "URI templates for child resources."
                            }
                         },
                         "required":[
                            "id",
                            "me"
                         ]
                      }
                   },
                   "required":[
                      "in",
                      "ref"
                   ]
                }
             ]
          },
          "nominees":{
             "type":"array",
             "items":[
                {
                   "type":"object",
                   "description":"Award nominees.",
                   "properties":{
                      "in":{
                         "type":"string"
                      },
                      "content":{
                         "type":"array",
                         "items":[
                            {
                               "type":"object",
                               "description":"Information about the work that earned the recognition.",
                               "properties":{
                                  "id":{
                                     "type":"integer",
                                     "description":"Rovi ID for the work that earned the recognition."
                                  },
                                  "type":{
                                     "type":"string",
                                     "description":"Type of program.",
                                     "oneOf":[
                                        {
                                           "enum":[
                                              "movie"
                                           ],
                                           "description":"Movie."
                                        },
                                        {
                                           "enum":[
                                              "season"
                                           ],
                                           "description":"Season in a TV series."
                                        },
                                        {
                                           "enum":[
                                              "episode"
                                           ],
                                           "description":"Episode in a TV series."
                                        },
                                        {
                                           "enum":[
                                              "series"
                                           ],
                                           "description":"TV series."
                                        },
                                        {
                                           "enum":[
                                              "other"
                                           ],
                                           "description":"A program other than a movie or TV series."
                                        }
                                     ]
                                  },
                                  "in":{
                                     "type":"string",
                                     "description":"Language of the work that earned the recognition."
                                  },
                                  "market":{
                                     "type":"array",
                                     "items":{
                                        "type":"string"
                                     }
                                  },
                                  "title":{
                                     "type":"string",
                                     "description":"Title of the show."
                                  },
                                  "alts":{
                                     "type":"object",
                                     "description":"Alternate titles for the season.",
                                     "properties":{
                                        "short15":{
                                           "type":"string",
                                           "description":"Title with up to 15 characters for a grid cell. Creative abbreviations used as needed."
                                        },
                                        "short30":{
                                           "type":"string",
                                           "description":"Title with up to 30 characters. Creative abbreviations used as needed."
                                        },
                                        "short8":{
                                           "type":"string",
                                           "description":"Title with up to 8 characters for a grid cell. Creative abbreviations used as needed."
                                        },
                                        "short50":{
                                           "type":"string",
                                           "description":"Title with up to 50 characters. Creative abbreviations used as needed."
                                        },
                                        "alias":{
                                           "type":"string",
                                           "description":"Alternate title by which a show has been distributed."
                                        },
                                        "alias2":{
                                           "type":"string",
                                           "description":"Another alternate title by which a show has been distributed."
                                        },
                                        "alias3":{
                                           "type":"string",
                                           "description":"Another alternate title by which a show has been distributed."
                                        },
                                        "alias4":{
                                           "type":"string",
                                           "description":"Another alternate title by which a show has been distributed."
                                        },
                                        "subtitle":{
                                           "type":"string",
                                           "description":"Subtitle of the show."
                                        },
                                        "ref":{
                                           "type":"object",
                                           "properties":{
                                              "id":{
                                                 "type":"integer",
                                                 "description": "ID to use to get information about this resource."
                                              },
                                              "me":{
                                                 "type":"string",
                                                 "description": "URI template to use to get information about this resource."
                                              },
                                              "parent":{
                                                 "type":"string",
                                                 "description": "URI template for information about the parent resource."
                                              },
                                              "children":{
                                                 "type":"array",
                                                 "description": "URI templates for child resources."
                                              }
                                           },
                                           "required":[
                                              "id",
                                              "me"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "ref"
                                     ]
                                  },
                                  "image":{
                                     "type":"object",
                                     "description":"Information about the primary image associated with the show.",
                                     "properties":{
                                        "id":{
                                           "type":"integer",
                                           "description":"Rovi ID for the image."
                                        },
                                        "zoom":{
                                           "type":"string",
                                           "description":"How much of the subject appears in the picture. A value here indicates a closer zoom level may be available from the media_image request. A missing value indicates a std zoom.",
                                           "oneOf":[
                                              {
                                                 "enum":[
                                                    "head"
                                                 ],
                                                 "description":"Head or shoulders to top of head."
                                              },
                                              {
                                                 "enum":[
                                                    "torso"
                                                 ],
                                                 "description":"Chest or thigh to top of head."
                                              },
                                              {
                                                 "enum":[
                                                    "body"
                                                 ],
                                                 "description":"Body fills at least 80% of frame."
                                              },
                                              {
                                                 "enum":[
                                                    "framed"
                                                 ],
                                                 "description":"Full body fills 50% to 80% of frame."
                                              },
                                              {
                                                 "enum":[
                                                    "std"
                                                 ],
                                                 "description":"Full body fills 50% of frame or less."
                                              }
                                           ]
                                        },
                                        "type":{
                                           "type":"string",
                                           "description":"Type of image.",
                                           "oneOf":[
                                              {
                                                 "enum":[
                                                    "album"
                                                 ],
                                                 "description":"Album cover front."
                                              },
                                              {
                                                 "enum":[
                                                    "album2"
                                                 ],
                                                 "description":"Album cover back."
                                              },
                                              {
                                                 "enum":[
                                                    "box"
                                                 ],
                                                 "description":"VHS box cover."
                                              },
                                              {
                                                 "enum":[
                                                    "celebrity"
                                                 ],
                                                 "description":"Celebrity."
                                              },
                                              {
                                                 "enum":[
                                                    "dvd"
                                                 ],
                                                 "description":"DVD box cover."
                                              },
                                              {
                                                 "enum":[
                                                    "gallery"
                                                 ],
                                                 "description":"Key cast, no set."
                                              },
                                              {
                                                 "enum":[
                                                    "gallery2"
                                                 ],
                                                 "description":"Supporting cast, no set."
                                              },
                                              {
                                                 "enum":[
                                                    "generic"
                                                 ],
                                                 "description":"Placeholder iconography or photograph."
                                              },
                                              {
                                                 "enum":[
                                                    "group"
                                                 ],
                                                 "description":"Over four cast members."
                                              },
                                              {
                                                 "enum":[
                                                    "head"
                                                 ],
                                                 "description":"One key cast member."
                                              },
                                              {
                                                 "enum":[
                                                    "head2"
                                                 ],
                                                 "description":"One supporting cast member."
                                              },
                                              {
                                                 "enum":[
                                                    "jersey"
                                                 ],
                                                 "description":"Sports jersey."
                                              },
                                              {
                                                 "enum":[
                                                    "key"
                                                 ],
                                                 "description":"Key cast or show image."
                                              },
                                              {
                                                 "enum":[
                                                    "league"
                                                 ],
                                                 "description":"Sports league logo."
                                              },
                                              {
                                                 "enum":[
                                                    "olympic"
                                                 ],
                                                 "description":"Olympics image."
                                              },
                                              {
                                                 "enum":[
                                                    "poster"
                                                 ],
                                                 "description":"Poster art."
                                              },
                                              {
                                                 "enum":[
                                                    "prod"
                                                 ],
                                                 "description":"Key cast on set."
                                              },
                                              {
                                                 "enum":[
                                                    "prod2"
                                                 ],
                                                 "description":"Supporting cast on set."
                                              },
                                              {
                                                 "enum":[
                                                    "program"
                                                 ],
                                                 "description":"Key cast from program."
                                              },
                                              {
                                                 "enum":[
                                                    "program2"
                                                 ],
                                                 "description":"Supporting cast from program."
                                              },
                                              {
                                                 "enum":[
                                                    "set"
                                                 ],
                                                 "description":"DVD box set cover."
                                              },
                                              {
                                                 "enum":[
                                                    "showcard"
                                                 ],
                                                 "description":"TV series poster."
                                              },
                                              {
                                                 "enum":[
                                                    "team"
                                                 ],
                                                 "description":"Sports team logo."
                                              },
                                              {
                                                 "enum":[
                                                    "trailer"
                                                 ],
                                                 "description":"Image for trailer, 16:9."
                                              },
                                              {
                                                 "enum":[
                                                    "video"
                                                 ],
                                                 "description":"Video box cover."
                                              }
                                           ]
                                        },
                                        "genres":{
                                           "type":"array",
                                           "items":{
                                              "type":"integer"
                                           }
                                        },
                                        "ref":{
                                           "type":"object",
                                           "properties":{
                                              "id":{
                                                 "type":"integer",
                                                 "description": "ID to use to get information about this resource."
                                              },
                                              "me":{
                                                 "type":"string",
                                                 "description": "URI template to use to get information about this resource."
                                              },
                                              "parent":{
                                                 "type":"string",
                                                 "description": "URI template for information about the parent resource."
                                              },
                                              "children":{
                                                 "type":"array",
                                                 "description": "URI templates for child resources."
                                              }
                                           },
                                           "required":[
                                              "id",
                                              "me"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "ref"
                                     ]
                                  },
                                  "ref":{
                                     "type":"object",
                                     "properties":{
                                        "id":{
                                           "type":"integer",
                                           "description": "ID to use to get information about this resource."
                                        },
                                        "me":{
                                           "type":"string",
                                           "description": "URI template to use to get information about this resource."
                                        },
                                        "parent":{
                                           "type":"string",
                                           "description": "URI template for information about the parent resource."
                                        },
                                        "children":{
                                           "type":"array",
                                           "description": "URI templates for child resources."
                                        }
                                     },
                                     "required":[
                                        "id",
                                        "me"
                                     ]
                                  }
                               },
                               "required":[
                                  "id",
                                  "type",
                                  "in",
                                  "title",
                                  "ref"
                               ]
                            }
                         ]
                      },
                      "recipients":{
                         "type":"array",
                         "items":[
                            {
                               "type":"object",
                               "description":"Information about the recipients that earned the recognition.",
                               "properties":{
                                  "in":{
                                     "type":"string"
                                  },
                                  "contribution":{
                                     "type":"string",
                                     "description":"Contribution that earned the recognition."
                                  },
                                  "person":{
                                     "type":"object",
                                     "description":"Person who earned the recognition.",
                                     "properties":{
                                        "id":{
                                           "type":"integer",
                                           "description":"Rovi ID for the person."
                                        },
                                        "name":{
                                           "type":"string",
                                           "description":"Name of the person."
                                        },
                                        "alts":{
                                           "type":"object",
                                           "description":"Other names the person is known by.",
                                           "properties":{
                                              "first":{
                                                 "type":"string",
                                                 "description":"First name of the person."
                                              },
                                              "last":{
                                                 "type":"string",
                                                 "description":"Last name of the person."
                                              },
                                              "ref":{
                                                 "type":"object",
                                                 "properties":{
                                                    "id":{
                                                       "type":"integer",
                                                       "description": "ID to use to get information about this resource."
                                                    },
                                                    "me":{
                                                       "type":"string",
                                                       "description": "URI template to use to get information about this resource."
                                                    },
                                                    "parent":{
                                                       "type":"string",
                                                       "description": "URI template for information about the parent resource."
                                                    },
                                                    "children":{
                                                       "type":"array",
                                                       "description": "URI templates for child resources."
                                                    }
                                                 },
                                                 "required":[
                                                    "id",
                                                    "me"
                                                 ]
                                              }
                                           },
                                           "required":[
                                              "ref"
                                           ]
                                        },
                                        "image":{
                                           "type":"array",
                                           "items":[
                                              {
                                                 "type":"object",
                                                 "description":"Primary image associated with the person.",
                                                 "properties":{
                                                    "id":{
                                                       "type":"integer",
                                                       "description":"Rovi ID for the image."
                                                    },
                                                    "zoom":{
                                                       "type":"string",
                                                       "description":"How much of the subject appears in the picture. A value here indicates a closer zoom level may be available from the media_image request. A missing value indicates a std zoom.",
                                                       "oneOf":[
                                                          {
                                                             "enum":[
                                                                "head"
                                                             ],
                                                             "description":"Head or shoulders to top of head."
                                                          },
                                                          {
                                                             "enum":[
                                                                "torso"
                                                             ],
                                                             "description":"Chest or thigh to top of head."
                                                          },
                                                          {
                                                             "enum":[
                                                                "body"
                                                             ],
                                                             "description":"Body fills at least 80% of frame."
                                                          },
                                                          {
                                                             "enum":[
                                                                "framed"
                                                             ],
                                                             "description":"Full body fills 50% to 80% of frame."
                                                          },
                                                          {
                                                             "enum":[
                                                                "std"
                                                             ],
                                                             "description":"Full body fills 50% of frame or less."
                                                          }
                                                       ]
                                                    },
                                                    "type":{
                                                       "type":"string",
                                                       "description":"Type of image.",
                                                       "oneOf":[
                                                          {
                                                             "enum":[
                                                                "album"
                                                             ],
                                                             "description":"Album cover front."
                                                          },
                                                          {
                                                             "enum":[
                                                                "album2"
                                                             ],
                                                             "description":"Album cover back."
                                                          },
                                                          {
                                                             "enum":[
                                                                "box"
                                                             ],
                                                             "description":"VHS box cover."
                                                          },
                                                          {
                                                             "enum":[
                                                                "celebrity"
                                                             ],
                                                             "description":"Celebrity."
                                                          },
                                                          {
                                                             "enum":[
                                                                "dvd"
                                                             ],
                                                             "description":"DVD box cover."
                                                          },
                                                          {
                                                             "enum":[
                                                                "gallery"
                                                             ],
                                                             "description":"Key cast, no set."
                                                          },
                                                          {
                                                             "enum":[
                                                                "gallery2"
                                                             ],
                                                             "description":"Supporting cast, no set."
                                                          },
                                                          {
                                                             "enum":[
                                                                "generic"
                                                             ],
                                                             "description":"Placeholder iconography or photograph."
                                                          },
                                                          {
                                                             "enum":[
                                                                "group"
                                                             ],
                                                             "description":"Over four cast members."
                                                          },
                                                          {
                                                             "enum":[
                                                                "head"
                                                             ],
                                                             "description":"One key cast member."
                                                          },
                                                          {
                                                             "enum":[
                                                                "head2"
                                                             ],
                                                             "description":"One supporting cast member."
                                                          },
                                                          {
                                                             "enum":[
                                                                "jersey"
                                                             ],
                                                             "description":"Sports jersey."
                                                          },
                                                          {
                                                             "enum":[
                                                                "key"
                                                             ],
                                                             "description":"Key cast or show image."
                                                          },
                                                          {
                                                             "enum":[
                                                                "league"
                                                             ],
                                                             "description":"Sports league logo."
                                                          },
                                                          {
                                                             "enum":[
                                                                "olympic"
                                                             ],
                                                             "description":"Olympics image."
                                                          },
                                                          {
                                                             "enum":[
                                                                "poster"
                                                             ],
                                                             "description":"Poster art."
                                                          },
                                                          {
                                                             "enum":[
                                                                "prod"
                                                             ],
                                                             "description":"Key cast on set."
                                                          },
                                                          {
                                                             "enum":[
                                                                "prod2"
                                                             ],
                                                             "description":"Supporting cast on set."
                                                          },
                                                          {
                                                             "enum":[
                                                                "program"
                                                             ],
                                                             "description":"Key cast from program."
                                                          },
                                                          {
                                                             "enum":[
                                                                "program2"
                                                             ],
                                                             "description":"Supporting cast from program."
                                                          },
                                                          {
                                                             "enum":[
                                                                "set"
                                                             ],
                                                             "description":"DVD box set cover."
                                                          },
                                                          {
                                                             "enum":[
                                                                "showcard"
                                                             ],
                                                             "description":"TV series poster."
                                                          },
                                                          {
                                                             "enum":[
                                                                "team"
                                                             ],
                                                             "description":"Sports team logo."
                                                          },
                                                          {
                                                             "enum":[
                                                                "trailer"
                                                             ],
                                                             "description":"Image for trailer, 16:9."
                                                          },
                                                          {
                                                             "enum":[
                                                                "video"
                                                             ],
                                                             "description":"Video box cover."
                                                          }
                                                       ]
                                                    },
                                                    "ref":{
                                                       "type":"object",
                                                       "properties":{
                                                          "id":{
                                                             "type":"integer",
                                                             "description": "ID to use to get information about this resource."
                                                          },
                                                          "me":{
                                                             "type":"string",
                                                             "description": "URI template to use to get information about this resource."
                                                          },
                                                          "parent":{
                                                             "type":"string",
                                                             "description": "URI template for information about the parent resource."
                                                          },
                                                          "children":{
                                                             "type":"array",
                                                             "description": "URI templates for child resources."
                                                          }
                                                       },
                                                       "required":[
                                                          "id",
                                                          "me"
                                                       ]
                                                    }
                                                 },
                                                 "required":[
                                                    "id",
                                                    "zoom",
                                                    "ref"
                                                 ]
                                              }
                                           ]
                                        },
                                        "ref":{
                                           "type":"object",
                                           "properties":{
                                              "id":{
                                                 "type":"integer",
                                                 "description": "ID to use to get information about this resource."
                                              },
                                              "me":{
                                                 "type":"string",
                                                 "description": "URI template to use to get information about this resource."
                                              },
                                              "parent":{
                                                 "type":"string",
                                                 "description": "URI template for information about the parent resource."
                                              },
                                              "children":{
                                                 "type":"array",
                                                 "description": "URI templates for child resources."
                                              }
                                           },
                                           "required":[
                                              "id",
                                              "me"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "id",
                                        "name",
                                        "ref"
                                     ]
                                  },
                                  "organization":{
                                     "type":"object",
                                     "description":"Organization that earned the recognition.",
                                     "properties":{
                                        "id":{
                                           "type":"integer",
                                           "description":"Rovi ID for the company that earned the credit."
                                        },
                                        "name":{
                                           "type":"string",
                                           "description":"Name of the company."
                                        },
                                        "ref":{
                                           "type":"object",
                                           "properties":{
                                              "id":{
                                                 "type":"integer",
                                                 "description": "ID to use to get information about this resource."
                                              },
                                              "me":{
                                                 "type":"string",
                                                 "description": "URI template to use to get information about this resource."
                                              },
                                              "parent":{
                                                 "type":"string",
                                                 "description": "URI template for information about the parent resource."
                                              },
                                              "children":{
                                                 "type":"array",
                                                 "description": "URI templates for child resources."
                                              }
                                           },
                                           "required":[
                                              "id",
                                              "me"
                                           ]
                                        }
                                     },
                                     "required":[
                                        "id",
                                        "ref"
                                     ]
                                  },
                                  "ref":{
                                     "type":"object",
                                     "properties":{
                                        "id":{
                                           "type":"integer",
                                           "description": "ID to use to get information about this resource."
                                        },
                                        "me":{
                                           "type":"string",
                                           "description": "URI template to use to get information about this resource."
                                        },
                                        "parent":{
                                           "type":"string",
                                           "description": "URI template for information about the parent resource."
                                        },
                                        "children":{
                                           "type":"array",
                                           "description": "URI templates for child resources."
                                        }
                                     },
                                     "required":[
                                        "id",
                                        "me"
                                     ]
                                  }
                               },
                               "required":[
                                  "in",
                                  "ref"
                               ]
                            }
                         ]
                      },
                      "network":{
                         "type":"string",
                         "description":"TV network associated with the work for the year in which the work is recogized."
                      },
                      "details":{
                         "type":"string",
                         "description":"Notes related to the award."
                      },
                      "ref":{
                         "type":"object",
                         "properties":{
                            "id":{
                               "type":"integer",
                               "description": "ID to use to get information about this resource."
                            },
                            "me":{
                               "type":"string",
                               "description": "URI template to use to get information about this resource."
                            },
                            "parent":{
                               "type":"string",
                               "description": "URI template for information about the parent resource."
                            },
                            "children":{
                               "type":"array",
                               "description": "URI templates for child resources."
                            }
                         },
                         "required":[
                            "id",
                            "me"
                         ]
                      }
                   },
                   "required":[
                      "in",
                      "ref"
                   ]
                }
             ]
          },
          "ref":{
             "type":"object",
             "properties":{
                "id":{
                   "type":"integer"
                },
                "me":{
                   "type":"string"
                },
                "parent":{
                   "type":"string"
                },
                "children":{
                   "type":"array"
                }
             },
             "required":[
                "id",
                "me"
             ]
          }
       },
       "required":[
          "id",
          "in",
          "category",
          "year",
          "mediums",
          "ref"
       ]
    }
```

+ Response 400 (application/json)
```
    {
      "status": 400,
      "kind": "BAD_REQUEST",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "400-#",
          "title": "Invalid field",
          "message": "Documentation note: This status code indicates the request is malformed. Please correct the request per the specification and submit again.",
          "parameter": "Parameter value."
        }
      ]
    }
```
+ Response 401 (application/json)
```
    {
      "status": 401,
      "kind": "Unauthorized",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "401-#",
          "title": "401 Unauthorized",
          "message": "Documentation note: This status code indicates the request failed OAuth 1.0a authorization.",
          "parameter": null
        }
      ]
    }
```
+ Response 404 (application/json)
```
    {
      "status": 404,
      "kind": "NOT_FOUND",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "404-#",
          "title": "No result found",
          "message": "Documentation note: This status code indicates a requested resource is unavailable: not found, not authorized data, or end-of-list reached."
        }
      ]
    }
```
+ Response 429 (application/json)
```
    {
      "status": 429,
      "kind": "RATE_LIMIT_EXCEEDED",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "429-#",
          "title": "Rate limit exceeded",
          "message": "Documentation note: This status code indicates the per-second or per-UTC-date rate limit has been exceeded. Resubmit the request after sufficient time has passed, preferrably using an exponential backoff algorithm to reduce client traffic."
        }
      ]
    }
```
+ Response 500 (application/json)
```
    {
      "status": 500,
      "kind": "INTERNAL_SERVER_ERROR",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "500-#",
          "title": "Unknown Error",
          "message": "Documentation note: This status code indicates the server encountered an unexpected error condition."
        }
      ]
    }
```
+ Response 503 (application/json)
```
    {
      "status": 503,
      "kind": "SERVER_UNAVAILABLE",
      "request": {
        "method": "GET",
        "uri": "URI called."
      },
      "problems": [
        {
          "code": "503-#",
          "title": "Server Unavailable",
          "message": "Documentation note: This status code indicates the server is temporarily unavailable."
        }
      ]
    }
```

# Group Return-Path Data
The Rovi Return-Path Data API lets you send clickstream data about TV viewer behavior to the Rovi Content Data Warehouse (CDW). The CDW is uniquely designed to handle clickstream events and TV viewership data and, as such, is designed to make available reliable, usable data through the Rovi Operator Insights portal.

The Return-Path Data API offers a single request that reports a variety of user actions.

# rpd_submitevents [/rpd_submitevents]
Sends information about TV viewer behavior to the Rovi return-path data warehouse for Rovi Operator Insights.

## POST
Sends information about TV viewer behavior to the Rovi return-path data warehouse. All data is specified in an array in the message body.
        
Note:  The value of the "event_type" property determines which attributes you can specify in the optional "attributes" object, as shown in the following table."
        
| For event_type . . . | Required key:value attributes are . . .                                   |
| -------------------- | ------------------------------------------------------------------------- |
| VIEW_PROGRAM         | channel_id:(string)<br>program_id:(string)<br>duration:(number)           |
| RECORD_PROGRAM       | channel_id:(string)<br>program_id:(string)<br>program_start_time:(number) |
| ADD_FAVORITE         | program_id:(string)                                                       |
| REMOVE_FAVORITE      | program_id:(string)                                                       |
| ADD_FEEDBACK         | program_id:(string)<br>rating:(number)                                    |
| REMOVE_FEEDBACK      | program_id:(string)                                                       |
| VIEW_VOD             | asset_id:(string)<br>duration:(number)                                    |
| PURCHASE_VOD         | asset_id:(string)                                                         |

+ Request (application/json)
  + Body

        ```json
        {
           "$schema": "http://json-schema.org/draft-04/schema#",
           "type": "object",
           "properties": {
           "events": {
               "$ref": "#/definitions/events"
           }
        },
        "required": [
            "events"
        ],
        "definitions": {
          "events": {
             "type": "array",
             "items": {
               "$ref": "#/definitions/event_info"
             },
             "minItems": 1
          },
          "event_info": {
             "type": "object",
             "properties": {
               "user_id": {
                  "description": "Rovi ID for the user, device, or application.",
                  "type": "string",
                  "pattern": "[A-Za-z0-9]+"
               },
              "event_type": {
                  "description": "Type of event: VIEW_PROGRAM, RECORD_PROGRAM, ADD_FAVORITE, REMOVE_FAVORITE, ADD_FEEDBACK, REMOVE_FEEDBACK, VIEW_VOD, or PURCHASE_VOD.",
                  "type": "string"
               },
              "event_id": {
                  "description": "Unique ID for the event.",
                  "type": "string"
               },
              "timestamp": {
                  "description": "UTC date and time of the event, specified in yyyy-MM-ddTHH:mm:ss.fffZ format.",
                  "type": "string",
                  "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z$"
                },
              "device_type": {
                  "description": "Type of device the event occurred on.",
                  "enum": [
                      "SET_TOP_BOX",
                      "MOBILE"
                  ]
                },
              "attributes": {
                  "description": "Key:value properties of the event. See the table in the description of this request.",
                  "type": "object"
               }
              },
          "required": [
              "user_id",
              "event_type",
              "event_id",
              "timestamp",
              "device_type"
           ]
            }
           }
         }
         ```

 + Schema

            {
               "$schema": "http://json-schema.org/draft-04/schema#",
               "type": "object",
               "properties": {
               "events": {
                   "$ref": "#/definitions/events"
               }
            },
            "required": [
                "events"
            ],
            "definitions": {
              "events": {
                 "type": "array",
                 "items": {
                   "$ref": "#/definitions/event_info"
                 },
                 "minItems": 1
              },
              "event_info": {
                 "type": "object",
                 "properties": {
                   "user_id": {
                      "description": "Rovi ID for the user, device, or application.",
                      "type": "string",
                      "pattern": "[A-Za-z0-9]+"
                   },
                  "event_type": {
                      "description": "Type of event: VIEW_PROGRAM, RECORD_PROGRAM, ADD_FAVORITE, REMOVE_FAVORITE, ADD_FEEDBACK, REMOVE_FEEDBACK, VIEW_VOD, or PURCHASE_VOD.",
                      "type": "string"
                   },
                  "event_id": {
                      "description": "Unique ID for the event.",
                      "type": "string"
                   },
                  "timestamp": {
                      "description": "UTC date and time of the event, specified in yyyy-MM-ddTHH:mm:ss.fffZ format.",
                      "type": "string",
                      "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z$"
                    },
                  "device_type": {
                      "description": "Type of device the event occurred on.",
                      "enum": [
                          "SET_TOP_BOX",
                          "MOBILE"
                      ]
                    },
                  "attributes": {
                      "description": "Key:value properties of the event. See the table in the description of this request.",
                      "type": "object"
                   }
                  },
              "required": [
                  "user_id",
                  "event_type",
                  "event_id",
                  "timestamp",
                  "device_type"
               ]
                }
               }
             }

 
+ Response 201 (application/json)

    ```json
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "type": "object",
      "properties": {
        "message": {
          "description": "Success message",
          "status": "integer"
        }
      }
    }
    ```

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 409 (application/json)
+ Response 429 (application/json)
+ Response 498 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# Group Remote Access
Rovi Remote Access enables cable companies to give subscribers remote access to their DVRs. Using an application on a tablet, computer, and smartphone, cable subscribers can discover shows, see their channel lineup, and program their i-Guideâ„¢ or PassportÂ® Guide DVRs.

With Rovi Remote Access, the home DVR is available anywhere.

Rovi Remote Access is small API that offers two different configurations, one for manual registration of subscriber set-top boxes and one for auto registration. A cable company can choose to implement one or the other.
- Manual Registration requires the user to register a set-top box from the set-top box menu.
- Auto Registration registers all set-top boxes in a household automatically and offers many benefits not otherwise available.

The Remote Access API performs the following:
- authenticates subscriber access
- establishes a user session
- identifies capabilities of associated set-top boxes
- performs DVR scheduling and channel changing on user request

Implementation of a Remote Access application requires additional documentation beyond the scope of the API documentation provided here. Contact your Rovi sales representative.

# mgmt_clients [/mgmt_clients?deviceId={deviceId}&userId={userId}] 
Registers the tablet, computer, or smartphone the Remote Access app is running on.

## POST 
Sends Rovi unique identifying information about the tablet, computer, or smartphone the Remote Access app is running on.

Register the device only once, before the first mgmt_session call. If the app is deleted and reinstalled, register the device again with the same information.

+ Request 
  + Headers
            
            sessionId: session ID
        
  + Body
            
            {
                "$schema": "http://json-schema.org/draft-03/schema",
                "type": "object" ,
                "properties": {
                "clientType": {
                    "description": "Type of device.",
                    "type": "string",
                    "required": "true"
                },
                "os": {
                    "description": "Name of the operating system on the device",
                    "type": "string",
                    "required": "true"
                },
                "osVersion": {
                    "description": "Version of operating system.",
                    "type": "string",
                    "required": "true"
                },
                "externalClientId": {
                    "description": "Unique identifying information for the device.",
                    "type": "string",
                    "required": "true"
                }
                }
            }

+ Response 201 (application/json)

    ```json
    {
      "$schema": "http://json-schema.org/draft-03/schema",
      "type": "object" ,
      "properties": {
        "clientId": {
            "description": "Rovi ID for the device.",
            "type": "integer",
            "example": 1
        }
      }
    }
    ```

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 498 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# mgmt_device [/mgmt_device?deviceId={deviceId}&userId={userId}] 
Information about a set-top box.

+ Parameters
  + deviceId (required, integer) ... 
    Rovi device ID for the set-top box, as returned by a mgmt_devices request.
  + userId (required, integer) ... 
    Rovi ID for the user.             

## GET 
Returns information from Rovi about a set-top box.
+ Request  (application/json) 
  + Headers
            
            sessionId: session ID
            
+ Response 200 (application/json)
```
    {
      "$schema": "http://json-schema.org/draft-03/schema",
      "type": "object" ,
      "properties":{
         "deviceId":{
            "description":"Rovi device ID for the set-top box.",
            "type":"integer",
            "required":"true"
         },
         "msoDeviceName":{
            "description":"MSO name for the set-top box.",
            "type":"string",
            "required":"false"
         },
         "friendlyName":{
            "description":"User name for the set-top box.",
            "type":"string",
            "required":"false"
         },
         "capabilities":[
            {
               "description":"List of capabilities of the set-top box.",
               "type":"string",
               "required":"false"
            }
         ],
         "serviceId":{
            "description":"Rovi ID for the television service at the set-top box.",
            "type":"integer",
            "required":"true"
         },
         "msoId":{
            "description":"Rovi ID for the MSO.",
            "type":"integer",
            "required":"true"
         },
         "status":{
            "description":"Connection status of the set-top box, such as Active or Pending.",
            "type":"integer",
            "required":"true"
         }
      }
    }
```

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 498 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

## PUT 
Updates the user name for a set-top box, for display in the Remote Access app. 
+ Request 
  + Headers
            
            sessionId: session ID
        
  + Body
            
            {
                "$schema": "http://json-schema.org/draft-03/schema",
                "type": "object",
                "properties": {
                    "friendlyName": {
                        "description": "The user name for the set-top box.",
                        "type": "string",
                        "required": "true",
                        "maxLength": 128
                    }
                }
            }

+ Response 200 (application/json)

    ```json
    {
       "$schema": "http://json-schema.org/draft-03/schema",
       "type": "object" ,
       "properties":{
          "deviceId":{
             "description":"Rovi device ID for the set-top box.",
             "type":"integer",
             "required":"true"
          },
          "msoDeviceName":{
             "description":"MSO name for the set-top box.",
             "type":"string",
             "required":"false"
          },
          "friendlyName":{
             "description":"User name for the set-top box.",
             "type":"string",
             "required":"false"
          },
          "capabilities":[
             {
                "description":"List of capabilities of the set-top box.",
                "type":"string",
                "required":"false"
             }
          ],
          "serviceId":{
             "description":"Rovi ID for the television service at the set-top box.",
             "type":"integer",
             "required":"true"
          },
          "msoId":{
             "description":"Rovi ID for the MSO.",
             "type":"integer",
             "required":"true"
          },
          "status":{
             "description":"Connection status of the set-top box, such as Active or Pending.",
             "type":"integer",
             "required":"true"
          }
       }
    }
    ```

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 498 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# mgmt_devices [/mgmt_devices?userId={userId}] 
Information about the set-top boxes associated with a user.

+ Parameters
  + userId (required, integer) ... 
    Rovi ID for the user.             

## POST 
Registers a set-top box with Rovi by validating a PIN that the set-top box supplies to the user.

+ Request  (application/json)
  + Headers

            sessionId: session ID

  + Body

            {
                "$schema": "http://json-schema.org/draft-03/schema",
                "type": "object" ,
                "properties": {
                "pin": {
                    "description": "PIN value supplied by the set-top box, as reported by the user.",
                    "type": "string",
                    "required": "true"
                },
                "externalProxyId": {
                    "description": "ID of the RAccess server or Flux server that communicates to the set-top box. Rovi Global Services can provide this ID for each server in the system.",
                    "type": "string",
                    "required": "false"
                },
                "friendlyName": {
                    "description": "User name for the set-top box.",
                    "type": "string",
                    "required": "false",
                    "maxLength": 128
                },
                "channelLineupId": {
                    "description": "Channel lineup ID.",
                    "type": "integer",
                    "required": "false"
                }
                }
            }
            
+ Response 201 (application/json)
    
    ```json
    {
        "$schema": "http://json-schema.org/draft-03/schema",
        "type": "object",
        "properties": {
          "deviceId": {
            "description": "Rovi device ID for the set-top box.",
            "type": "integer",
            "required": "true"
          }
        }
    }
    ```

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 498 (application/json)

        {
        description: "PIN token expired. Request another PIN from the user."
        }

+ Response 500 (application/json)
+ Response 503 (application/json)

## GET 
Returns information from Rovi about the set-top boxes associated with a user. 
+ Request 
  + Headers
            
            sessionId: session ID
        
+ Response 200 (application/json)

    ```json
    {
      "$schema": "http://json-schema.org/draft-03/schema",
      "type": "object" ,
      "properties": {
        "deviceList": [{
          "deviceId": {
            "description": "Rovi ID for the set-top box.",
            "type": "integer",
            "required": "true"
          },
          "msoDeviceName": {
            "description": "MSO name for the set-top box.",
            "type": "string",
            "required": "false"
          },
          "friendlyName": {
            "description": "User name for the set-top box.",
            "type": "string",
            "required": "false"
          },
          "capabilities": [{
              "description": "List of capabilities of the set-top box.",
              "type": "string",
              "required": "false"
          }],
          "serviceId": {
            "description": "Rovi ID for the television service at the set-top box.",
            "type": "integer",
            "required": "true"
          },
          "msoId": {
            "description": "Rovi ID for the MSO.",
            "type": "integer",
            "required": "true"
          },
          "status": {
            "description": "Connection status of the set-top box, such as Active or Pending.",
            "type": "integer",
            "required": "true"
          }               
        }]
      }
    }
    ```

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 498 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

## PUT 
Refreshes set-top box information that Rovi has for a user. 

Retrieves all set-box information from the MSO and then syncs with those set-top boxes and collects additional information about them.

This PUT does not require a body. 

+ Request 
  + Headers
            
            sessionId: session ID
        
+ Response 202 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 498 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# mgmt_diskspace [/mgmt_diskspace?deviceId={deviceId}&userId={userId}] 
Returns disk space information for a set-top box.

## GET 

+ Parameters
  + deviceId (required, integer) ... 
    Rovi device ID for the set-top box, as returned by a mgmt_devices request.
  + userId (required, integer) ... 
    Rovi ID for the user.             

+ Request 
  + Headers
            
            sessionId: session ID
        
+ Response 200 (application/json)

    ```json
    {
      "$schema": "http://json-schema.org/draft-03/schema",
      "type": "object" ,
      "properties":{
         "percentDiskSpaceUsed":{
            "description":"Percentage of disk space used.",
            "type":"integer",
            "required":"true"
         },
         "freeMBytes":{
            "description":"Free space on the disk, in MBytes.",
            "type":"integer",
            "required":"false"
         },
         "unlockedMBytes":{
            "description":"Amount of recorded content that is not locked by Parental Control, in MBytes.",
            "type":"integer",
            "required":"false"
         },
         "lockedMBytes":{
            "description":"Amount of recorded content that is locked by Parental Control, in MBytes.",
            "type":"integer",
            "required":"false"
         },
         "unlockedPeriod":{
            "description":"Time periods viewing is not restricted by Parental Control.",
            "type":"string",
            "required":"false"
         },
         "lockedPeriod":{
            "description":"Time periods viewing is restricted by Parental Control.",
            "type":"string",
            "required":"false"
         }
      }
    }
    ```

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 498 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# mgmt_recording_single [/mgmt_recording_single?userId={userId}&deviceId={deviceId}&recordingId={recordingId}&idns={idns}] 
Schedule and manage one-time recordings on a DVR.

## POST 
Schedules a one-time recording on a DVR.

Note: If the program is already scheduled, a status code 409 is returned.

+ Parameters
  + userId (required, integer) ... 
    Rovi ID for the user.             
  + deviceId (required, integer) ... 
    Rovi device ID for the set-top box, which is returned by a mgmt_devices request.

+ Request  (application/json) 
  + Headers
            
            sessionId: session ID
            
  + Body
            
            {
                "$schema": "http://json-schema.org/draft-03/schema",
                "type": "object" ,
                "properties": {
                "channelSourceId": {
                    "description": "For Passport devices, the source ID for the channel in nnnnn format, an (ASCII) positive integer of any length. For iGuide devices, the program ID in source-nnnnn format.",
                    "type": "integer",
                    "required": "true"
                }, 
                "channelNumber": {
                    "description": "Channel number to record.",
                    "type": "integer",
                    "required": "false"
                },
                "startTime": {
                    "description": "UTC date and time that the program starts, specified in yyyy-MM-ddTHH:mm:ss.fffZ format.",
                    "type": "string",
                    "required": "true"                  
                },
                "startOffsetMinutes": {
                    "description": "Offset from the startTime to begin recording, in minutes.",
                    "type": "integer",
                    "required": "false",
                    "default": 0                
                },
                "endOffsetMinutes": {
                    "description": "Offset from the end of the program to stop recording, in minutes.",
                    "type": "integer",
                    "required": "false",
                    "default": 0
                },
                "durationMinutes": {
                    "description": "Duration of the program in minutes.",
                    "type": "integer",
                    "required": "true"
                },
                "autoDelete": {
                    "description": "Whether the completed recording may be deleted when space is needed on the disk: true or false.",
                    "type": "boolean",
                    "required": "false",
                    "default": "false"                  
                },
                "recordOnConflict": {
                    "description": "Whether this recording should override other scheduled recordings during the same time: true or false.",
                    "type": "boolean",
                    "required": "false",
                    "default": "false"                 
                },
                "programId": {
                  "description": "For IGuide Devices, RoviID or IGuideID for the program to record. In IGuideID namespace, programId should be sent in the format like iguide-{programId} (for e.g. iguide-12345), and in RoviID namespace, programId should be sent as an integer value. For Passport devices, Rovi ID for the program to record.",
                  "type": "string",
                  "required": "true"
                }
              }
            }

+ Response 201 (application/json)
    
    ```json
    {
      "$schema": "http://json-schema.org/draft-03/schema",
      "type": "object" ,
      "properties": {
        "recordingId":{
          "description": "Recording ID for the one-time recording.",
          "type": "integer",
          "required": "true"
        },
        "channelSourceId": {
         "description": "For Passport devices, the source ID for the channel in nnnnn format, an (ASCII) positive integer of any length. For iGuide devices, the program ID in source-nnnnn format.",
         "type": "integer",
         "required": "true"
        }, 
        "channelNumber": {
         "description": "Channel number to record.",
         "type": "integer",
         "required": "false"
        },
        "startTime": {
         "description": "UTC date and time that the program starts, specified in yyyy-MM-ddTHH:mm:ss.fffZ format.",
         "type": "string",
         "required": "true"
        },
        "startOffsetMinutes": {
         "description": "Offset from the startTime to begin recording in minutes.",
         "type": "integer",
         "required": "true"
        },
        "endOffsetMinutes": {
          "description": "Offset from the end of the program to stop recording in minutes.",
          "type": "integer",
          "required": "true"
        },
        "durationMinutes": {
         "description": "Duration of the program in minutes.",
         "type": "integer",
         "required": "true"
        },
        "programTitle": {
         "description": "Program name.",
         "type": "string",
         "required": "false"
        },
        "recordingType": {
         "description": "Type of recording: SERIES for a TV series, INSTANCE for an episode in a TV series, or ONE_TIME for other programs.",
         "type": "string",
         "required": "true",
         "default": "ONE_TIME"
        },
        "autoDelete": {
          "description": "Whether the completed recording may be deleted when space is needed on the disk: true or false.",
          "type": "boolean",
          "required": "false",
          "default": "false"                  
        },
        "recordOnConflict": {
          "description": "Whether this recording should override other scheduled recordings during the same time: true or false.",
          "type": "boolean",
          "required": "false"
        }
      }
    }
    ```

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 409 (application/json)
+ Response 429 (application/json)
+ Response 498 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

## GET 
Returns information about a scheduled one-time recording.

+ Parameters
  + userId (required, integer) ... 
    Rovi ID for the user.             
  + deviceId (required, integer) ... 
    Rovi device ID for the set-top box, which is returned by a mgmt_devices request.
  + recordingId (required, integer) ... 
    Recording ID for the scheduled recording.
  + idns (optional, string) ... 
    Namespace of source IDs. For Passport devices, specify "source". For IGuide devices, specify "iguide".

+ Request 
  + Headers
            
            sessionId: session ID
        
+ Response 200 (application/json)

    ```json
    {
        "$schema": "http://json-schema.org/draft-03/schema",
        "type": "object" ,
        "properties": {
          "recordingId":{
            "description": "Recording ID for a one-time program",
            "type": "integer",
            "required": "true"
          },
          "channelSourceId": {
           "description": "For Passport devices, the source ID for the channel in nnnnn format, an (ASCII) positive integer of any length. For iGuide devices, the program ID in source-nnnnn format.",
           "type": "integer",
           "required": "true"
          }, 
          "channelNumber": {
           "description": "Channel number to record.",
           "type": "integer"
          },
          "startTime": {
           "description": "UTC date and time that the program starts, specified in yyyy-MM-ddTHH:mm:ss.fffZ format.",
           "type": "string",
           "required": "true"
          },
          "startOffsetMinutes": {
           "description": "Offset from the startTime to begin recording in minutes.",
           "type": "integer",
           "required": "true"
          },
          "endOffsetMinutes": {
            "description": "Offset from the end of the program to stop recording in minutes.",
            "type": "integer",
            "required": "true"
          },
          "durationMinutes": {
           "description": "Duration of the program in minutes.",
           "type": "integer",
           "required": "true"
          },
          "programTitle": {
           "description": "Program name.",
           "type": "string",
           "required": "false"
          },
          "recordingType": {
           "description": "Type of recording: SERIES for a TV series, INSTANCE for an episode in a TV series, or ONE_TIME for other programs.",
           "type": "string",
           "required": "true",
           "default": "ONE_TIME"
          },
          "autoDelete": {
            "description": "Whether the completed recording may be deleted when space is needed on the disk: true or false.",
            "type": "boolean",
            "required": "false",
            "default": "false"                  
          },
          "recordOnConflict": {
            "description": "Whether this recording should override other scheduled recordings during the same time: true or false.",
            "type": "boolean",
            "required": "false"
          }
       }
    }
    ```

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 498 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

## PUT 
Revises a scheduled one-time recording on a DVR.

+ Parameters
  + userId (required, integer) ... 
    Rovi ID for the user.             
  + deviceId (required, integer) ... 
    Rovi device ID for the set-top box, as returned by a mgmt_devices request.
  + recordingId (required, integer) ... 
    Recording ID for the scheduled recording.

+ Request  (application/json) 
  + Headers
            
            sessionId: session ID
            
  + Body
            
            {
                "$schema": "http://json-schema.org/draft-03/schema",
                "type": "object" ,
                "properties": {
                "startOffsetMinutes": {
                    "description": "Offset from the startTime to begin recording in minutes.",
                    "type": "integer",
                    "required": "false",
                    "default": 0
                },
                "endOffsetMinutes": {
                    "description": "Offset from the end of the program to stop recording in minutes.",
                    "type": "integer",
                    "required": "false",
                    "default": 0
                },
                "autoDelete": {
                    "description": "Whether the completed recording may be deleted when space is needed on the disk: true or false.",
                    "type": "boolean",
                    "required": "false",
                    "default": "false"
                },
                "recordOnConflict": {
                    "description": "Whether this recording should override other scheduled recordings during the same time: true or false.",
                    "type": "boolean",
                    "required": "false",
                    "default": "false"
                }
              }
            }

+ Response 200 (application/json)
    
    ```json
    {
      "$schema": "http://json-schema.org/draft-03/schema",
      "type": "object" ,
      "properties": {
        "recordingId":{
          "description": "Recording ID for a one-time program",
          "type": "integer",
          "required": "true"
        },
        "channelSourceId": {
         "description": "For Passport devices, the source ID for the channel in nnnnn format, an (ASCII) positive integer of any length. For iGuide devices, the program ID in source-nnnnn format.",
         "type": "integer",
         "required": "true"
        }, 
        "channelNumber": {
         "description": "Channel number to record.",
         "type": "integer"
        },
        "startTime": {
         "description": "UTC date and time that the program starts, specified in yyyy-MM-ddTHH:mm:ss.fffZ format.",
         "type": "string",
         "required": "true"
        },
        "startOffsetMinutes": {
         "description": "Offset from the startTime to begin recording in minutes.",
         "type": "integer",
         "required": "true"
        },
        "endOffsetMinutes": {
          "description": "Offset from the end of the program to stop recording in minutes.",
          "type": "integer",
          "required": "true"
        },
        "durationMinutes": {
         "description": "Duration of the program in minutes.",
         "type": "integer",
         "required": "true"
        },
        "programTitle": {
         "description": "Program name.",
         "type": "string",
         "required": "false",
         "maxLength": "255"
        },
        "recordingType": {
         "description": "Type of recording: SERIES for a TV series, INSTANCE for an episode in a TV series, or ONE_TIME for other programs.",
         "type": "string",
         "required": "true",
         "default": "ONE_TIME"
        },
        "autoDelete": {
          "description": "Whether the completed recording may be deleted when space is needed on the disk: true or false.",
          "type": "boolean",
          "required": "false",
          "default": "false"                  
        },
        "recordOnConflict": {
          "description": "Whether this recording should override other scheduled recordings during the same time: true or false.",
          "type": "boolean",
          "required": "false"
        }
      }
    }
    ```

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 498 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

## DELETE 
Cancel a scheduled one-time recording on a DVR.

+ Parameters
  + userId (required, integer) ... 
    Rovi ID for the user.             
  + deviceId (required, integer) ... 
    Rovi device ID for the set-top box, as returned by a mgmt_devices request.
  + recordingId (required, integer) ... 
    Recording ID for the scheduled recording.

+ Request  (application/json) 
  + Headers
            
            sessionId: session ID
            
+ Response 204 (application/json)
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 498 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# mgmt_recordings_single [/mgmt_recordings_single?userId={userId}&deviceId={deviceId}&page={page}&size={size}&idns={idns}] 
Returns all one-time scheduled recordings associated with a user on a DVR.

## GET

+ Parameters
  + userId (required, integer) ... 
    Rovi ID for the user.             
  + deviceId (required, integer) ... 
    Rovi device ID for the set-top box, as returned by a mgmt_devices request.
  + page (optional, integer, `1`) ... 
    Page to be fetched.
  + size (optional, integer) ... 
    Number of recordings in a page.
  + idns (optional, string) ... 
    Namespace of source IDs. For Passport devices, specify "source". For IGuide devices, specify "iguide".

+ Request 
  + Headers
            
            sessionId: session ID
        
+ Response 200 (application/json)

    ```json
    {
        "$schema": "http://json-schema.org/draft-03/schema",
        "type": "object" ,
        "properties": {
          "recordings": [ 
            {
              "channelSourceId": {
                "description": "For Passport devices, the source ID for the channel in nnnnn format, an (ASCII) positive integer of any length. For iGuide devices, the program ID in source-nnnnn format.",
                "type": "integer",
                "required": "true"
              }, 
              "channelNumber": {
                "description": "Channel number to record.",
                "type": "integer",
                "required": "false"
              },
              "durationMinutes": {
                "description": "Duration of the program in minutes.",
                "type": "integer",
                "required": "true"
              },
              "endOffsetMinutes": {
                "description": "Offset from the end of the program to stop recording in minutes.",
                "type": "integer",
                "required": "true"
              },
              "recordingId": {
                "description": "Recording ID for a one-time program",
                "type": "integer",
                "required": "true"
              },
              "programTitle": {
                "description": "Program name.",
                "type": "string",
                "required": "false"
              },
              "recordingStatus": {
                "description": "Recording status: Recorded. Will be recorded. Recorded and watched. Skipped conflict. Failed.",
                "type": "string",
                "required": "true"
              },
              "recordingType": {
                "description": "Type of recording: SERIES for a TV series, INSTANCE for an episode in a TV series, or ONE_TIME for other programs.",
                "type": "string",
                "required": "true",
                "default": "ONE_TIME"
              },
              "startOffsetMinutes": {
                "description": "Offset from the startTime to begin recording in minutes",
                "type": "integer",
                "required": "true"
              },
              "startTime": {
                "description": "UTC date and time that the program starts, specified in yyyy-MM-ddTHH:mm:ss.fffZ format.",
                "type": "string",
                "required": "true"
              },
              "autoDelete": {
                "description": "Whether the completed recording may be deleted when space is needed on the disk: true or false.",
                "type": "boolean",
                "required": "false",
                "default": "false"                  
              },
              "recordOnConflict": {
                "description": "Whether this recording should override other scheduled recordings during the same time: true or false.",
                "type": "boolean",
                "required": "false"
              }
            } 
          ]
       }
    }
    ```

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 498 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# mgmt_recording_series [/mgmt_recording_series?userId={userId}&deviceId={deviceId}&recordingId={recordingId}&idns={idns}] 
Schedule and manage TV series recordings on a DVR.

## POST 
Schedules a TV series recording on a DVR.

Note: If the series is already scheduled, a status code 409 is returned.

+ Parameters
  + userId (required, integer) ... 
    Rovi ID for the user.             
  + deviceId (required, integer) ... 
    Rovi device ID for the set-top box, as returned by a mgmt_devices request.

+ Request  (application/json) 
  + Headers
            
            sessionId: session ID
            
  + Body
            
            {
                "$schema": "http://json-schema.org/draft-03/schema",
                "type": "object" ,
                "properties": {
                "channelSourceId": {
                    "description": "For Passport devices, the source ID for the channel in nnnnn format, an (ASCII) positive integer of any length. For iGuide devices, the program ID in source-nnnnn format.",
                    "type": "integer",
                    "required": "true"
                }, 
                "channelNumber": {
                    "description": "Channel number to record.",
                    "type": "integer",
                    "required": "false"
                },
                "startTime": {
                    "description": "UTC date and time that the program starts, specified in yyyy-MM-ddTHH:mm:ss.fffZ format.",
                    "type": "string",
                    "required": "true"                  
                },
                "startOffsetMinutes": {
                    "description": "Offset from the startTime to begin recording in minutes.",
                    "type": "integer",
                    "required": "false",
                    "default": 0                
                },
                "endOffsetMinutes": {
                    "description": "Offset from the end of the program to stop recording in minutes.",
                    "type": "integer",
                    "required": "false",
                    "default": 0
                },
                "durationMinutes": {
                    "description": "Duration of the program in minutes.",
                    "type": "integer",
                    "required": "true"
                },
                "programId": {
                    "description": "Rovi ID of the series to record.",
                    "type": "string",
                    "required": "true"              
                },
                "channelType": {
                    "description": "Type of channel to record: ANY for any channel, ANY_HD for any high definition channel, ANY_SD for any standard definition channel, or SPECIFIC for only the channelNumber specified.",
                    "type": "string",
                    "required": "false",
                    "default": "SPECIFIC"                
                },
                "episodesToKeep": {
                    "description": "How many episodes to keep before allowing the earliest recording to be deleted.",
                    "type": "integer",
                    "required": "false"                  
                },
                "thisTimeAiringOnly": {
                    "description": "Whether to record at the specified time only: true or false. A value of false catches a series whenever it airs.",
                    "type": "boolean",
                    "required": "false",
                    "default": "false"                  
                },
                "episodeType": {
                    "description": "Type of episodes in a TV series to record: NEW for new episodes only, or ALL for both new and repeat.",
                    "type": "string",
                    "required": "false",
                    "default": "NEW"                 
                },
                "autoDelete": {
                    "description": "Whether the completed recording may be deleted when space is needed on the disk: true or false.",
                    "type": "boolean",
                    "required": "false",
                    "default": "false"                  
                },
                "recordingDays": {
                    "description": "Which days of the week to record on.",
                    "type": [ "string", "array" ],
                    "required": false,
                    "default": ["SUNDAY" ,"MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY"]
                },
                "positionInPriorityList":{
                    "description": "Priority of the recording: Top or Bottom.",
                    "type": "string",
                    "required": "false",
                    "default": "TOP"
                }
              }
            }         

+ Response 201 (application/json)
    
    ```json
    {
      "$schema": "http://json-schema.org/draft-03/schema",
      "type": "object" ,
      "properties": {
        "recordingId":{
          "description": "Recording ID for a TV series.",
          "type": "integer",
          "required": "true"
        },
        "channelSourceId": {
          "description": "The source ID for the channel in nnnnn format, an (ASCII) positive integer of any length.",
          "type": "integer",
          "required": "true"
        }, 
        "channelNumber": {
          "description": "Channel number to record.",
          "type": "integer",
          "required": "false"
        },
        "startTime": {
          "description": "UTC date and time that the program starts, specified in yyyy-MM-ddTHH:mm:ss.fffZ format.",
          "type": "string",
          "required": "true"
        },
        "startOffsetMinutes": {
          "description": "Offset from the startTime to begin recording in minutes.",
          "type": "integer",
          "required": "true"
        },
        "endOffsetMinutes": {
          "description": "Offset from the end of the program to stop recording in minutes.",
          "type": "integer",
          "required": "true"
        },
        "durationMinutes": {
          "description": "Duration of the program in minutes.",
          "type": "integer",
          "required": "true"
        },
        "programTitle": {
          "description": "Program name.",
          "type": "string",
          "required": "false"
        },
        "recordingType": {
          "description": "Type of recording: SERIES for a TV series, INSTANCE for an episode in a TV series, or ONE_TIME for other programs.",
          "type": "string",
          "required": "true",
          "default": "SERIES"
        },
        "channelType": {
          "description": "Type of channel to record: ANY for any channel, ANY_HD for any high definition channel, ANY_SD for any standard definition channel, or SPECIFIC for only the channelNumber specified.",
          "type": "string",
          "required": "true"
        },
        "episodesToKeep": {
          "description": "How many episodes to keep before allowing the earliest recording to be deleted.",
          "type": "integer",
          "required": "true"
        },
        "thisTimeAiringOnly": {
          "description": "Whether to record at the specified time only: true or false.",
          "type": "boolean",
          "required": "true"
        },
        "episodeType": {
          "description": "Type of episodes in a TV series to record: NEW for new episodes only, or ALL for both new and repeat.",
          "type": "string",
          "required": "true"
        },
        "autoDelete": {
          "description": "Whether the completed recording may be deleted when space is needed on the disk: true or false.",
          "type": "boolean",
          "required": "true"
        },
        "recordingDays": {
          "description": "Which days of the week to record on.",
          "type": ["string", "array"],
          "required": false          
        },
        "positionInPriorityList":{
          "description": "Priority of the recording: Top or Bottom.",
          "type": "string",
          "required": "true"
        }
      }
    }
    ```

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 409 (application/json)
+ Response 429 (application/json)
+ Response 498 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

## GET 
Returns information about a scheduled TV series recording.

+ Parameters
  + userId (required, integer) ... 
    Rovi ID for the user.             
  + deviceId (required, integer) ... 
    Rovi device ID for the set-top box, as returned by a mgmt_devices request.
  + recordingId (required, integer) ... 
    Recording ID for the scheduled recording.
  + idns (optional, string) ... 
    Namespace of source IDs. For Passport devices, specify "source". For IGuide devices, specify "iguide".

+ Request 
  + Headers
            
            sessionId: session ID
        
+ Response 200 (application/json)

    ```json
    {
      "$schema": "http://json-schema.org/draft-03/schema",
      "type": "object" ,
      "properties": {
        "recordingId":{
          "description": "Recording ID for a TV series.",
          "type": "integer",
          "required": "true"
        },
        "channelSourceId": {
          "description": "For Passport devices, the source ID for the channel in nnnnn format, an (ASCII) positive integer of any length. For iGuide devices, the program ID in source-nnnnn format.",
          "type": "integer",
          "required": true
        }, 
        "channelNumber": {
          "description": "Channel number to record.",
          "type": "integer",
          "required": false
        },
        "startTime": {
          "description": "UTC date and time that the program starts, specified in yyyy-MM-ddTHH:mm:ss.fffZ format.",
          "type": "string",
          "required": "true"
        },
        "startOffsetMinutes": {
          "description": "Offset from the startTime to begin recording in minutes.",
          "type": "integer",
          "required": "true"
        },
        "endOffsetMinutes": {
          "description": "Offset from the end of the program to stop recording in minutes.",
          "type": "integer",
          "required": "true"
        },
        "durationMinutes": {
          "description": "Duration of the program in minutes.",
          "type": "integer",
          "required": "true"
        },
        "programTitle": {
          "description": "Program name.",
          "type": "string",
          "required": "false"
        },
        "recordingType": {
          "description": "Type of recording: SERIES for a TV series, INSTANCE for an episode in a TV series, or ONE_TIME for other programs.",
          "type": "string",
          "required": "true",
          "default": "SERIES"
        },
        "channelType": {
          "description": "Type of channel to record: ANY for any channel, ANY_HD for any high definition channel, ANY_SD for any standard definition channel, or SPECIFIC for only the channelNumber specified.",
          "type": "string",
          "required": "true"
        },
        "episodesToKeep": {
          "description": "How many episodes to keep before allowing the earliest recording to be deleted.",
          "type": "integer",
          "required": "true"
        },
        "thisTimeAiringOnly": {
          "description": "Whether to record at the specified time only: true or false.",
          "type": "boolean",
          "required": "true"
        },
        "episodeType": {
          "description": "Type of episodes in a TV series to record: NEW for new episodes only, or ALL for both new and repeat.",
          "type": "string",
          "required": "true"
        },
        "autoDelete": {
          "description": "Whether the completed recording may be deleted when space is needed on the disk: true or false.",
          "type": "boolean",
          "required": "true"
        },
        "recordOnConflict": {
          "description": "Whether this recording should override other scheduled recordings during the same time: true or false.",
          "type": "boolean",
          "required": "false"
        },
        "recordingDays": {
          "description": "Which days of the week to record on.",
          "type": ["string", "array"],
          "required": true
        }
      }
    }
    ```

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 498 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

## PUT
Revises a scheduled TV series recording on a DVR.

+ Parameters
  + userId (required, integer) ... 
    Rovi ID for the user.             
  + deviceId (required, integer) ... 
    Rovi device ID for the set-top box, as returned by a mgmt_devices request.
  + recordingId (required, integer) ... 
    Recording ID for the scheduled recording.

+ Request  (application/json) 
  + Headers
            
            sessionId: session ID
            
  + Body
            
            {
                "$schema": "http://json-schema.org/draft-03/schema",
                "type": "object" ,
                "properties": {
                "channelType": {
                    "description": "Type of channel to record: ANY for any channel, ANY_HD for any high definition channel, ANY_SD for any standard definition channel, or SPECIFIC for only the channelNumber specified.",
                    "type": "string",
                    "required": "true"
                },
                "episodesToKeep": {
                    "description": "How many episodes to keep before allowing the earliest recording to be deleted.",
                    "type": "integer",
                    "required": "true"
                },
                "recordingDays": {
                    "description": "Which days of the week to record on.",
                    "type": [ "string", "array" ],
                    "required": false
                },
                "endOffsetMinutes": {
                    "description": "Offset from the end of the program to stop recording in minutes.",
                    "type": "integer",
                    "required": "false"
                },
                "programTitle": {
                    "description": "Program name.",
                    "type": "string",
                    "required": "false",
                    "maxLength": "255"                
                },
                "startOffsetMinutes": {
                    "description": "Offset from the startTime to begin recording in minutes.",
                    "type": "integer",
                    "required": "false"              
                },
                "autoDelete": {
                    "description": "Whether the completed recording may be deleted when space is needed on the disk: true or false.",
                    "type": "boolean",
                    "required": "false"                
                },
                "episodeType": {
                    "description": "Type of episodes in a TV series to record: NEW for new episodes only, or ALL for both new and repeat.",
                    "type": "string",
                    "required": "false"
                },
                "thisTimeAiringOnly": {
                    "description": "Whether to record at the specified time only: true or false. A value of false catches a series whenever it airs.",
                    "type": "boolean",
                    "required": "false"
                }
              }
            }         

+ Response 200 (application/json)
    
    ```json
    {
      "$schema": "http://json-schema.org/draft-03/schema",
      "type": "object" ,
      "properties": {
        "recordingId":{
          "description": "Recording ID for a TV series.",
          "type": "integer",
          "required": "true"
        },
        "channelSourceId": {
          "description": "For Passport devices, the source ID for the channel in nnnnn format, an (ASCII) positive integer of any length. For iGuide devices, the program ID in source-nnnnn format.",
          "type": "integer",
          "required": "true"
        }, 
        "channelNumber": {
          "description": "Channel number to record.",
          "type": "integer",
          "required": "false"
        },
        "startTime": {
          "description": "UTC date and time that the program starts, specified in yyyy-MM-ddTHH:mm:ss.fffZ format.",
          "type": "string",
          "required": "true"
        },
        "startOffsetMinutes": {
          "description": "Offset from the startTime to begin recording in minutes.",
          "type": "integer",
          "required": "true"
        },
        "endOffsetMinutes": {
          "description": "Offset from the end of the program to stop recording in minutes.",
          "type": "integer",
          "required": "true"
        },
        "durationMinutes": {
          "description": "Duration of the program in minutes.",
          "type": "integer",
          "required": "true"
        },
        "programTitle": {
          "description": "Program name.",
          "type": "string",
          "required": "false"
        },
        "recordingType": {
          "description": "Type of recording: SERIES for a TV series, INSTANCE for an episode in a TV series, or ONE_TIME for other programs.",
          "type": "string",
          "required": "true",
          "default": "SERIES"
        },
        "channelType": {
          "description": "Type of channel to record: ANY for any channel, ANY_HD for any high definition channel, ANY_SD for any standard definition channel, or SPECIFIC for only the channelNumber specified.",
          "type": "string",
          "required": "true"
        },
        "episodesToKeep": {
          "description": "How many episodes to keep before allowing the earliest recording to be deleted.",
          "type": "integer",
          "required": "true"
        },
        "thisTimeAiringOnly": {
          "description": "Whether to record at the specified time only: true or false. A value of false catches a series whenever it airs.",
          "type": "boolean",
          "required": "true"
        },
        "episodeType": {
          "description": "Type of episodes in a TV series to record: NEW for new episodes only, or ALL for both new and repeat.",
          "type": "string",
          "required": "true"
        },
        "autoDelete": {
          "description": "Whether the completed recording may be deleted when space is needed on the disk: true or false.",
          "type": "boolean",
          "required": "true"
        },
        "recordOnConflict": {
          "description": "Whether this recording should override other scheduled recordings during the same time: true or false.",
          "type": "boolean",
          "required": "false"
        },
        "recordingDays": {
          "description": "Which days of the week to record on.",
          "type": ["string", "array"],
          "required": true
        }
      }
    }
    ```

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 498 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

## DELETE 
Cancels a TV series recording schedule.

+ Parameters
  + userId (required, integer) ... 
    Rovi ID for the user.             
  + deviceId (required, integer) ... 
    Rovi device ID for the set-top box, as returned by a mgmt_devices request.
  + recordingId (required, integer) ... 
    Recording ID for the scheduled recording.

+ Request  (application/json) 
  + Headers
            
            sessionId: session ID
            
+ Response 204 (application/json)
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 498 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# mgmt_recordings_series [/mgmt_recordings_series?userId={userId}&deviceId={deviceId}&page={page}&size={size}&idns={idns}] 
Returns information about the TV series scheduled for recording on a DVR by a user.

## GET

+ Parameters
  + userId (required, integer) ... 
    Rovi ID for the user.             
  + deviceId (required, integer) ... 
    Rovi device ID for the set-top box, as returned by a mgmt_devices request.
  + page (optional, integer, `1`) ... 
    Page to be fetched.
  + size (optional, integer) ... 
    Number of items per page.
  + idns (optional, string) ... 
    Namespace of source IDs. For Passport devices, specify "source". For IGuide devices, specify "iguide".

+ Request 
  + Headers
            
            sessionId: session ID
        
+ Response 200 (application/json)

    ```json
    {
        "$schema": "http://json-schema.org/draft-03/schema",
        "type": "object" ,
        "properties": {
          "recordings": [ 
            {
              "channelNumber": {
                "description": "Channel number to record.",
                "type": "integer",
                "required": "false"
              },
              "channelSourceId": {
                "description": "The source ID for the channel in nnnnn format, an (ASCII) positive integer of any length.",
                "type": "integer",
                "required": "true"
              },
              "durationMinutes": {
                "description": "Duration of the program in minutes.",
                "type": "integer",
                "required": "true"
              },
              "endOffsetMinutes": {
                "description": "Offset from the end of the program to stop recording, in minutes.",
                "type": "integer",
                "required": "true"
              },
              "endTime": {
                "description": "UTC time of the end of the first recording of the series, specified in yyyy-MM-ddThh:mm:ss.fffZ format.",
                "type": "string",
                "required": "false"
              },
              "recordingId": {
                "description": "Recording ID for the TV series on the set-top box.",
                "type": "integer",
                "required": "true"
              },
              "programTitle": {
                "description": "Program name.",
                "type": "string",
                "required": "false"
              },
              "startOffsetMinutes": {
                "description": "Offset from the start of the program to begin recording, in minutes.",
                "type": "integer",
                "required": "true"
              },
              "startTime": {
                "description": "UTC time of the start of the first recording of the series, specified in yyyy-MM-ddThh:mm:ss.fffZ format.",
                "type": "string",
                "required": "true"
              }
            } 
          ]
       }
    }
    ```

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 498 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# mgmt_session [/mgmt_session] 
Returns the first authorization credentials for a user login on a Remote Access app.

## GET 

+ Response 200 (application/json)
   
    ```json
    {
      "$schema": "http://json-schema.org/draft-03/schema",
      "type": "object",
      "properties": {
        "authTempToken": {
          "description": "The oauth_token returned from the MSO Request Token URL.",
          "type": "UUID"
        },
        "authTempTokenSecret": {
          "description": "The oauth_token_secret returned from the MSO Request Token URL.",
          "type": "UUID"
        },
        "authorizeURL": {
          "description": "The MSO Authorization URL, which the app calls to log into the MSO login page directly.",
          "type": "URL"
        },
        "redirectURL": {
          "description": "The MSO Redirect URL, which the app calls to log into an out-of-band MSO login page. Called by a remote access app that uses a browser to log in.",
          "type": "URL"
        },
        "callbackURL": {
          "description": "The MSO callback URL, which the app may call after a successful log in.",
          "type": "URL"
        }
      }
    }
    ```
        
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# mgmt_session_login [/mgmt_session_login?userId={userId}] 
Passes OAuth information to Rovi during a user login to the Remote Services application.

## POST 

+ Parameters
  + userId (required, integer) ... 
    Rovi ID for the user.

+ Request (application/json)
  + Headers
            
            sessionId: session ID

+ Response 200 (application/json)

    ```json
    {
      "$schema": "http://json-schema.org/draft-03/schema",
        "type": "object",
        "properties": {
          "sessionId": {
              "description": "Session ID, a UUID to be passed by other calls during a user session on the Remote Access app.",
              "type": "string",
              "example": "7fb7c7a6-d369-4301-a3a5-a183defe96d9"
          }
        }
    }
    ```

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# mgmt_session_logout [/mgmt_session_logout?userId={userId}] 
Ends a user session on a Remote Services application.

## DELETE 

+ Parameters
  + userId (required, integer) ... 
    Rovi ID for the user.

+ Request (application/json)
  + Headers
            
            sessionId: session ID

+ Response 204 (application/json)
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 498 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# mgmt_tune [/mgmt_tune?deviceId={deviceId}&userId={userId}] 
Changes the channel on a set-top box.

## PUT 
Changes the channel on a set-top box. If the channel is locked by parental control, the user must provide the parental PIN to tune into that channel.

+ Parameters
  + deviceId (required, integer) ... 
    Rovi device ID for the set-top box, which is returned by the mgmt_devices request.
  + userId (required, integer) ... 
    Rovi ID for the user.


+ Request (application/json)
  + Headers
            
            sessionId: session ID
            
  + Body
  
        ```json
        {
        "$schema": "http://json-schema.org/draft-03/schema",
        "type": "object" ,
        "properties": {
            "channelNumber": {
                "description": "Channel number to tune to.",
                "type": "integer",
                "required": "false"
            }, 
            "channelSourceId": {
                "description": "For Passport devices, the source ID for the channel in nnnnn format, an (ASCII) positive integer of any length. For iGuide devices, the program ID in source-nnnnn format.",
                "type": "string",
                "required": "true"
            },
            "actionType": {
                "description": "Action to take: WEBDVR_OVERRIDE (Override conflicts when executing remote request.), WEBDVR_SUPPRESS_GRAPHICS (Suppress the channel banner.), WEBDVR_ALL (Set both flags.), WEBDVR_OFF (No flags set. Default.).",
                "type": "string",
                "required": "false"
            },
            "parentalControlPIN": {
                "description": "Parental control PIN, which is needed to tune to a channel that is blocked by parental control. A positive integer stated as a string.",
                "type": "string",
                "required": "false"
            }
          }
        }
        ```
    
 + Schema
  
            {
              "$schema": "http://json-schema.org/draft-03/schema",
              "type": "object" ,
              "properties": {
                "channelNumber": {
                    "description": "Channel number to tune to.",
                    "type": "integer",
                    "required": "false"
                }, 
                "channelSourceId": {
                    "description": "For Passport devices, the source ID for the channel in nnnnn format, an (ASCII) positive integer of any length. For iGuide devices, the program ID in source-nnnnn format.",
                    "type": "integer",
                    "required": "true"
                },
                "actionType": {
                    "description": "Action to take: WEBDVR_OVERRIDE (Override conflicts when executing remote request.), WEBDVR_SUPPRESS_GRAPHICS (Suppress the channel banner.), WEBDVR_ALL (Set both flags.), WEBDVR_OFF (No flags set. Default.).",
                    "type": "string",
                    "required": "false"
                },
                "parentalControlPIN": {
                    "description": "Parental PIN to tune to a channel that is blocked by parental control.",
                    "type": "integer",
                    "required": "false"
                }
              }
            }

+ Response 200 (application/json)

    ```json
    {
      "$schema": "http://json-schema.org/draft-03/schema",
      "type": "object",
      "properties": {
        "channelNumber": {
          "description": "Channel number tuned to.",
          "type": "integer"
        },
        "channelSourceId": {
          "description": "For Passport devices, the source ID for the channel in nnnnn format, an (ASCII) positive integer of any length. For iGuide devices, the program ID in source-nnnnn format.",
          "type": "integer"
        },
        "actionType": {
          "description": "Action taken along with the operation of tuning to the requested channel.",
          "type": "string"
        },
        "parentalControlPIN": {
          "description": "Parental control PIN used to tune the channel.",
          "type": "integer"
        },
        "isForegroundTuner": {
          "description": "Whether the tuner is the foreground tuner.",
          "type": "boolean"
        },
        "roviID": {
          "description": "Rovi ID for the user.",
          "type": "integer"
        },
        "message": {
          "description": "Result message to display to the user.",
          "type": "string"
        }
      }
    }
    ```

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 429 (application/json)
+ Response 498 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# mgmt_user [/mgmt_user] 
Creates a Rovi user account for a customer of an MSO along with associated set-top box information, but without personal identifying information. Called by the MSO.

## POST 

+ Request (application/json)
  + Headers
            
            sessionId: session ID
            
  + Body
  
        ```json
        {
          "$schema": "http://json-schema.org/draft-03/schema",
          "type": "object" ,
          "properties": {
            "externalGroupId": {
                "description": "MSO ID for the household associated with the user.",
                "type": "string",
                "maxLength": "100"
            }, 
            "externalUserId": {
                "description": "MSO ID for the user.",
                "type": "string",
                "minLength":  "1",
                "maxLength": "100",
                "required": "true"
            },
            "isMaster": {
                "description": "Whether the user is master user for the household: true or false.",
                "type": "boolean"
            },
            "devices": [
              {
                "description": "Information about each set-top box at the user's location. Rovi collects additional details from the headend.",
                "type": "object",
                "repeat": "true",
                "required": "false",
                "properties": {
                  "deviceName": {
                    "description": "MSO name for the set-top box.",
                    "type": "string"             
                  },
                  "externalDeviceId":{
                    "description": "Unique ID for the set-top box, commonly a MAC address. MAC addresses for CE set-top boxes are 12 hex characters that are left padded with zeros and contain no special characters such as spaces, colons, or dashes.",
                    "type": "string",
                    "required": "true",
                    "maxLength": "48"
                  },
                  "externalProxyId": {
                    "description": "ID of the RAccess server or Flux server that communicates to the set-top box. Rovi Global Services can provide this ID for each server in the system.",
                    "type": "string",
                    "required": "true",
                    "minLength": "2",
                    "maxLength": "100"
                  },
                  "channelLineupId": {
                    "description": "Rovi ID for the television service that the MSO provides to the user.",
                    "type": "integer",
                    "required": "false"                  
                  }
                } 
              }]
          }
        }         
        ```
    
 + Schema
  
            {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object" ,
            "properties": {
                "externalGroupId": {
                    "description": "MSO ID for the household associated with the user.",
                    "type": "string",
                    "maxLength": "100"
                }, 
                "externalUserId": {
                    "description": "MSO ID for the user.",
                    "type": "string",
                    "minLength":  "1",
                    "maxLength": "100",
                    "required": "true"
                },
                "isMaster": {
                    "description": "Whether the user is master user for the household: true or false.",
                    "type": "boolean"
                },
                "devices": [
                {
                    "description": "Information about each set-top box at the user's location. Rovi collects additional details from the headend.",
                    "type": "object",
                    "repeat": "true",
                    "required": "false",
                    "properties": {
                    "deviceName": {
                        "description": "MSO name for the set-top box.",
                        "type": "string"             
                    },
                    "externalDeviceId":{
                        "description": "Unique ID for the set-top box, commonly a MAC address. MAC addresses for CE set-top boxes are 12 hex characters that are left padded with zeros and contain no special characters such as spaces, colons, or dashes.",
                        "type": "string",
                        "required": "true",
                        "maxLength": "48"
                    },
                    "externalProxyId": {
                        "description": "ID of the RAccess server or Flux server that communicates to the set-top box. Rovi Global Services can provide this ID for each server in the system.",
                        "type": "string",
                        "required": "true",
                        "minLength": "2",
                        "maxLength": "100"
                    },
                    "channelLineupId": {
                        "description": "Rovi ID for the television service that the MSO provides to the user.",
                        "type": "integer",
                        "required": "false"                  
                    }
                    } 
                }]
            }
            }         

+ Response 201 (application/json)

    ```json
    {
      "$schema": "http://json-schema.org/draft-03/schema",
      "type": "object",
      "properties": {
        "userId": {
          "description": "Rovi ID for the user.",
          "type": "integer"
        },
        "externalGroupId": {
          "description": "MSO ID for the household associated with the user, as supplied by the MSO.",
          "type": "string"
        },
        "externalUserId": {
          "description": "MSO ID for the user, as supplied by the MSO.",
          "type": "string"
        },
        "isDeleted": {
          "description": "Whether the user account has been deleted: true or false.",
          "type": "boolean"
        },
        "isMaster": {
          "description": "Whether the user is master for the household.",
          "type": "boolean"
        },
        "isDuplicate": {
          "description": "Whether the user is duplicate.",
          "type": "boolean"
        },
        "groupId": {
          "description": "Rovi ID for the externalGroupId.",
          "type": "integer"
        }
      }
    }
    ```

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 409 (application/json)

        {
        description: "Requested user already exists."
        }
        
+ Response 429 (application/json)
+ Response 498 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# pin_password_change [/pin_password_change?username={username}] 
Changes the user password to the Remote Access User Management System at the user's request.

## PUT

+ Parameters
  + username (required, string) ... 
    Username of the user.

+ Request (application/json)
  + Headers
            
            sessionId: session ID
            
  + Body

        ```json
        {
          "$schema": "http://json-schema.org/draft-03/schema",
          "type": "object" ,
          "properties": {
            "newPassword": {
                "description": "New password, from 6 to 25 characters. Requires at least one digit, one lowercase alpha, one uppercase alpha, one special character, and no spaces.",
                "type": "string",
                "minLength": "6",
                "maxLength": "25",
                "required": "true"
            },
            "oldPassword": {
                "description": "Old password, which is validated.",
                "type": "string",
                "minLength": "6",
                "maxLength": "25",
                "required": "true"
            }
          }
        }
        ```

 + Schema
  
            {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object" ,
            "properties": {
                "newPassword": {
                    "description": "New password, from 6 to 25 characters. Requires at least one digit, one lowercase alpha, one uppercase alpha, one special character, and no spaces.",
                    "type": "string",
                    "minLength": "6",
                    "maxLength": "25",
                    "required": "true"
                },
                "oldPassword": {
                    "description": "Old password, which is validated.",
                    "type": "string",
                    "minLength": "6",
                    "maxLength": "25",
                    "required": "true"
                }
            }
            }
 
+ Response 202 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 409 (application/json)
+ Response 429 (application/json)
+ Response 498 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# pin_password_forgot [/pin_password_forgot?username={username}] 
Authorizes the pin_password_reset request when the user forgets the password but correctly answers the security questions chosen during sign up.

## POST

+ Parameters
  + username (required, string) ... 
    E-mail address of the user.

+ Request (application/json)
  + Body

        ```json
        {
          "$schema": "http://json-schema.org/draft-03/schema",
          "type": "object" ,
          "properties": {
            "userSecurityQuestionsAnswers": [
              {
                "description": "Security question ID and answer. Number of security questions is configurable in the database.",
                "type": "object",
                "repeat": "true",
                "required": "true",
                "properties": {
                  "securityQuestionId": {
                    "description": "Security question ID.",
                    "type": "integer",
                    "required": "true"           
                  },
                  "securityAnswer":{
                    "description": "Answer to the security question.",
                    "type": "string",
                    "required": "true",
                    "minLength": "1",
                    "maxLength": "255"
                  }
                } 
              }]
          }
        }
        ```

 + Schema
  
            {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object" ,
            "properties": {
                "userSecurityQuestionsAnswers": [
                {
                    "description": "Security question ID and answer. Number of security questions is configurable in the database.",
                    "type": "object",
                    "repeat": "true",
                    "required": "true",
                    "properties": {
                    "securityQuestionId": {
                        "description": "Security question ID.",
                        "type": "integer",
                        "required": "true"           
                    },
                    "securityAnswer":{
                        "description": "Answer to the security question.",
                        "type": "string",
                        "required": "true",
                        "minLength": "1",
                        "maxLength": "255"
                    }
                    } 
                }]
              }
            }
 
+ Response 200 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 409 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# pin_password_reset [/pin_password_reset?username={username}] 
Resets a user password after authentication by the pin_password_forgot request.

## PUT

+ Parameters
  + username (required, string) ... 
    Username of the user.

+ Request (application/json)
  + Body

        ```json
        {
          "$schema": "http://json-schema.org/draft-03/schema",
          "type": "object" ,
          "properties": {
            "newPassword": {
                "description": "New password, from 6 to 25 characters. Requires at least one digit, one lowercase alpha, one uppercase alpha, one special character, and no spaces.",
                "type": "string",
                "minLength": "6",
                "maxLength": "25",
                "required": "true"
            }
          }
        }
        ```

 + Schema
  
            {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object" ,
            "properties": {
                "newPassword": {
                    "description": "New password, from 6 to 25 characters. Requires at least one digit, one lowercase alpha, one uppercase alpha, one special character, and no spaces.",
                    "type": "string",
                    "minLength": "6",
                    "maxLength": "25",
                    "required": "true"
                }
            }
            }
 
+ Response 202 (application/json)

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 409 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# pin_password_security_choices [/pin_password_security_choices] 
Returns a list of security questions available for authentication purposes on the Remote Access User Management System.

## GET

+ Response 200 (application/json)

    ```json
    {
        "$schema": "http://json-schema.org/draft-03/schema",
        "type": "object" ,
        "properties": {
           "securityQuestions":  [
              { 
                  "description": "Security question and ID.",
                  "type": "object",
                  "required": "true",
                     "properties": {
                        "id": {
                           "description": "Security question ID.",
                           "type": "integer",
                           "required": "true"           
                        },
                        "question":{
                           "description": "Security question.",
                           "type": "string",
                           "required": "true"
                        }
                    }
                }
            ]
        }
    }
    ```

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 409 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# pin_user [/pin_user]
Creates MSO and Rovi user accounts on the Remote Access User Management System, along with associated set-top box information.

## POST

+ Request (application/json)
  + Body

        ```json
        {
          "$schema": "http://json-schema.org/draft-03/schema",
          "type": "object",
          "properties": {
            "userName": {
                "description": "E-mail address for the user",
                "type": "string",
                "minLength": "5",
                "maxLength": "64",
                "required": "true"
            }, 
            "userPassword": {
                "description": "Password for the user, from 6 to 25 characters. Requires at least one digit, one lowercase alpha, one uppercase alpha, one special character, and no spaces.",
                "type": "string",
                "minLength": "6",
                "maxLength": "25",
                "required": "true"
            },
            "userSecurityQuestionsAnswers": [
              {
                "description": "Security question and answer. Number of security questions is configurable in the database.",
                "type": "object",
                "repeat": "true",
                "required": "true",
                "properties": {
                  "securityQuestionId": {
                    "description": "Security question ID.",
                    "type": "integer",
                    "required": "true"           
                  },
                  "securityAnswer":{
                    "description": "Answer to the security question.",
                    "type": "string",
                    "required": "true",
                    "minLength": "1",
                    "maxLength": "255"
                  }
                } 
             }]
          }
        }
        ```

 + Schema
  
            {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
                "userName": {
                    "description": "E-mail address for the user",
                    "type": "string",
                    "minLength": "5",
                    "maxLength": "64",
                    "required": "true"
                }, 
                "userPassword": {
                    "description": "Password for the user, from 6 to 25 characters. Requires at least one digit, one lowercase alpha, one uppercase alpha, one special character, and no spaces.",
                    "type": "string",
                    "minLength": "6",
                    "maxLength": "25",
                    "required": "true"
                },
                "userSecurityQuestionsAnswers": [
                {
                    "description": "Security question and answer. Number of security questions is configurable in the database.",
                    "type": "object",
                    "repeat": "true",
                    "required": "true",
                    "properties": {
                    "securityQuestionId": {
                        "description": "Security question ID.",
                        "type": "integer",
                        "required": "true"           
                    },
                    "securityAnswer":{
                        "description": "Answer to the security question.",
                        "type": "string",
                        "required": "true",
                        "minLength": "1",
                        "maxLength": "255"
                    }
                    } 
                 }]
              }
            }
 
+ Response 200 (application/json)

    ```json
    {
        "$schema": "http://json-schema.org/draft-03/schema",
        "type": "object",
        "properties": {
            "userId": {
               "description": "User ID for the new user.",
               "type": "integer",
               "required": "true"                
            },
            "externalUserId": {
               "description": "Rovi ID for the new user.",
               "type": "integer",
               "required": "true"                
            },
            "userName": {
               "description": "User name of the new user.",
               "type": "string",
               "required": "true"                
            }
        }
    }
    ```

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 409 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# pin_user_login [/pin_user_login]
Logs a user in to the Remote Access User Management System.

## POST

+ Request (application/json)
  + Body

        ```json
        {
          "$schema": "http://json-schema.org/draft-03/schema",
          "type": "object",
          "properties": {
             "userName": {
                "description": "E-mail address for the user.",
                "type": "string",
                "minLength": "5",
                "maxLength": "64",
                "required": "true"
             }, 
             "userPassword": {
                "description": "Password for the user.",
                "type": "string",
                "minLength": "6",
                "maxLength": "25",
                "required": "true"
             },
             "requestToken": {
                "description": "Session ID, a GUID returned by GET session(), which is called by the Remote Access app.",
                "type": "UUID",
                "required": "true" 
             }
           }
        }
        ```

 + Schema
  
            {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
                "userName": {
                    "description": "E-mail address for the user",
                    "type": "string",
                    "minLength": "5",
                    "maxLength": "64",
                    "required": "true"
                }, 
                "userPassword": {
                    "description": "Password for the user.",
                    "type": "string",
                    "minLength": "6",
                    "maxLength": "25",
                    "required": "true"
                },
                "requestToken": {
                    "description": "Session ID, a GUID returned by GET session(), which is called by the Remote Access app.",
                    "type": "UUID",
                    "required": "true" 
                }
              }
            }
 
+ Response 200 (application/json)

    ```json
    {
        "$schema": "http://json-schema.org/draft-03/schema",
        "type": "object",
        "properties": {
            "userId": {
               "description": "Rovi ID for the user.",
               "type": "integer",
               "required": "true"                
            },
            "oAuthToken": {
               "description": "OAuthToken value.",
               "type": "UUID",
               "required": "true"                
            },
            "oAuthTokenSecret": {
               "description": "OAuthTokenSecret value.",
               "type": "UUID",
               "required": "true"                
            },
            "oAuthVerifier": {
               "description": "OAuthVerifier value.",
               "type": "UUID",
               "required": "true"                
            },
            "sessionId":{
              "description": "Session ID.",
               "type": "UUID",
               "required": "true"    
            }
        }
    }
    ```

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 409 (application/json)
+ Response 429 (application/json)
+ Response 498 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

# pin_user_security_questions [/pin_user_security_questions?username={username}]
Manages the security questions and answers chosen by a user.

+ Parameters
  + username (required, string) ... 
    Username of the user.

## GET
Returns the security questions chosen by the user.

+ Response 200 (application/json)

    ```json
    {
        "$schema": "http://json-schema.org/draft-03/schema",
        "type": "object",
        "properties": {
           "securityQuestions":  [
              { 
                  "description": "Security question and ID. Number of questions is configurable in the database.",
                  "type": "object",
                  "required": "true",
                     "properties": {
                        "id": {
                           "description": "ID of the security question.",
                           "type": "integer",
                           "required": "true"           
                        },
                        "question":{
                           "description": "Security question.",
                           "type": "string",
                           "required": "true"
                        }
                    }
                }
            ]
        }
    }
    ```

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 409 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)

## PUT
Updates the security questions and answers chosen by the user.

+ Request (application/json)
  + Headers
            
            sessionId: session ID
            
  + Body

        ```json
        {
           "userSecurityQuestionsAnswers":  [
              { 
                  "description": "Security question ID and answer.",
                  "type": "object",
                  "required": "true",
                     "properties": {
                        "securityQuestionId": {
                           "description": "Security question ID.",
                           "type": "integer",
                           "required": "true"           
                        },
                        "securityAnswer":{
                           "description": "User answer to the security question.",
                           "type": "string",
                           "required": "true"
                        }
                     }
                  }
               ]
            }
        }
        ```

 + Schema
  
            {
            "userSecurityQuestionsAnswers":  [
                { 
                    "description": "Security question ID and answer.",
                    "type": "object",
                    "required": "true",
                        "properties": {
                            "securityQuestionId": {
                            "description": "Security question ID.",
                            "type": "integer",
                            "required": "true"           
                            },
                            "securityAnswer":{
                            "description": "Security answer.",
                            "type": "string",
                            "required": "true"
                            }
                        }
                    }
                ]
            }
 
+ Response 202 (application/json)
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 409 (application/json)
+ Response 429 (application/json)
+ Response 500 (application/json)
+ Response 503 (application/json)
