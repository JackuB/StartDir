/*
 * koncat
 * https://github.com/zhangyu/gruntplug
 *
 * Copyright (c) 2013 zhangyu
 * Licensed under the MIT license.
 */

'use strict';

module.exports = function(grunt) {

  // Please see the Grunt documentation for more information regarding task
  // creation: http://gruntjs.com/creating-tasks

  grunt.registerMultiTask('combiner', 'Your task description goes here.', function() {
    // Merge task-specific and/or target-specific options with these defaults.
    var options = this.options({
      banner : '',
      start : 'main.js',
      basePath : ''
    });

    var code = [];
    var exsitFile = {};
    var startFile = '';
    var baseFilePath = '';

    // Iterate over all specified file groups.
    this.files.forEach(function(f) {
      // Concat specified files.
      var src = f.src.filter(function(filepath) {
        // Warn on and remove invalid source files (if nonull was set).
        if (!grunt.file.exists(filepath)) {
          grunt.log.warn('Source file "' + filepath + '" not found.');
          return false;
        } else {
            if( new RegExp( '(?:^|/)' + options.start.replace(/\./,'\\.') + '$' ).test( filepath )){
                startFile = filepath;
            }
          return true;
        }
      })
      
      if(!startFile){
          grunt.log.warn('Can\'t find startFile');
          return false;
      }

      if(concatReq(startFile) === false){
          return false;
      }

      function concatReq(filePath){
          var path = require('path');
            if(options.basePath){
                filePath = path.relative(options.basePath,filePath);
                filePath = options.basePath + filePath;
            }
            var startFilePath = filePath.replace(/[^\/]+$/,'');
            filePath = path.relative(startFilePath,filePath);
            filePath = path.resolve(startFilePath,filePath);
            if(exsitFile[filePath]){
                return;
            }
            exsitFile[filePath] = 1;
            
            if (!grunt.file.exists(filePath)) {
                grunt.log.warn('Dependent\'s Source file "' + filepath + '" not found.');
                return false;
            }
          var fileContent = grunt.file.read(filePath);
          var pathPatt = /^[\r\n\s]*\/\*\s*(?:req|requires)\s+([^*\s]+)\s*\*\//img;
          var currentMatch = null;
          while(currentMatch = pathPatt.exec(fileContent)){
              var reqFile = currentMatch[1];
                if(reqFile.indexOf('/')!=0){
                    reqFile = (options.basePath || startFilePath) + reqFile; 
                } 
                if(concatReq(reqFile) === false){
                    return false;
                }
          }
          code.push(fileContent);
          grunt.log.ok('combin:'+filePath);
      }

      // Write the destination file.
      
      grunt.file.write(f.dest,code.join(';'));

      // Print a success message.
      grunt.log.writeln('File "' + f.dest + '" created.');
    });
  });

};
